

Microchip Technology PIC LITE Macro Assembler V1.36 build -262312587 
                                                                                               Tue Sep 13 17:58:27 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	16F1938
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	psect	text14,local,class=CODE,merge=1,delta=2
    24                           	psect	text15,local,class=CODE,merge=1,delta=2
    25                           	psect	text16,local,class=CODE,merge=1,delta=2
    26                           	psect	text17,local,class=CODE,merge=1,delta=2
    27                           	psect	text18,local,class=CODE,merge=1,delta=2
    28                           	psect	text19,local,class=CODE,merge=1,delta=2
    29                           	psect	text20,local,class=CODE,merge=1,delta=2
    30                           	psect	text21,local,class=CODE,merge=1,delta=2
    31                           	psect	text22,local,class=CODE,merge=1,delta=2
    32                           	psect	text23,local,class=CODE,merge=1,delta=2
    33                           	psect	text24,local,class=CODE,merge=1,delta=2
    34                           	psect	text25,local,class=CODE,merge=1,delta=2
    35                           	dabs	1,0x7E,2
    36  0000                     	;# 
    37  0001                     	;# 
    38  0002                     	;# 
    39  0003                     	;# 
    40  0004                     	;# 
    41  0005                     	;# 
    42  0006                     	;# 
    43  0007                     	;# 
    44  0008                     	;# 
    45  0009                     	;# 
    46  000A                     	;# 
    47  000B                     	;# 
    48  000C                     	;# 
    49  000D                     	;# 
    50  000E                     	;# 
    51  0010                     	;# 
    52  0011                     	;# 
    53  0012                     	;# 
    54  0013                     	;# 
    55  0015                     	;# 
    56  0016                     	;# 
    57  0016                     	;# 
    58  0017                     	;# 
    59  0018                     	;# 
    60  0019                     	;# 
    61  001A                     	;# 
    62  001B                     	;# 
    63  001C                     	;# 
    64  001E                     	;# 
    65  001F                     	;# 
    66  008C                     	;# 
    67  008D                     	;# 
    68  008E                     	;# 
    69  0090                     	;# 
    70  0091                     	;# 
    71  0092                     	;# 
    72  0093                     	;# 
    73  0095                     	;# 
    74  0096                     	;# 
    75  0097                     	;# 
    76  0098                     	;# 
    77  0099                     	;# 
    78  009A                     	;# 
    79  009B                     	;# 
    80  009B                     	;# 
    81  009C                     	;# 
    82  009D                     	;# 
    83  009E                     	;# 
    84  010C                     	;# 
    85  010D                     	;# 
    86  010E                     	;# 
    87  0110                     	;# 
    88  0111                     	;# 
    89  0112                     	;# 
    90  0113                     	;# 
    91  0114                     	;# 
    92  0115                     	;# 
    93  0116                     	;# 
    94  0117                     	;# 
    95  0118                     	;# 
    96  0119                     	;# 
    97  011A                     	;# 
    98  011B                     	;# 
    99  011D                     	;# 
   100  018C                     	;# 
   101  018D                     	;# 
   102  0191                     	;# 
   103  0191                     	;# 
   104  0192                     	;# 
   105  0193                     	;# 
   106  0193                     	;# 
   107  0193                     	;# 
   108  0194                     	;# 
   109  0195                     	;# 
   110  0196                     	;# 
   111  0199                     	;# 
   112  019A                     	;# 
   113  019B                     	;# 
   114  019B                     	;# 
   115  019B                     	;# 
   116  019B                     	;# 
   117  019C                     	;# 
   118  019C                     	;# 
   119  019D                     	;# 
   120  019E                     	;# 
   121  019F                     	;# 
   122  020D                     	;# 
   123  0210                     	;# 
   124  0211                     	;# 
   125  0212                     	;# 
   126  0213                     	;# 
   127  0214                     	;# 
   128  0215                     	;# 
   129  0215                     	;# 
   130  0216                     	;# 
   131  0217                     	;# 
   132  0291                     	;# 
   133  0291                     	;# 
   134  0292                     	;# 
   135  0293                     	;# 
   136  0294                     	;# 
   137  0295                     	;# 
   138  0295                     	;# 
   139  0296                     	;# 
   140  0298                     	;# 
   141  0298                     	;# 
   142  0299                     	;# 
   143  029A                     	;# 
   144  029B                     	;# 
   145  029C                     	;# 
   146  029C                     	;# 
   147  029D                     	;# 
   148  029E                     	;# 
   149  029F                     	;# 
   150  0311                     	;# 
   151  0311                     	;# 
   152  0312                     	;# 
   153  0313                     	;# 
   154  0314                     	;# 
   155  0315                     	;# 
   156  0315                     	;# 
   157  0316                     	;# 
   158  0318                     	;# 
   159  0318                     	;# 
   160  0319                     	;# 
   161  031A                     	;# 
   162  031C                     	;# 
   163  031C                     	;# 
   164  031D                     	;# 
   165  031E                     	;# 
   166  0394                     	;# 
   167  0395                     	;# 
   168  0396                     	;# 
   169  0415                     	;# 
   170  0416                     	;# 
   171  0417                     	;# 
   172  041C                     	;# 
   173  041D                     	;# 
   174  041E                     	;# 
   175  0791                     	;# 
   176  0792                     	;# 
   177  0793                     	;# 
   178  0794                     	;# 
   179  0795                     	;# 
   180  0798                     	;# 
   181  0799                     	;# 
   182  07A0                     	;# 
   183  07A1                     	;# 
   184  07A3                     	;# 
   185  07A4                     	;# 
   186  07A6                     	;# 
   187  07A7                     	;# 
   188  07A9                     	;# 
   189  07AA                     	;# 
   190  0FE4                     	;# 
   191  0FE5                     	;# 
   192  0FE6                     	;# 
   193  0FE7                     	;# 
   194  0FE8                     	;# 
   195  0FE9                     	;# 
   196  0FEA                     	;# 
   197  0FEB                     	;# 
   198  0FED                     	;# 
   199  0FEE                     	;# 
   200  0FEF                     	;# 
   201                           
   202                           	psect	stringtext
   203  1800                     __pstringtext:	
   204  1800                     _dpowers:	
   205  1800  3401               	retlw	1
   206  1801  3400               	retlw	0
   207  1802  3400               	retlw	0
   208  1803  3400               	retlw	0
   209  1804  340A               	retlw	10
   210  1805  3400               	retlw	0
   211  1806  3400               	retlw	0
   212  1807  3400               	retlw	0
   213  1808  3464               	retlw	100
   214  1809  3400               	retlw	0
   215  180A  3400               	retlw	0
   216  180B  3400               	retlw	0
   217  180C  34E8               	retlw	232
   218  180D  3403               	retlw	3
   219  180E  3400               	retlw	0
   220  180F  3400               	retlw	0
   221  1810  3410               	retlw	16
   222  1811  3427               	retlw	39
   223  1812  3400               	retlw	0
   224  1813  3400               	retlw	0
   225  1814  34A0               	retlw	160
   226  1815  3486               	retlw	134
   227  1816  3401               	retlw	1
   228  1817  3400               	retlw	0
   229  1818  3440               	retlw	64
   230  1819  3442               	retlw	66
   231  181A  340F               	retlw	15
   232  181B  3400               	retlw	0
   233  181C  3480               	retlw	128
   234  181D  3496               	retlw	150
   235  181E  3498               	retlw	152
   236  181F  3400               	retlw	0
   237  1820  3400               	retlw	0
   238  1821  34E1               	retlw	225
   239  1822  34F5               	retlw	245
   240  1823  3405               	retlw	5
   241  1824  3400               	retlw	0
   242  1825  34CA               	retlw	202
   243  1826  349A               	retlw	154
   244  1827  343B               	retlw	59
   245  1828                     __end_of_dpowers:	
   246  1828                     __npowers_:	
   247  1828  3400               	retlw	0
   248  1829  3480               	retlw	128
   249  182A  343F               	retlw	63
   250  182B  34CD               	retlw	205
   251  182C  34CC               	retlw	204
   252  182D  343D               	retlw	61
   253  182E  34D7               	retlw	215
   254  182F  3423               	retlw	35
   255  1830  343C               	retlw	60
   256  1831  3412               	retlw	18
   257  1832  3483               	retlw	131
   258  1833  343A               	retlw	58
   259  1834  34B7               	retlw	183
   260  1835  34D1               	retlw	209
   261  1836  3438               	retlw	56
   262  1837  34C6               	retlw	198
   263  1838  3427               	retlw	39
   264  1839  3437               	retlw	55
   265  183A  3438               	retlw	56
   266  183B  3486               	retlw	134
   267  183C  3435               	retlw	53
   268  183D  34C0               	retlw	192
   269  183E  34D6               	retlw	214
   270  183F  3433               	retlw	51
   271  1840  34CC               	retlw	204
   272  1841  342B               	retlw	43
   273  1842  3432               	retlw	50
   274  1843  3470               	retlw	112
   275  1844  3489               	retlw	137
   276  1845  3430               	retlw	48
   277  1846  34E7               	retlw	231
   278  1847  34DB               	retlw	219
   279  1848  342E               	retlw	46
   280  1849  34E5               	retlw	229
   281  184A  343C               	retlw	60
   282  184B  341E               	retlw	30
   283  184C  3442               	retlw	66
   284  184D  34A2               	retlw	162
   285  184E  340D               	retlw	13
   286  184F                     __end_of__npowers_:	
   287  184F                     __powers_:	
   288  184F  3400               	retlw	0
   289  1850  3480               	retlw	128
   290  1851  343F               	retlw	63
   291  1852  3400               	retlw	0
   292  1853  3420               	retlw	32
   293  1854  3441               	retlw	65
   294  1855  3400               	retlw	0
   295  1856  34C8               	retlw	200
   296  1857  3442               	retlw	66
   297  1858  3400               	retlw	0
   298  1859  347A               	retlw	122
   299  185A  3444               	retlw	68
   300  185B  3440               	retlw	64
   301  185C  341C               	retlw	28
   302  185D  3446               	retlw	70
   303  185E  3450               	retlw	80
   304  185F  34C3               	retlw	195
   305  1860  3447               	retlw	71
   306  1861  3424               	retlw	36
   307  1862  3474               	retlw	116
   308  1863  3449               	retlw	73
   309  1864  3497               	retlw	151
   310  1865  3418               	retlw	24
   311  1866  344B               	retlw	75
   312  1867  34BC               	retlw	188
   313  1868  34BE               	retlw	190
   314  1869  344C               	retlw	76
   315  186A  346B               	retlw	107
   316  186B  346E               	retlw	110
   317  186C  344E               	retlw	78
   318  186D  3403               	retlw	3
   319  186E  3415               	retlw	21
   320  186F  3450               	retlw	80
   321  1870  3479               	retlw	121
   322  1871  34AD               	retlw	173
   323  1872  3460               	retlw	96
   324  1873  34F3               	retlw	243
   325  1874  3449               	retlw	73
   326  1875  3471               	retlw	113
   327  1876                     __end_of__powers_:	
   328  000E                     _PORTCbits	set	14
   329  009D                     _ADCON0bits	set	157
   330  009E                     _ADCON1bits	set	158
   331  009C                     _ADRESH	set	156
   332  009B                     _ADRESL	set	155
   333  0099                     _OSCCONbits	set	153
   334  008C                     _TRISA	set	140
   335  008E                     _TRISCbits	set	142
   336  04E9                     _GO	set	1257
   337  018C                     _ANSELA	set	396
   338  1876                     STR_2:	
   339  1876  3454               	retlw	84	;'T'
   340  1877  3465               	retlw	101	;'e'
   341  1878  346D               	retlw	109	;'m'
   342  1879  3470               	retlw	112	;'p'
   343  187A  3420               	retlw	32	;' '
   344  187B  3425               	retlw	37	;'%'
   345  187C  3430               	retlw	48	;'0'
   346  187D  3434               	retlw	52	;'4'
   347  187E  342E               	retlw	46	;'.'
   348  187F  3432               	retlw	50	;'2'
   349  1880  3466               	retlw	102	;'f'
   350  1881  3400               	retlw	0
   351  1882                     STR_1:	
   352  1882  3441               	retlw	65	;'A'
   353  1883  3444               	retlw	68	;'D'
   354  1884  3443               	retlw	67	;'C'
   355  1885  3420               	retlw	32	;' '
   356  1886  3425               	retlw	37	;'%'
   357  1887  3430               	retlw	48	;'0'
   358  1888  3434               	retlw	52	;'4'
   359  1889  3464               	retlw	100	;'d'
   360  188A  3400               	retlw	0
   361                           
   362                           ; #config settings
   363  0000                     
   364                           	psect	cinit
   365  07FD                     start_initialization:	
   366  07FD                     __initialization:	
   367  07FD                     end_of_initialization:	
   368                           ;End of C runtime variable initialization code
   369                           
   370  07FD                     __end_of__initialization:	
   371  07FD  0020               	movlb	0
   372  07FE  318A  2A35         	ljmp	_main	;jump to C main() function
   373                           
   374                           	psect	cstackBANK1
   375  00A0                     __pcstackBANK1:	
   376  00A0                     _sprintf$723:	
   377                           
   378                           ; 3 bytes @ 0x0
   379  00A0                     	ds	3
   380  00A3                     sprintf@ap:	
   381                           
   382                           ; 1 bytes @ 0x3
   383  00A3                     	ds	1
   384  00A4                     sprintf@tmpval:	
   385                           
   386                           ; 4 bytes @ 0x4
   387  00A4                     	ds	4
   388  00A8                     sprintf@val:	
   389                           
   390                           ; 4 bytes @ 0x8
   391  00A8                     	ds	4
   392  00AC                     sprintf@exp:	
   393                           
   394                           ; 2 bytes @ 0xC
   395  00AC                     	ds	2
   396  00AE                     sprintf@flag:	
   397                           
   398                           ; 2 bytes @ 0xE
   399  00AE                     	ds	2
   400  00B0                     sprintf@width:	
   401                           
   402                           ; 2 bytes @ 0x10
   403  00B0                     	ds	2
   404  00B2                     sprintf@fval:	
   405                           
   406                           ; 3 bytes @ 0x12
   407  00B2                     	ds	3
   408  00B5                     sprintf@prec:	
   409                           
   410                           ; 2 bytes @ 0x15
   411  00B5                     	ds	2
   412  00B7                     sprintf@sp:	
   413                           
   414                           ; 1 bytes @ 0x17
   415  00B7                     	ds	1
   416  00B8                     sprintf@c:	
   417                           
   418                           ; 1 bytes @ 0x18
   419  00B8                     	ds	1
   420  00B9                     main@buffer1:	
   421                           
   422                           ; 16 bytes @ 0x19
   423  00B9                     	ds	16
   424  00C9                     main@volt:	
   425                           
   426                           ; 3 bytes @ 0x29
   427  00C9                     	ds	3
   428  00CC                     main@temp:	
   429                           
   430                           ; 3 bytes @ 0x2C
   431  00CC                     	ds	3
   432  00CF                     main@adc:	
   433                           
   434                           ; 2 bytes @ 0x2F
   435  00CF                     	ds	2
   436                           
   437                           	psect	cstackCOMMON
   438  0070                     __pcstackCOMMON:	
   439  0070                     ?_isdigit:	
   440  0070                     ?___ftge:	
   441                           ; 1 bit 
   442                           
   443  0070                     ?_Lcd_Cmd:	
   444                           ; 1 bit 
   445                           
   446  0070                     ??_Lcd_Cmd:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  0070                     ?_Lcd_Chr_CP:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0070                     ??_Lcd_Chr_CP:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0070                     ??_isdigit:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  0070                     ?_Lcd_Init:	
   459                           ; 1 bytes @ 0x0
   460                           
   461  0070                     ?_main:	
   462                           ; 1 bytes @ 0x0
   463                           
   464  0070                     ?___awmod:	
   465                           ; 1 bytes @ 0x0
   466                           
   467  0070                     ?___ftpack:	
   468                           ; 2 bytes @ 0x0
   469                           
   470  0070                     ?___ftneg:	
   471                           ; 3 bytes @ 0x0
   472                           
   473  0070                     ?__tdiv_to_l_:	
   474                           ; 3 bytes @ 0x0
   475                           
   476  0070                     ?__div_to_l_:	
   477                           ; 4 bytes @ 0x0
   478                           
   479  0070                     ?___lldiv:	
   480                           ; 4 bytes @ 0x0
   481                           
   482  0070                     _isdigit$509:	
   483                           ; 4 bytes @ 0x0
   484                           
   485  0070                     ___awmod@divisor:	
   486                           ; 1 bytes @ 0x0
   487                           
   488  0070                     __div_to_l_@f1:	
   489                           ; 2 bytes @ 0x0
   490                           
   491  0070                     ___ftpack@arg:	
   492                           ; 3 bytes @ 0x0
   493                           
   494  0070                     __tdiv_to_l_@f1:	
   495                           ; 3 bytes @ 0x0
   496                           
   497  0070                     ___ftge@ff1:	
   498                           ; 3 bytes @ 0x0
   499                           
   500  0070                     ___ftneg@f1:	
   501                           ; 3 bytes @ 0x0
   502                           
   503  0070                     ___lldiv@divisor:	
   504                           ; 3 bytes @ 0x0
   505                           
   506                           
   507                           ; 4 bytes @ 0x0
   508  0070                     	ds	1
   509  0071                     isdigit@c:	
   510                           
   511                           ; 1 bytes @ 0x1
   512  0071                     	ds	1
   513  0072                     Lcd_Chr_CP@data:	
   514  0072                     Lcd_Cmd@data:	
   515                           ; 1 bytes @ 0x2
   516                           
   517  0072                     ___awmod@dividend:	
   518                           ; 1 bytes @ 0x2
   519                           
   520                           
   521                           ; 2 bytes @ 0x2
   522  0072                     	ds	1
   523  0073                     ??_Lcd_Init:	
   524  0073                     ?_Lcd_Out2:	
   525                           ; 1 bytes @ 0x3
   526                           
   527  0073                     ??___ftneg:	
   528                           ; 1 bytes @ 0x3
   529                           
   530  0073                     Lcd_Out2@x:	
   531                           ; 1 bytes @ 0x3
   532                           
   533  0073                     ___ftpack@exp:	
   534                           ; 1 bytes @ 0x3
   535                           
   536  0073                     __div_to_l_@f2:	
   537                           ; 1 bytes @ 0x3
   538                           
   539  0073                     __tdiv_to_l_@f2:	
   540                           ; 3 bytes @ 0x3
   541                           
   542  0073                     ___ftge@ff2:	
   543                           ; 3 bytes @ 0x3
   544                           
   545                           
   546                           ; 3 bytes @ 0x3
   547  0073                     	ds	1
   548  0074                     ??___awmod:	
   549  0074                     Lcd_Out2@buffer:	
   550                           ; 1 bytes @ 0x4
   551                           
   552  0074                     ___ftpack@sign:	
   553                           ; 1 bytes @ 0x4
   554                           
   555  0074                     ___lldiv@dividend:	
   556                           ; 1 bytes @ 0x4
   557                           
   558                           
   559                           ; 4 bytes @ 0x4
   560  0074                     	ds	1
   561  0075                     ??___ftpack:	
   562  0075                     ??_Lcd_Out2:	
   563                           ; 1 bytes @ 0x5
   564                           
   565  0075                     Lcd_Init@data:	
   566                           ; 1 bytes @ 0x5
   567                           
   568  0075                     ___awmod@counter:	
   569                           ; 1 bytes @ 0x5
   570                           
   571                           
   572                           ; 1 bytes @ 0x5
   573  0075                     	ds	1
   574  0076                     ??__tdiv_to_l_:	
   575  0076                     ??__div_to_l_:	
   576                           ; 1 bytes @ 0x6
   577                           
   578  0076                     ??___ftge:	
   579                           ; 1 bytes @ 0x6
   580                           
   581  0076                     Lcd_Out2@y:	
   582                           ; 1 bytes @ 0x6
   583                           
   584  0076                     ___awmod@sign:	
   585                           ; 1 bytes @ 0x6
   586                           
   587                           
   588                           ; 1 bytes @ 0x6
   589  0076                     	ds	1
   590  0077                     ?___awdiv:	
   591  0077                     Lcd_Out2@data:	
   592                           ; 2 bytes @ 0x7
   593                           
   594  0077                     ___awdiv@divisor:	
   595                           ; 1 bytes @ 0x7
   596                           
   597                           
   598                           ; 2 bytes @ 0x7
   599  0077                     	ds	1
   600  0078                     ??___lldiv:	
   601  0078                     ?___awtoft:	
   602                           ; 1 bytes @ 0x8
   603                           
   604  0078                     ?___lltoft:	
   605                           ; 3 bytes @ 0x8
   606                           
   607  0078                     ___awtoft@c:	
   608                           ; 3 bytes @ 0x8
   609                           
   610  0078                     ___lltoft@c:	
   611                           ; 2 bytes @ 0x8
   612                           
   613                           
   614                           ; 4 bytes @ 0x8
   615  0078                     	ds	1
   616  0079                     ___awdiv@dividend:	
   617  0079                     ___lldiv@quotient:	
   618                           ; 2 bytes @ 0x9
   619                           
   620                           
   621                           ; 4 bytes @ 0x9
   622  0079                     	ds	2
   623  007B                     ??___awdiv:	
   624  007B                     ??___awtoft:	
   625                           ; 1 bytes @ 0xB
   626                           
   627                           
   628                           ; 1 bytes @ 0xB
   629  007B                     	ds	1
   630  007C                     ??___wmul:	
   631  007C                     ??___lltoft:	
   632                           ; 1 bytes @ 0xC
   633                           
   634  007C                     ___wmul@product:	
   635                           ; 1 bytes @ 0xC
   636                           
   637                           
   638                           ; 2 bytes @ 0xC
   639  007C                     	ds	1
   640  007D                     ___awtoft@sign:	
   641  007D                     ___lldiv@counter:	
   642                           ; 1 bytes @ 0xD
   643                           
   644  007D                     ___lltoft@exp:	
   645                           ; 1 bytes @ 0xD
   646                           
   647                           
   648                           ; 1 bytes @ 0xD
   649  007D                     	ds	1
   650  007E                     ??___ftsub:	
   651                           
   652                           	psect	cstackBANK0
   653  0020                     __pcstackBANK0:	
   654                           ; 1 bytes @ 0xE
   655                           
   656  0020                     ?___llmod:	
   657  0020                     ___awdiv@counter:	
   658                           ; 4 bytes @ 0x0
   659                           
   660  0020                     __div_to_l_@quot:	
   661                           ; 1 bytes @ 0x0
   662                           
   663  0020                     __tdiv_to_l_@quot:	
   664                           ; 4 bytes @ 0x0
   665                           
   666  0020                     ___llmod@divisor:	
   667                           ; 4 bytes @ 0x0
   668                           
   669                           
   670                           ; 4 bytes @ 0x0
   671  0020                     	ds	1
   672  0021                     ___awdiv@sign:	
   673                           
   674                           ; 1 bytes @ 0x1
   675  0021                     	ds	1
   676  0022                     ___awdiv@quotient:	
   677                           
   678                           ; 2 bytes @ 0x2
   679  0022                     	ds	2
   680  0024                     ?___wmul:	
   681  0024                     __div_to_l_@cntr:	
   682                           ; 2 bytes @ 0x4
   683                           
   684  0024                     __tdiv_to_l_@cntr:	
   685                           ; 1 bytes @ 0x4
   686                           
   687  0024                     ___wmul@multiplier:	
   688                           ; 1 bytes @ 0x4
   689                           
   690  0024                     ___llmod@dividend:	
   691                           ; 2 bytes @ 0x4
   692                           
   693                           
   694                           ; 4 bytes @ 0x4
   695  0024                     	ds	1
   696  0025                     __div_to_l_@exp1:	
   697  0025                     __tdiv_to_l_@exp1:	
   698                           ; 1 bytes @ 0x5
   699                           
   700                           
   701                           ; 1 bytes @ 0x5
   702  0025                     	ds	1
   703  0026                     ___wmul@multiplicand:	
   704                           
   705                           ; 2 bytes @ 0x6
   706  0026                     	ds	2
   707  0028                     ??___llmod:	
   708  0028                     ?___ftmul:	
   709                           ; 1 bytes @ 0x8
   710                           
   711  0028                     ___ftmul@f1:	
   712                           ; 3 bytes @ 0x8
   713                           
   714                           
   715                           ; 3 bytes @ 0x8
   716  0028                     	ds	1
   717  0029                     ___llmod@counter:	
   718                           
   719                           ; 1 bytes @ 0x9
   720  0029                     	ds	2
   721  002B                     ___ftmul@f2:	
   722                           
   723                           ; 3 bytes @ 0xB
   724  002B                     	ds	3
   725  002E                     ??___ftmul:	
   726                           
   727                           ; 1 bytes @ 0xE
   728  002E                     	ds	4
   729  0032                     ___ftmul@exp:	
   730                           
   731                           ; 1 bytes @ 0x12
   732  0032                     	ds	1
   733  0033                     ___ftmul@f3_as_product:	
   734                           
   735                           ; 3 bytes @ 0x13
   736  0033                     	ds	3
   737  0036                     ___ftmul@cntr:	
   738                           
   739                           ; 1 bytes @ 0x16
   740  0036                     	ds	1
   741  0037                     ___ftmul@sign:	
   742                           
   743                           ; 1 bytes @ 0x17
   744  0037                     	ds	1
   745  0038                     ?_fround:	
   746  0038                     ?_scale:	
   747                           ; 3 bytes @ 0x18
   748                           
   749  0038                     ?___ftdiv:	
   750                           ; 3 bytes @ 0x18
   751                           
   752  0038                     ___ftdiv@f2:	
   753                           ; 3 bytes @ 0x18
   754                           
   755                           
   756                           ; 3 bytes @ 0x18
   757  0038                     	ds	3
   758  003B                     ??_fround:	
   759  003B                     ??_scale:	
   760                           ; 1 bytes @ 0x1B
   761                           
   762  003B                     ___ftdiv@f1:	
   763                           ; 1 bytes @ 0x1B
   764                           
   765                           
   766                           ; 3 bytes @ 0x1B
   767  003B                     	ds	2
   768  003D                     _scale$722:	
   769                           
   770                           ; 3 bytes @ 0x1D
   771  003D                     	ds	1
   772  003E                     ??___ftdiv:	
   773                           
   774                           ; 1 bytes @ 0x1E
   775  003E                     	ds	1
   776  003F                     _fround$721:	
   777                           
   778                           ; 3 bytes @ 0x1F
   779  003F                     	ds	1
   780  0040                     scale@scl:	
   781                           
   782                           ; 1 bytes @ 0x20
   783  0040                     	ds	1
   784  0041                     ?___fttol:	
   785  0041                     ___fttol@f1:	
   786                           ; 4 bytes @ 0x21
   787                           
   788                           
   789                           ; 3 bytes @ 0x21
   790  0041                     	ds	1
   791  0042                     ___ftdiv@cntr:	
   792  0042                     _fround$720:	
   793                           ; 1 bytes @ 0x22
   794                           
   795                           
   796                           ; 3 bytes @ 0x22
   797  0042                     	ds	1
   798  0043                     ___ftdiv@f3:	
   799                           
   800                           ; 3 bytes @ 0x23
   801  0043                     	ds	2
   802  0045                     ??___fttol:	
   803  0045                     fround@prec:	
   804                           ; 1 bytes @ 0x25
   805                           
   806                           
   807                           ; 1 bytes @ 0x25
   808  0045                     	ds	1
   809  0046                     ?___ftadd:	
   810  0046                     ___ftdiv@exp:	
   811                           ; 3 bytes @ 0x26
   812                           
   813  0046                     ___ftadd@f1:	
   814                           ; 1 bytes @ 0x26
   815                           
   816                           
   817                           ; 3 bytes @ 0x26
   818  0046                     	ds	1
   819  0047                     ___ftdiv@sign:	
   820                           
   821                           ; 1 bytes @ 0x27
   822  0047                     	ds	2
   823  0049                     ___fttol@sign1:	
   824  0049                     ___ftadd@f2:	
   825                           ; 1 bytes @ 0x29
   826                           
   827                           
   828                           ; 3 bytes @ 0x29
   829  0049                     	ds	1
   830  004A                     ___fttol@lval:	
   831                           
   832                           ; 4 bytes @ 0x2A
   833  004A                     	ds	2
   834  004C                     ??___ftadd:	
   835                           
   836                           ; 1 bytes @ 0x2C
   837  004C                     	ds	2
   838  004E                     ___fttol@exp1:	
   839                           
   840                           ; 1 bytes @ 0x2E
   841  004E                     	ds	2
   842  0050                     ___ftadd@sign:	
   843                           
   844                           ; 1 bytes @ 0x30
   845  0050                     	ds	1
   846  0051                     ___ftadd@exp2:	
   847                           
   848                           ; 1 bytes @ 0x31
   849  0051                     	ds	1
   850  0052                     ___ftadd@exp1:	
   851                           
   852                           ; 1 bytes @ 0x32
   853  0052                     	ds	1
   854  0053                     ?___ftsub:	
   855  0053                     ___ftsub@f2:	
   856                           ; 3 bytes @ 0x33
   857                           
   858                           
   859                           ; 3 bytes @ 0x33
   860  0053                     	ds	3
   861  0056                     ___ftsub@f1:	
   862                           
   863                           ; 3 bytes @ 0x36
   864  0056                     	ds	3
   865  0059                     ?_sprintf:	
   866  0059                     sprintf@f:	
   867                           ; 2 bytes @ 0x39
   868                           
   869                           
   870                           ; 2 bytes @ 0x39
   871  0059                     	ds	5
   872  005E                     ??_sprintf:	
   873                           
   874                           ; 1 bytes @ 0x3E
   875  005E                     	ds	6
   876  0064                     ??_main:	
   877                           
   878                           ; 1 bytes @ 0x44
   879  0064                     	ds	3
   880                           
   881                           	psect	maintext
   882  0A35                     __pmaintext:	
   883 ;;
   884 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   885 ;;
   886 ;; *************** function _main *****************
   887 ;; Defined at:
   888 ;;		line 7 in file "main.c"
   889 ;; Parameters:    Size  Location     Type
   890 ;;		None
   891 ;; Auto vars:     Size  Location     Type
   892 ;;  buffer1        16   25[BANK1 ] unsigned char [16]
   893 ;;  temp            3   44[BANK1 ] float 
   894 ;;  volt            3   41[BANK1 ] float 
   895 ;;  adc             2   47[BANK1 ] int 
   896 ;; Return value:  Size  Location     Type
   897 ;;                  1    wreg      void 
   898 ;; Registers used:
   899 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   900 ;; Tracked objects:
   901 ;;		On entry : B1F/0
   902 ;;		On exit  : 0/0
   903 ;;		Unchanged: 0/0
   904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   906 ;;      Locals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0
   907 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
   908 ;;      Totals:         0       3      24       0       0       0       0       0       0       0       0       0       
      +0       0
   909 ;;Total ram usage:       27 bytes
   910 ;; Hardware stack levels required when called:    4
   911 ;; This function calls:
   912 ;;		_Lcd_Cmd
   913 ;;		_Lcd_Init
   914 ;;		_Lcd_Out2
   915 ;;		___awtoft
   916 ;;		___ftdiv
   917 ;;		___ftmul
   918 ;;		_sprintf
   919 ;; This function is called by:
   920 ;;		Startup code after reset
   921 ;; This function uses a non-reentrant model
   922 ;;
   923                           
   924                           
   925                           ;psect for function _main
   926  0A35                     _main:	
   927                           
   928                           ;main.c: 8: int adc=0;
   929                           
   930                           ;incstack = 0
   931                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   932  0A35  0021               	movlb	1	; select bank1
   933  0A36  01CF               	clrf	main@adc^(0+128)
   934  0A37  01D0               	clrf	(main@adc+1)^(0+128)
   935                           
   936                           ;main.c: 9: float volt,temp;
   937                           ;main.c: 10: unsigned char buffer1[16];
   938                           ;main.c: 12: OSCCONbits.IRCF=0b1110;
   939  0A38  0819               	movf	25,w	;volatile
   940  0A39  3987               	andlw	-121
   941  0A3A  3870               	iorlw	112
   942  0A3B  0099               	movwf	25	;volatile
   943                           
   944                           ;main.c: 13: OSCCONbits.SCS=0b00;
   945  0A3C  30FC               	movlw	-4
   946  0A3D  0599               	andwf	25,f	;volatile
   947                           
   948                           ;main.c: 15: ANSELA=0b00100000;
   949  0A3E  3020               	movlw	32
   950  0A3F  0023               	movlb	3	; select bank3
   951  0A40  008C               	movwf	12	;volatile
   952                           
   953                           ;main.c: 18: TRISA=0b00100000;
   954  0A41  3020               	movlw	32
   955  0A42  0021               	movlb	1	; select bank1
   956  0A43  008C               	movwf	12	;volatile
   957                           
   958                           ;main.c: 21: ADCON0bits.CHS=4;
   959  0A44  081D               	movf	29,w	;volatile
   960  0A45  3983               	andlw	-125
   961  0A46  3810               	iorlw	16
   962  0A47  009D               	movwf	29	;volatile
   963                           
   964                           ;main.c: 22: ADCON1bits.ADNREF=0;
   965  0A48  111E               	bcf	30,2	;volatile
   966                           
   967                           ;main.c: 23: ADCON1bits.ADPREF=0;
   968  0A49  30FC               	movlw	-4
   969  0A4A  059E               	andwf	30,f	;volatile
   970                           
   971                           ;main.c: 24: ADCON1bits.ADCS=0b111;
   972  0A4B  3070               	movlw	112
   973  0A4C  049E               	iorwf	30,f	;volatile
   974                           
   975                           ;main.c: 25: ADCON1bits.ADFM=0b1;
   976  0A4D  179E               	bsf	30,7	;volatile
   977                           
   978                           ;main.c: 26: ADCON0bits.ADON=1;
   979  0A4E  141D               	bsf	29,0	;volatile
   980                           
   981                           ;main.c: 28: Lcd_Init();
   982  0A4F  3196  26A2  318A   	fcall	_Lcd_Init
   983                           
   984                           ;main.c: 29: Lcd_Cmd(1);
   985  0A52  3001               	movlw	1
   986  0A53  3194  24C3  318A   	fcall	_Lcd_Cmd
   987                           
   988                           ;main.c: 30: Lcd_Cmd(12);
   989  0A56  300C               	movlw	12
   990  0A57  3194  24C3  318A   	fcall	_Lcd_Cmd
   991                           
   992                           ;main.c: 31: _delay((unsigned long)((100)*(32000000/4000.0)));
   993  0A5A  3005               	movlw	5
   994  0A5B  0020               	movlb	0	; select bank0
   995  0A5C  00E6               	movwf	??_main+2
   996  0A5D  300F               	movlw	15
   997  0A5E  00E5               	movwf	??_main+1
   998  0A5F  30F4               	movlw	244
   999  0A60  00E4               	movwf	??_main
  1000  0A61                     u4357:	
  1001  0A61  0BE4               	decfsz	??_main,f
  1002  0A62  2A61               	goto	u4357
  1003  0A63  0BE5               	decfsz	??_main+1,f
  1004  0A64  2A61               	goto	u4357
  1005  0A65  0BE6               	decfsz	??_main+2,f
  1006  0A66  2A61               	goto	u4357
  1007  0A67                     l2966:	
  1008                           ;main.c: 32: while(1){
  1009                           
  1010                           
  1011                           ;main.c: 33: ADCON0bits.GO=1;
  1012  0A67  0021               	movlb	1	; select bank1
  1013  0A68  149D               	bsf	29,1	;volatile
  1014  0A69                     l69:	
  1015                           ;main.c: 34: while(GO);
  1016                           
  1017  0A69  189D               	btfsc	29,1	;volatile
  1018  0A6A  2A69               	goto	l69
  1019                           
  1020                           ;main.c: 35: adc=ADRESH;
  1021  0A6B  081C               	movf	28,w	;volatile
  1022  0A6C  0020               	movlb	0	; select bank0
  1023  0A6D  00E4               	movwf	??_main
  1024  0A6E  01E5               	clrf	??_main+1
  1025  0A6F  0864               	movf	??_main,w
  1026  0A70  0021               	movlb	1	; select bank1
  1027  0A71  00CF               	movwf	main@adc^(0+128)
  1028  0A72  0020               	movlb	0	; select bank0
  1029  0A73  0865               	movf	??_main+1,w
  1030  0A74  0021               	movlb	1	; select bank1
  1031  0A75  00D0               	movwf	(main@adc+1)^(0+128)
  1032                           
  1033                           ;main.c: 36: adc=adc<<8;
  1034  0A76  0850               	movf	(main@adc+1)^(0+128),w
  1035  0A77  0020               	movlb	0	; select bank0
  1036  0A78  00E5               	movwf	??_main+1
  1037  0A79  0021               	movlb	1	; select bank1
  1038  0A7A  084F               	movf	main@adc^(0+128),w
  1039  0A7B  0020               	movlb	0	; select bank0
  1040  0A7C  00E4               	movwf	??_main
  1041  0A7D  0864               	movf	??_main,w
  1042  0A7E  00E5               	movwf	??_main+1
  1043  0A7F  01E4               	clrf	??_main
  1044  0A80  0864               	movf	??_main,w
  1045  0A81  0021               	movlb	1	; select bank1
  1046  0A82  00CF               	movwf	main@adc^(0+128)
  1047  0A83  0020               	movlb	0	; select bank0
  1048  0A84  0865               	movf	??_main+1,w
  1049  0A85  0021               	movlb	1	; select bank1
  1050  0A86  00D0               	movwf	(main@adc+1)^(0+128)
  1051                           
  1052                           ;main.c: 37: adc=adc+ADRESL;
  1053  0A87  081B               	movf	27,w	;volatile
  1054  0A88  074F               	addwf	main@adc^(0+128),w
  1055  0A89  0020               	movlb	0	; select bank0
  1056  0A8A  00E4               	movwf	??_main
  1057  0A8B  0021               	movlb	1	; select bank1
  1058  0A8C  0850               	movf	(main@adc+1)^(0+128),w
  1059  0A8D  1803               	skipnc
  1060  0A8E  0A50               	incf	(main@adc+1)^(0+128),w
  1061  0A8F  0020               	movlb	0	; select bank0
  1062  0A90  00E5               	movwf	??_main+1
  1063  0A91  0864               	movf	??_main,w
  1064  0A92  0021               	movlb	1	; select bank1
  1065  0A93  00CF               	movwf	main@adc^(0+128)
  1066  0A94  0020               	movlb	0	; select bank0
  1067  0A95  0865               	movf	??_main+1,w
  1068  0A96  0021               	movlb	1	; select bank1
  1069  0A97  00D0               	movwf	(main@adc+1)^(0+128)
  1070                           
  1071                           ;main.c: 38: volt=adc*5.0/1024.0;
  1072  0A98  3000               	movlw	0
  1073  0A99  0020               	movlb	0	; select bank0
  1074  0A9A  00B8               	movwf	___ftdiv@f2
  1075  0A9B  3080               	movlw	128
  1076  0A9C  00B9               	movwf	___ftdiv@f2+1
  1077  0A9D  3044               	movlw	68
  1078  0A9E  00BA               	movwf	___ftdiv@f2+2
  1079  0A9F  3000               	movlw	0
  1080  0AA0  00A8               	movwf	___ftmul@f1
  1081  0AA1  30A0               	movlw	160
  1082  0AA2  00A9               	movwf	___ftmul@f1+1
  1083  0AA3  3040               	movlw	64
  1084  0AA4  00AA               	movwf	___ftmul@f1+2
  1085  0AA5  0021               	movlb	1	; select bank1
  1086  0AA6  0850               	movf	(main@adc+1)^(0+128),w
  1087  0AA7  00F9               	movwf	___awtoft@c+1
  1088  0AA8  084F               	movf	main@adc^(0+128),w
  1089  0AA9  00F8               	movwf	___awtoft@c
  1090  0AAA  3192  22DF  318A   	fcall	___awtoft
  1091  0AAD  0878               	movf	?___awtoft,w
  1092  0AAE  0020               	movlb	0	; select bank0
  1093  0AAF  00AB               	movwf	___ftmul@f2
  1094  0AB0  0879               	movf	?___awtoft+1,w
  1095  0AB1  00AC               	movwf	___ftmul@f2+1
  1096  0AB2  087A               	movf	?___awtoft+2,w
  1097  0AB3  00AD               	movwf	___ftmul@f2+2
  1098  0AB4  3197  274C  318A   	fcall	___ftmul
  1099  0AB7  0020               	movlb	0	; select bank0
  1100  0AB8  0828               	movf	?___ftmul,w
  1101  0AB9  00BB               	movwf	___ftdiv@f1
  1102  0ABA  0829               	movf	?___ftmul+1,w
  1103  0ABB  00BC               	movwf	___ftdiv@f1+1
  1104  0ABC  082A               	movf	?___ftmul+2,w
  1105  0ABD  00BD               	movwf	___ftdiv@f1+2
  1106  0ABE  3195  25F9  318A   	fcall	___ftdiv
  1107  0AC1  0020               	movlb	0	; select bank0
  1108  0AC2  0838               	movf	?___ftdiv,w
  1109  0AC3  0021               	movlb	1	; select bank1
  1110  0AC4  00C9               	movwf	main@volt^(0+128)
  1111  0AC5  0020               	movlb	0	; select bank0
  1112  0AC6  0839               	movf	?___ftdiv+1,w
  1113  0AC7  0021               	movlb	1	; select bank1
  1114  0AC8  00CA               	movwf	(main@volt+1)^(0+128)
  1115  0AC9  0020               	movlb	0	; select bank0
  1116  0ACA  083A               	movf	?___ftdiv+2,w
  1117  0ACB  0021               	movlb	1	; select bank1
  1118  0ACC  00CB               	movwf	(main@volt+2)^(0+128)
  1119                           
  1120                           ;main.c: 39: sprintf(buffer1,"ADC %04d",adc);
  1121  0ACD  3082               	movlw	low (STR_1| (0+32768))
  1122  0ACE  0020               	movlb	0	; select bank0
  1123  0ACF  00D9               	movwf	sprintf@f
  1124  0AD0  3098               	movlw	high (STR_1| (0+32768))
  1125  0AD1  00DA               	movwf	sprintf@f+1
  1126  0AD2  0021               	movlb	1	; select bank1
  1127  0AD3  0850               	movf	(main@adc+1)^(0+128),w
  1128  0AD4  0020               	movlb	0	; select bank0
  1129  0AD5  00DC               	movwf	?_sprintf+3
  1130  0AD6  0021               	movlb	1	; select bank1
  1131  0AD7  084F               	movf	main@adc^(0+128),w
  1132  0AD8  0020               	movlb	0	; select bank0
  1133  0AD9  00DB               	movwf	?_sprintf+2
  1134  0ADA  30B9               	movlw	(low (main@buffer1| 0))& (0+255)
  1135  0ADB  3180  207E  318A   	fcall	_sprintf
  1136                           
  1137                           ;main.c: 40: Lcd_Out2(1, 1, buffer1);
  1138  0ADE  01F3               	clrf	Lcd_Out2@x
  1139  0ADF  0AF3               	incf	Lcd_Out2@x,f
  1140  0AE0  30B9               	movlw	(low (main@buffer1| 0))& (0+255)
  1141  0AE1  0020               	movlb	0	; select bank0
  1142  0AE2  00E4               	movwf	??_main
  1143  0AE3  0864               	movf	??_main,w
  1144  0AE4  00F4               	movwf	Lcd_Out2@buffer
  1145  0AE5  3001               	movlw	1
  1146  0AE6  3193  2327  318A   	fcall	_Lcd_Out2
  1147                           
  1148                           ;main.c: 41: temp=volt*100;
  1149  0AE9  3000               	movlw	0
  1150  0AEA  0020               	movlb	0	; select bank0
  1151  0AEB  00A8               	movwf	___ftmul@f1
  1152  0AEC  30C8               	movlw	200
  1153  0AED  00A9               	movwf	___ftmul@f1+1
  1154  0AEE  3042               	movlw	66
  1155  0AEF  00AA               	movwf	___ftmul@f1+2
  1156  0AF0  0021               	movlb	1	; select bank1
  1157  0AF1  0849               	movf	main@volt^(0+128),w
  1158  0AF2  0020               	movlb	0	; select bank0
  1159  0AF3  00AB               	movwf	___ftmul@f2
  1160  0AF4  0021               	movlb	1	; select bank1
  1161  0AF5  084A               	movf	(main@volt+1)^(0+128),w
  1162  0AF6  0020               	movlb	0	; select bank0
  1163  0AF7  00AC               	movwf	___ftmul@f2+1
  1164  0AF8  0021               	movlb	1	; select bank1
  1165  0AF9  084B               	movf	(main@volt+2)^(0+128),w
  1166  0AFA  0020               	movlb	0	; select bank0
  1167  0AFB  00AD               	movwf	___ftmul@f2+2
  1168  0AFC  3197  274C  318A   	fcall	___ftmul
  1169  0AFF  0020               	movlb	0	; select bank0
  1170  0B00  0828               	movf	?___ftmul,w
  1171  0B01  0021               	movlb	1	; select bank1
  1172  0B02  00CC               	movwf	main@temp^(0+128)
  1173  0B03  0020               	movlb	0	; select bank0
  1174  0B04  0829               	movf	?___ftmul+1,w
  1175  0B05  0021               	movlb	1	; select bank1
  1176  0B06  00CD               	movwf	(main@temp+1)^(0+128)
  1177  0B07  0020               	movlb	0	; select bank0
  1178  0B08  082A               	movf	?___ftmul+2,w
  1179  0B09  0021               	movlb	1	; select bank1
  1180  0B0A  00CE               	movwf	(main@temp+2)^(0+128)
  1181                           
  1182                           ;main.c: 42: sprintf(buffer1,"Temp %04.2f",temp);
  1183  0B0B  3076               	movlw	low (STR_2| (0+32768))
  1184  0B0C  0020               	movlb	0	; select bank0
  1185  0B0D  00D9               	movwf	sprintf@f
  1186  0B0E  3098               	movlw	high (STR_2| (0+32768))
  1187  0B0F  00DA               	movwf	sprintf@f+1
  1188  0B10  0021               	movlb	1	; select bank1
  1189  0B11  084C               	movf	main@temp^(0+128),w
  1190  0B12  0020               	movlb	0	; select bank0
  1191  0B13  00DB               	movwf	?_sprintf+2
  1192  0B14  0021               	movlb	1	; select bank1
  1193  0B15  084D               	movf	(main@temp+1)^(0+128),w
  1194  0B16  0020               	movlb	0	; select bank0
  1195  0B17  00DC               	movwf	?_sprintf+3
  1196  0B18  0021               	movlb	1	; select bank1
  1197  0B19  084E               	movf	(main@temp+2)^(0+128),w
  1198  0B1A  0020               	movlb	0	; select bank0
  1199  0B1B  00DD               	movwf	?_sprintf+4
  1200  0B1C  30B9               	movlw	(low (main@buffer1| 0))& (0+255)
  1201  0B1D  3180  207E  318A   	fcall	_sprintf
  1202                           
  1203                           ;main.c: 43: Lcd_Out2(2, 1, buffer1);
  1204  0B20  01F3               	clrf	Lcd_Out2@x
  1205  0B21  0AF3               	incf	Lcd_Out2@x,f
  1206  0B22  30B9               	movlw	(low (main@buffer1| 0))& (0+255)
  1207  0B23  0020               	movlb	0	; select bank0
  1208  0B24  00E4               	movwf	??_main
  1209  0B25  0864               	movf	??_main,w
  1210  0B26  00F4               	movwf	Lcd_Out2@buffer
  1211  0B27  3002               	movlw	2
  1212  0B28  3193  2327  318A   	fcall	_Lcd_Out2
  1213                           
  1214                           ;main.c: 44: _delay((unsigned long)((300)*(32000000/4000.0)));
  1215  0B2B  300D               	movlw	13
  1216  0B2C  0020               	movlb	0	; select bank0
  1217  0B2D  00E6               	movwf	??_main+2
  1218  0B2E  302D               	movlw	45
  1219  0B2F  00E5               	movwf	??_main+1
  1220  0B30  30E2               	movlw	226
  1221  0B31  00E4               	movwf	??_main
  1222  0B32                     u4367:	
  1223  0B32  0BE4               	decfsz	??_main,f
  1224  0B33  2B32               	goto	u4367
  1225  0B34  0BE5               	decfsz	??_main+1,f
  1226  0B35  2B32               	goto	u4367
  1227  0B36  0BE6               	decfsz	??_main+2,f
  1228  0B37  2B32               	goto	u4367
  1229  0B38  3200               	nop2
  1230  0B39  2A67               	goto	l2966
  1231  0B3A                     __end_of_main:	
  1232                           ;main.c: 47: }
  1233                           ;main.c: 49: return;
  1234                           
  1235                           
  1236                           	psect	text1
  1237  007E                     __ptext1:	
  1238 ;; *************** function _sprintf *****************
  1239 ;; Defined at:
  1240 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\doprnt.c"
  1241 ;; Parameters:    Size  Location     Type
  1242 ;;  sp              1    wreg     PTR unsigned char 
  1243 ;;		 -> main@buffer1(16), 
  1244 ;;  f               2   57[BANK0 ] PTR const unsigned char 
  1245 ;;		 -> STR_2(12), STR_1(9), 
  1246 ;; Auto vars:     Size  Location     Type
  1247 ;;  sp              1   23[BANK1 ] PTR unsigned char 
  1248 ;;		 -> main@buffer1(16), 
  1249 ;;  val             4    8[BANK1 ] unsigned long 
  1250 ;;  tmpval          4    4[BANK1 ] struct .
  1251 ;;  fval            3   18[BANK1 ] struct .
  1252 ;;  prec            2   21[BANK1 ] int 
  1253 ;;  width           2   16[BANK1 ] int 
  1254 ;;  flag            2   14[BANK1 ] unsigned short 
  1255 ;;  exp             2   12[BANK1 ] int 
  1256 ;;  cp              2    0        PTR const unsigned char 
  1257 ;;  len             2    0        unsigned int 
  1258 ;;  c               1   24[BANK1 ] char 
  1259 ;;  ap              1    3[BANK1 ] PTR void [1]
  1260 ;;		 -> ?_sprintf(2), 
  1261 ;;  d               1    0        unsigned char 
  1262 ;; Return value:  Size  Location     Type
  1263 ;;                  2   57[BANK0 ] int 
  1264 ;; Registers used:
  1265 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1266 ;; Tracked objects:
  1267 ;;		On entry : 0/0
  1268 ;;		On exit  : 0/0
  1269 ;;		Unchanged: 0/0
  1270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1271 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1272 ;;      Locals:         0       0      25       0       0       0       0       0       0       0       0       0       
      +0       0
  1273 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1274 ;;      Totals:         0      11      25       0       0       0       0       0       0       0       0       0       
      +0       0
  1275 ;;Total ram usage:       36 bytes
  1276 ;; Hardware stack levels used:    1
  1277 ;; Hardware stack levels required when called:    3
  1278 ;; This function calls:
  1279 ;;		___awdiv
  1280 ;;		___ftadd
  1281 ;;		___ftge
  1282 ;;		___ftmul
  1283 ;;		___ftneg
  1284 ;;		___ftsub
  1285 ;;		___fttol
  1286 ;;		___lldiv
  1287 ;;		___llmod
  1288 ;;		___lltoft
  1289 ;;		___wmul
  1290 ;;		__div_to_l_
  1291 ;;		__tdiv_to_l_
  1292 ;;		_fround
  1293 ;;		_isdigit
  1294 ;;		_scale
  1295 ;; This function is called by:
  1296 ;;		_main
  1297 ;; This function uses a non-reentrant model
  1298 ;;
  1299                           
  1300                           
  1301                           ;psect for function _sprintf
  1302  007E                     _sprintf:	
  1303                           
  1304                           ;incstack = 0
  1305                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1306                           ;sprintf@sp stored from wreg
  1307  007E  0021               	movlb	1	; select bank1
  1308  007F  00B7               	movwf	sprintf@sp^(0+128)
  1309                           
  1310                           ;doprnt.c: 494: va_list ap;
  1311                           ;doprnt.c: 499: signed char c;
  1312                           ;doprnt.c: 501: int width;
  1313                           ;doprnt.c: 504: int prec;
  1314                           ;doprnt.c: 508: unsigned short flag;
  1315                           ;doprnt.c: 515: char d;
  1316                           ;doprnt.c: 516: double fval;
  1317                           ;doprnt.c: 517: int exp;
  1318                           ;doprnt.c: 523: union {
  1319                           ;doprnt.c: 524: unsigned long vd;
  1320                           ;doprnt.c: 525: double integ;
  1321                           ;doprnt.c: 526: } tmpval;
  1322                           ;doprnt.c: 528: unsigned long val;
  1323                           ;doprnt.c: 529: unsigned len;
  1324                           ;doprnt.c: 530: const char * cp;
  1325                           ;doprnt.c: 533: *ap = __va_start();
  1326  0080  305B               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  1327  0081  0020               	movlb	0	; select bank0
  1328  0082  00DE               	movwf	??_sprintf
  1329  0083  085E               	movf	??_sprintf,w
  1330  0084  0021               	movlb	1	; select bank1
  1331  0085  00A3               	movwf	sprintf@ap^(0+128)
  1332  0086                     l2854:	
  1333                           ;doprnt.c: 536: while(c = *f++) {
  1334                           
  1335  0086  0020               	movlb	0	; select bank0
  1336  0087  085A               	movf	sprintf@f+1,w
  1337  0088  00DF               	movwf	??_sprintf+1
  1338  0089  0859               	movf	sprintf@f,w
  1339  008A  00DE               	movwf	??_sprintf
  1340  008B  0AD9               	incf	sprintf@f,f
  1341  008C  1903               	skipnz
  1342  008D  0ADA               	incf	sprintf@f+1,f
  1343  008E  085E               	movf	??_sprintf,w
  1344  008F  0084               	movwf	4
  1345  0090  085F               	movf	??_sprintf+1,w
  1346  0091  0085               	movwf	5
  1347  0092  0800               	movf	0,w	;code access
  1348  0093  00E0               	movwf	??_sprintf+2
  1349  0094  0860               	movf	??_sprintf+2,w
  1350  0095  0021               	movlb	1	; select bank1
  1351  0096  00B8               	movwf	sprintf@c^(0+128)
  1352  0097  0838               	movf	sprintf@c^(0+128),w
  1353  0098  1903               	btfsc	3,2
  1354  0099  2FF8               	goto	l2856
  1355                           
  1356                           ;doprnt.c: 538: if(c != '%')
  1357  009A  3025               	movlw	37
  1358  009B  0638               	xorwf	sprintf@c^(0+128),w
  1359  009C  1903               	btfsc	3,2
  1360  009D  28AE               	goto	l2544
  1361                           
  1362                           ;doprnt.c: 540: {
  1363                           ;doprnt.c: 541: ((*sp++ = (c)));
  1364  009E  0838               	movf	sprintf@c^(0+128),w
  1365  009F  0020               	movlb	0	; select bank0
  1366  00A0  00DE               	movwf	??_sprintf
  1367  00A1  0021               	movlb	1	; select bank1
  1368  00A2  0837               	movf	sprintf@sp^(0+128),w
  1369  00A3  0086               	movwf	6
  1370  00A4  0187               	clrf	7
  1371  00A5  0020               	movlb	0	; select bank0
  1372  00A6  085E               	movf	??_sprintf,w
  1373  00A7  0081               	movwf	1
  1374  00A8  3001               	movlw	1
  1375  00A9  00DE               	movwf	??_sprintf
  1376  00AA  085E               	movf	??_sprintf,w
  1377  00AB  0021               	movlb	1	; select bank1
  1378  00AC  07B7               	addwf	sprintf@sp^(0+128),f
  1379                           
  1380                           ;doprnt.c: 542: continue;
  1381  00AD  2886               	goto	l2854
  1382  00AE                     l2544:	
  1383                           
  1384                           ;doprnt.c: 543: }
  1385                           ;doprnt.c: 546: width = 0;
  1386  00AE  01B0               	clrf	sprintf@width^(0+128)
  1387  00AF  01B1               	clrf	(sprintf@width+1)^(0+128)
  1388                           
  1389                           ;doprnt.c: 548: flag = 0;
  1390  00B0  01AE               	clrf	sprintf@flag^(0+128)
  1391  00B1  01AF               	clrf	(sprintf@flag+1)^(0+128)
  1392                           
  1393                           ;doprnt.c: 551: switch(*f) {
  1394                           
  1395                           ;doprnt.c: 550: for(;;) {
  1396  00B2  28BA               	goto	l2550
  1397  00B3                     l114:	
  1398                           ;doprnt.c: 579: case '0':
  1399                           
  1400                           
  1401                           ;doprnt.c: 580: flag |= 0x04;
  1402  00B3  0021               	movlb	1	; select bank1
  1403  00B4  152E               	bsf	sprintf@flag^(0+128),2
  1404                           
  1405                           ;doprnt.c: 581: f++;
  1406  00B5  3001               	movlw	1
  1407  00B6  0020               	movlb	0	; select bank0
  1408  00B7  07D9               	addwf	sprintf@f,f
  1409  00B8  3000               	movlw	0
  1410  00B9  3DDA               	addwfc	sprintf@f+1,f
  1411  00BA                     l2550:	
  1412                           ;doprnt.c: 584: }
  1413                           
  1414                           ;doprnt.c: 582: continue;
  1415                           
  1416  00BA  0020               	movlb	0	; select bank0
  1417  00BB  0859               	movf	sprintf@f,w
  1418  00BC  0084               	movwf	4
  1419  00BD  085A               	movf	sprintf@f+1,w
  1420  00BE  0085               	movwf	5
  1421  00BF  0800               	movf	0,w	;code access
  1422                           
  1423                           ; Switch size 1, requested type "space"
  1424                           ; Number of cases is 1, Range of values is 48 to 48
  1425                           ; switch strategies available:
  1426                           ; Name         Instructions Cycles
  1427                           ; simple_byte            4     3 (average)
  1428                           ; direct_byte           11     9 (fixed)
  1429                           ; jumptable            263     9 (fixed)
  1430                           ;	Chosen strategy is simple_byte
  1431  00C0  3A30               	xorlw	48	; case 48
  1432  00C1  1903               	skipnz
  1433  00C2  28B3               	goto	l114
  1434  00C3  28C4               	goto	l2552
  1435  00C4                     l2552:	
  1436                           ;doprnt.c: 586: }
  1437                           
  1438                           ;doprnt.c: 585: break;
  1439                           
  1440                           
  1441                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1442  00C4  0859               	movf	sprintf@f,w
  1443  00C5  0084               	movwf	4
  1444  00C6  085A               	movf	sprintf@f+1,w
  1445  00C7  0085               	movwf	5
  1446  00C8  0800               	movf	0,w	;code access
  1447  00C9  3180  200C  3180   	fcall	_isdigit
  1448  00CC  1C03               	btfss	3,0
  1449  00CD  290B               	goto	l2564
  1450                           
  1451                           ;doprnt.c: 598: width = 0;
  1452  00CE  0021               	movlb	1	; select bank1
  1453  00CF  01B0               	clrf	sprintf@width^(0+128)
  1454  00D0  01B1               	clrf	(sprintf@width+1)^(0+128)
  1455  00D1                     l2556:	
  1456                           ;doprnt.c: 599: do {
  1457                           
  1458                           
  1459                           ;doprnt.c: 600: width *= 10;
  1460  00D1  300A               	movlw	10
  1461  00D2  0020               	movlb	0	; select bank0
  1462  00D3  00A4               	movwf	___wmul@multiplier
  1463  00D4  3000               	movlw	0
  1464  00D5  00A5               	movwf	___wmul@multiplier+1
  1465  00D6  0021               	movlb	1	; select bank1
  1466  00D7  0831               	movf	(sprintf@width+1)^(0+128),w
  1467  00D8  0020               	movlb	0	; select bank0
  1468  00D9  00A7               	movwf	___wmul@multiplicand+1
  1469  00DA  0021               	movlb	1	; select bank1
  1470  00DB  0830               	movf	sprintf@width^(0+128),w
  1471  00DC  0020               	movlb	0	; select bank0
  1472  00DD  00A6               	movwf	___wmul@multiplicand
  1473  00DE  3192  22A5  3180   	fcall	___wmul
  1474  00E1  0020               	movlb	0	; select bank0
  1475  00E2  0825               	movf	?___wmul+1,w
  1476  00E3  0021               	movlb	1	; select bank1
  1477  00E4  00B1               	movwf	(sprintf@width+1)^(0+128)
  1478  00E5  0020               	movlb	0	; select bank0
  1479  00E6  0824               	movf	?___wmul,w
  1480  00E7  0021               	movlb	1	; select bank1
  1481  00E8  00B0               	movwf	sprintf@width^(0+128)
  1482                           
  1483                           ;doprnt.c: 601: width += *f++ - '0';
  1484  00E9  0020               	movlb	0	; select bank0
  1485  00EA  0859               	movf	sprintf@f,w
  1486  00EB  0084               	movwf	4
  1487  00EC  085A               	movf	sprintf@f+1,w
  1488  00ED  0085               	movwf	5
  1489  00EE  0800               	movf	0,w	;code access
  1490  00EF  3ED0               	addlw	208
  1491  00F0  00DE               	movwf	??_sprintf
  1492  00F1  30FF               	movlw	255
  1493  00F2  1803               	skipnc
  1494  00F3  3000               	movlw	0
  1495  00F4  00DF               	movwf	??_sprintf+1
  1496  00F5  085E               	movf	??_sprintf,w
  1497  00F6  0021               	movlb	1	; select bank1
  1498  00F7  07B0               	addwf	sprintf@width^(0+128),f
  1499  00F8  0020               	movlb	0	; select bank0
  1500  00F9  085F               	movf	??_sprintf+1,w
  1501  00FA  0021               	movlb	1	; select bank1
  1502  00FB  3DB1               	addwfc	(sprintf@width+1)^(0+128),f
  1503  00FC  3001               	movlw	1
  1504  00FD  0020               	movlb	0	; select bank0
  1505  00FE  07D9               	addwf	sprintf@f,f
  1506  00FF  3000               	movlw	0
  1507  0100  3DDA               	addwfc	sprintf@f+1,f
  1508                           
  1509                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1510  0101  0859               	movf	sprintf@f,w
  1511  0102  0084               	movwf	4
  1512  0103  085A               	movf	sprintf@f+1,w
  1513  0104  0085               	movwf	5
  1514  0105  0800               	movf	0,w	;code access
  1515  0106  3180  200C  3180   	fcall	_isdigit
  1516  0109  1803               	btfsc	3,0
  1517  010A  28D1               	goto	l2556
  1518  010B                     l2564:	
  1519                           
  1520                           ;doprnt.c: 608: }
  1521                           ;doprnt.c: 611: if(*f == '.') {
  1522  010B  0020               	movlb	0	; select bank0
  1523  010C  0859               	movf	sprintf@f,w
  1524  010D  0084               	movwf	4
  1525  010E  085A               	movf	sprintf@f+1,w
  1526  010F  0085               	movwf	5
  1527  0110  0012               	moviw fsr0++
  1528  0111  3A2E               	xorlw	46
  1529  0112  1D03               	btfss	3,2
  1530  0113  2956               	goto	l2578
  1531                           
  1532                           ;doprnt.c: 612: flag |= 0x4000;
  1533  0114  0021               	movlb	1	; select bank1
  1534  0115  172F               	bsf	(sprintf@flag^(0+128)+1),6
  1535                           
  1536                           ;doprnt.c: 613: f++;
  1537  0116  3001               	movlw	1
  1538  0117  0020               	movlb	0	; select bank0
  1539  0118  07D9               	addwf	sprintf@f,f
  1540  0119  3000               	movlw	0
  1541  011A  3DDA               	addwfc	sprintf@f+1,f
  1542                           
  1543                           ;doprnt.c: 620: {
  1544                           ;doprnt.c: 621: prec = 0;
  1545  011B  0021               	movlb	1	; select bank1
  1546  011C  01B5               	clrf	sprintf@prec^(0+128)
  1547  011D  01B6               	clrf	(sprintf@prec+1)^(0+128)
  1548  011E                     l2576:	
  1549                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1550                           
  1551  011E  0020               	movlb	0	; select bank0
  1552  011F  0859               	movf	sprintf@f,w
  1553  0120  0084               	movwf	4
  1554  0121  085A               	movf	sprintf@f+1,w
  1555  0122  0085               	movwf	5
  1556  0123  0800               	movf	0,w	;code access
  1557  0124  3180  200C  3180   	fcall	_isdigit
  1558  0127  1C03               	btfss	3,0
  1559  0128  295D               	goto	l2584
  1560                           
  1561                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1562  0129  0020               	movlb	0	; select bank0
  1563  012A  0859               	movf	sprintf@f,w
  1564  012B  0084               	movwf	4
  1565  012C  085A               	movf	sprintf@f+1,w
  1566  012D  0085               	movwf	5
  1567  012E  0800               	movf	0,w	;code access
  1568  012F  00DE               	movwf	??_sprintf
  1569  0130  01DF               	clrf	??_sprintf+1
  1570  0131  0021               	movlb	1	; select bank1
  1571  0132  0836               	movf	(sprintf@prec+1)^(0+128),w
  1572  0133  0020               	movlb	0	; select bank0
  1573  0134  00A5               	movwf	___wmul@multiplier+1
  1574  0135  0021               	movlb	1	; select bank1
  1575  0136  0835               	movf	sprintf@prec^(0+128),w
  1576  0137  0020               	movlb	0	; select bank0
  1577  0138  00A4               	movwf	___wmul@multiplier
  1578  0139  300A               	movlw	10
  1579  013A  00A6               	movwf	___wmul@multiplicand
  1580  013B  3000               	movlw	0
  1581  013C  00A7               	movwf	___wmul@multiplicand+1
  1582  013D  3192  22A5  3180   	fcall	___wmul
  1583  0140  0020               	movlb	0	; select bank0
  1584  0141  085E               	movf	??_sprintf,w
  1585  0142  0724               	addwf	?___wmul,w
  1586  0143  00E0               	movwf	??_sprintf+2
  1587  0144  085F               	movf	??_sprintf+1,w
  1588  0145  3D25               	addwfc	?___wmul+1,w
  1589  0146  00E1               	movwf	??_sprintf+3
  1590  0147  0860               	movf	??_sprintf+2,w
  1591  0148  3ED0               	addlw	208
  1592  0149  0021               	movlb	1	; select bank1
  1593  014A  00B5               	movwf	sprintf@prec^(0+128)
  1594  014B  30FF               	movlw	255
  1595  014C  0020               	movlb	0	; select bank0
  1596  014D  3D61               	addwfc	??_sprintf+3,w
  1597  014E  0021               	movlb	1	; select bank1
  1598  014F  00B6               	movwf	(sprintf@prec+1)^(0+128)
  1599  0150  3001               	movlw	1
  1600  0151  0020               	movlb	0	; select bank0
  1601  0152  07D9               	addwf	sprintf@f,f
  1602  0153  3000               	movlw	0
  1603  0154  3DDA               	addwfc	sprintf@f+1,f
  1604  0155  291E               	goto	l2576
  1605  0156                     l2578:	
  1606                           ;doprnt.c: 624: }
  1607                           ;doprnt.c: 625: } else {
  1608                           
  1609                           
  1610                           ;doprnt.c: 626: prec = 0;
  1611  0156  0021               	movlb	1	; select bank1
  1612  0157  01B5               	clrf	sprintf@prec^(0+128)
  1613  0158  01B6               	clrf	(sprintf@prec+1)^(0+128)
  1614                           
  1615                           ;doprnt.c: 628: flag |= 0x1000;
  1616  0159  162F               	bsf	(sprintf@flag^(0+128)+1),4
  1617                           
  1618                           ;doprnt.c: 630: }
  1619                           ;doprnt.c: 635: switch(c = *f++) {
  1620  015A  295D               	goto	l2584
  1621  015B                     l129:	
  1622                           ;doprnt.c: 662: case 'f':
  1623                           
  1624                           ;doprnt.c: 638: goto alldone;
  1625                           
  1626                           ;doprnt.c: 637: case 0:
  1627                           
  1628                           
  1629                           ;doprnt.c: 663: flag |= 0x400;
  1630  015B  152F               	bsf	(sprintf@flag^(0+128)+1),2
  1631                           
  1632                           ;doprnt.c: 698: case 'i':
  1633                           ;doprnt.c: 699: break;
  1634                           
  1635                           ;doprnt.c: 697: case 'd':
  1636                           
  1637                           ;doprnt.c: 664: break;
  1638  015C  2979               	goto	l2586
  1639  015D                     l2584:	
  1640                           ;doprnt.c: 822: }
  1641                           
  1642                           ;doprnt.c: 813: continue;
  1643                           
  1644                           ;doprnt.c: 802: default:
  1645                           
  1646  015D  0020               	movlb	0	; select bank0
  1647  015E  085A               	movf	sprintf@f+1,w
  1648  015F  00DF               	movwf	??_sprintf+1
  1649  0160  0859               	movf	sprintf@f,w
  1650  0161  00DE               	movwf	??_sprintf
  1651  0162  0AD9               	incf	sprintf@f,f
  1652  0163  1903               	skipnz
  1653  0164  0ADA               	incf	sprintf@f+1,f
  1654  0165  085E               	movf	??_sprintf,w
  1655  0166  0084               	movwf	4
  1656  0167  085F               	movf	??_sprintf+1,w
  1657  0168  0085               	movwf	5
  1658  0169  0800               	movf	0,w	;code access
  1659  016A  0021               	movlb	1	; select bank1
  1660  016B  00B8               	movwf	sprintf@c^(0+128)
  1661                           
  1662                           ; Switch size 1, requested type "space"
  1663                           ; Number of cases is 4, Range of values is 0 to 105
  1664                           ; switch strategies available:
  1665                           ; Name         Instructions Cycles
  1666                           ; simple_byte           13     7 (average)
  1667                           ; direct_byte          218     6 (fixed)
  1668                           ; jumptable            260     6 (fixed)
  1669                           ;	Chosen strategy is simple_byte
  1670  016C  3A00               	xorlw	0	; case 0
  1671  016D  1903               	skipnz
  1672  016E  2FF8               	goto	l2856
  1673  016F  3A64               	xorlw	100	; case 100
  1674  0170  1903               	skipnz
  1675  0171  2979               	goto	l2586
  1676  0172  3A02               	xorlw	2	; case 102
  1677  0173  1903               	skipnz
  1678  0174  295B               	goto	l129
  1679  0175  3A0F               	xorlw	15	; case 105
  1680  0176  1903               	skipnz
  1681  0177  2979               	goto	l2586
  1682  0178  2886               	goto	l2854
  1683  0179                     l2586:	
  1684                           
  1685                           ;doprnt.c: 825: if(flag & (0x700)) {
  1686  0179  3000               	movlw	0
  1687  017A  052E               	andwf	sprintf@flag^(0+128),w
  1688  017B  0020               	movlb	0	; select bank0
  1689  017C  00DE               	movwf	??_sprintf
  1690  017D  3007               	movlw	7
  1691  017E  0021               	movlb	1	; select bank1
  1692  017F  052F               	andwf	(sprintf@flag+1)^(0+128),w
  1693  0180  0020               	movlb	0	; select bank0
  1694  0181  00DF               	movwf	??_sprintf+1
  1695  0182  085E               	movf	??_sprintf,w
  1696  0183  045F               	iorwf	??_sprintf+1,w
  1697  0184  1903               	btfsc	3,2
  1698  0185  2E37               	goto	l2762
  1699                           
  1700                           ;doprnt.c: 827: if(flag & 0x1000)
  1701  0186  0021               	movlb	1	; select bank1
  1702  0187  1E2F               	btfss	(sprintf@flag+1)^(0+128),4
  1703  0188  298D               	goto	l2592
  1704                           
  1705                           ;doprnt.c: 829: prec = 6;
  1706  0189  3006               	movlw	6
  1707  018A  00B5               	movwf	sprintf@prec^(0+128)
  1708  018B  3000               	movlw	0
  1709  018C  00B6               	movwf	(sprintf@prec^(0+128)+1)
  1710  018D                     l2592:	
  1711                           
  1712                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1713  018D  0823               	movf	sprintf@ap^(0+128),w
  1714  018E  0086               	movwf	6
  1715  018F  0187               	clrf	7
  1716  0190  3F40               	moviw [0]fsr1
  1717  0191  00B2               	movwf	sprintf@fval^(0+128)
  1718  0192  3F41               	moviw [1]fsr1
  1719  0193  00B3               	movwf	(sprintf@fval+1)^(0+128)
  1720  0194  3F42               	moviw [2]fsr1
  1721  0195  00B4               	movwf	(sprintf@fval+2)^(0+128)
  1722  0196  3003               	movlw	3
  1723  0197  0020               	movlb	0	; select bank0
  1724  0198  00DE               	movwf	??_sprintf
  1725  0199  085E               	movf	??_sprintf,w
  1726  019A  0021               	movlb	1	; select bank1
  1727  019B  07A3               	addwf	sprintf@ap^(0+128),f
  1728                           
  1729                           ;doprnt.c: 831: if(fval < 0.0) {
  1730  019C  0832               	movf	sprintf@fval^(0+128),w
  1731  019D  00F0               	movwf	___ftge@ff1
  1732  019E  0833               	movf	(sprintf@fval+1)^(0+128),w
  1733  019F  00F1               	movwf	___ftge@ff1+1
  1734  01A0  0834               	movf	(sprintf@fval+2)^(0+128),w
  1735  01A1  00F2               	movwf	___ftge@ff1+2
  1736  01A2  3000               	movlw	0
  1737  01A3  00F3               	movwf	___ftge@ff2
  1738  01A4  3000               	movlw	0
  1739  01A5  00F4               	movwf	___ftge@ff2+1
  1740  01A6  3000               	movlw	0
  1741  01A7  00F5               	movwf	___ftge@ff2+2
  1742  01A8  3193  235C  3180   	fcall	___ftge
  1743  01AB  1803               	btfsc	3,0
  1744  01AC  29C2               	goto	l2602
  1745                           
  1746                           ;doprnt.c: 832: fval = -fval;
  1747  01AD  0021               	movlb	1	; select bank1
  1748  01AE  0832               	movf	sprintf@fval^(0+128),w
  1749  01AF  00F0               	movwf	___ftneg@f1
  1750  01B0  0833               	movf	(sprintf@fval+1)^(0+128),w
  1751  01B1  00F1               	movwf	___ftneg@f1+1
  1752  01B2  0834               	movf	(sprintf@fval+2)^(0+128),w
  1753  01B3  00F2               	movwf	___ftneg@f1+2
  1754  01B4  3180  2004  3180   	fcall	___ftneg
  1755  01B7  0870               	movf	?___ftneg,w
  1756  01B8  0021               	movlb	1	; select bank1
  1757  01B9  00B2               	movwf	sprintf@fval^(0+128)
  1758  01BA  0871               	movf	?___ftneg+1,w
  1759  01BB  00B3               	movwf	(sprintf@fval+1)^(0+128)
  1760  01BC  0872               	movf	?___ftneg+2,w
  1761  01BD  00B4               	movwf	(sprintf@fval+2)^(0+128)
  1762                           
  1763                           ;doprnt.c: 833: flag |= 0x03;
  1764  01BE  3003               	movlw	3
  1765  01BF  04AE               	iorwf	sprintf@flag^(0+128),f
  1766  01C0  3000               	movlw	0
  1767  01C1  04AF               	iorwf	(sprintf@flag+1)^(0+128),f
  1768  01C2                     l2602:	
  1769                           
  1770                           ;doprnt.c: 834: }
  1771                           ;doprnt.c: 835: exp = 0;
  1772  01C2  0021               	movlb	1	; select bank1
  1773  01C3  01AC               	clrf	sprintf@exp^(0+128)
  1774  01C4  01AD               	clrf	(sprintf@exp+1)^(0+128)
  1775                           
  1776                           ;doprnt.c: 836: if( fval!=0) {
  1777  01C5  0834               	movf	(sprintf@fval+2)^(0+128),w
  1778  01C6  0433               	iorwf	(sprintf@fval+1)^(0+128),w
  1779  01C7  0432               	iorwf	sprintf@fval^(0+128),w
  1780  01C8  1903               	skipnz
  1781  01C9  2A82               	goto	l137
  1782                           
  1783                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1784  01CA  30B2               	movlw	low (sprintf@fval| 0)
  1785  01CB  0086               	movwf	6
  1786  01CC  0187               	clrf	7
  1787  01CD  3F40               	moviw [0]fsr1
  1788  01CE  0020               	movlb	0	; select bank0
  1789  01CF  00DE               	movwf	??_sprintf
  1790  01D0  3F41               	moviw [1]fsr1
  1791  01D1  00DF               	movwf	??_sprintf+1
  1792  01D2  3F42               	moviw [2]fsr1
  1793  01D3  00E0               	movwf	??_sprintf+2
  1794  01D4  3F43               	moviw [3]fsr1
  1795  01D5  00E1               	movwf	??_sprintf+3
  1796  01D6  300F               	movlw	15
  1797  01D7                     u3765:	
  1798  01D7  36E1               	lsrf	??_sprintf+3,f
  1799  01D8  0CE0               	rrf	??_sprintf+2,f
  1800  01D9  0CDF               	rrf	??_sprintf+1,f
  1801  01DA  0CDE               	rrf	??_sprintf,f
  1802  01DB  0B89               	decfsz	9,f
  1803  01DC  29D7               	goto	u3765
  1804  01DD  30FF               	movlw	255
  1805  01DE  055E               	andwf	??_sprintf,w
  1806  01DF  00E2               	movwf	??_sprintf+4
  1807  01E0  3000               	movlw	0
  1808  01E1  055F               	andwf	??_sprintf+1,w
  1809  01E2  00E3               	movwf	??_sprintf+5
  1810  01E3  0862               	movf	??_sprintf+4,w
  1811  01E4  3E82               	addlw	130
  1812  01E5  0021               	movlb	1	; select bank1
  1813  01E6  00AC               	movwf	sprintf@exp^(0+128)
  1814  01E7  30FF               	movlw	255
  1815  01E8  0020               	movlb	0	; select bank0
  1816  01E9  3D63               	addwfc	??_sprintf+5,w
  1817  01EA  0021               	movlb	1	; select bank1
  1818  01EB  00AD               	movwf	(sprintf@exp+1)^(0+128)
  1819                           
  1820                           ;doprnt.c: 838: exp--;
  1821  01EC  30FF               	movlw	255
  1822  01ED  07AC               	addwf	sprintf@exp^(0+128),f
  1823  01EE  30FF               	movlw	255
  1824  01EF  3DAD               	addwfc	(sprintf@exp+1)^(0+128),f
  1825                           
  1826                           ;doprnt.c: 839: exp *= 3;
  1827  01F0  3003               	movlw	3
  1828  01F1  0020               	movlb	0	; select bank0
  1829  01F2  00A4               	movwf	___wmul@multiplier
  1830  01F3  3000               	movlw	0
  1831  01F4  00A5               	movwf	___wmul@multiplier+1
  1832  01F5  0021               	movlb	1	; select bank1
  1833  01F6  082D               	movf	(sprintf@exp+1)^(0+128),w
  1834  01F7  0020               	movlb	0	; select bank0
  1835  01F8  00A7               	movwf	___wmul@multiplicand+1
  1836  01F9  0021               	movlb	1	; select bank1
  1837  01FA  082C               	movf	sprintf@exp^(0+128),w
  1838  01FB  0020               	movlb	0	; select bank0
  1839  01FC  00A6               	movwf	___wmul@multiplicand
  1840  01FD  3192  22A5  3180   	fcall	___wmul
  1841  0200  0020               	movlb	0	; select bank0
  1842  0201  0825               	movf	?___wmul+1,w
  1843  0202  0021               	movlb	1	; select bank1
  1844  0203  00AD               	movwf	(sprintf@exp+1)^(0+128)
  1845  0204  0020               	movlb	0	; select bank0
  1846  0205  0824               	movf	?___wmul,w
  1847  0206  0021               	movlb	1	; select bank1
  1848  0207  00AC               	movwf	sprintf@exp^(0+128)
  1849                           
  1850                           ;doprnt.c: 840: exp /= 10;
  1851  0208  300A               	movlw	10
  1852  0209  00F7               	movwf	___awdiv@divisor
  1853  020A  3000               	movlw	0
  1854  020B  00F8               	movwf	___awdiv@divisor+1
  1855  020C  082D               	movf	(sprintf@exp+1)^(0+128),w
  1856  020D  00FA               	movwf	___awdiv@dividend+1
  1857  020E  082C               	movf	sprintf@exp^(0+128),w
  1858  020F  00F9               	movwf	___awdiv@dividend
  1859  0210  3194  2471  3180   	fcall	___awdiv
  1860  0213  0878               	movf	?___awdiv+1,w
  1861  0214  0021               	movlb	1	; select bank1
  1862  0215  00AD               	movwf	(sprintf@exp+1)^(0+128)
  1863  0216  0877               	movf	?___awdiv,w
  1864  0217  00AC               	movwf	sprintf@exp^(0+128)
  1865                           
  1866                           ;doprnt.c: 841: if(exp < 0)
  1867  0218  1FAD               	btfss	(sprintf@exp+1)^(0+128),7
  1868  0219  2A1E               	goto	l2618
  1869                           
  1870                           ;doprnt.c: 842: exp--;
  1871  021A  30FF               	movlw	255
  1872  021B  07AC               	addwf	sprintf@exp^(0+128),f
  1873  021C  30FF               	movlw	255
  1874  021D  3DAD               	addwfc	(sprintf@exp+1)^(0+128),f
  1875  021E                     l2618:	
  1876                           
  1877                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1878  021E  032C               	decf	sprintf@exp^(0+128),w
  1879  021F  3AFF               	xorlw	255
  1880  0220  318D  25BC  3180   	fcall	_scale
  1881  0223  0020               	movlb	0	; select bank0
  1882  0224  0838               	movf	?_scale,w
  1883  0225  0021               	movlb	1	; select bank1
  1884  0226  00A4               	movwf	sprintf@tmpval^(0+128)
  1885  0227  0020               	movlb	0	; select bank0
  1886  0228  0839               	movf	?_scale+1,w
  1887  0229  0021               	movlb	1	; select bank1
  1888  022A  00A5               	movwf	(sprintf@tmpval+1)^(0+128)
  1889  022B  0020               	movlb	0	; select bank0
  1890  022C  083A               	movf	?_scale+2,w
  1891  022D  0021               	movlb	1	; select bank1
  1892  022E  00A6               	movwf	(sprintf@tmpval+2)^(0+128)
  1893                           
  1894                           ;doprnt.c: 847: tmpval.integ *= fval;
  1895  022F  0832               	movf	sprintf@fval^(0+128),w
  1896  0230  0020               	movlb	0	; select bank0
  1897  0231  00A8               	movwf	___ftmul@f1
  1898  0232  0021               	movlb	1	; select bank1
  1899  0233  0833               	movf	(sprintf@fval+1)^(0+128),w
  1900  0234  0020               	movlb	0	; select bank0
  1901  0235  00A9               	movwf	___ftmul@f1+1
  1902  0236  0021               	movlb	1	; select bank1
  1903  0237  0834               	movf	(sprintf@fval+2)^(0+128),w
  1904  0238  0020               	movlb	0	; select bank0
  1905  0239  00AA               	movwf	___ftmul@f1+2
  1906  023A  0021               	movlb	1	; select bank1
  1907  023B  0824               	movf	sprintf@tmpval^(0+128),w
  1908  023C  0020               	movlb	0	; select bank0
  1909  023D  00AB               	movwf	___ftmul@f2
  1910  023E  0021               	movlb	1	; select bank1
  1911  023F  0825               	movf	(sprintf@tmpval+1)^(0+128),w
  1912  0240  0020               	movlb	0	; select bank0
  1913  0241  00AC               	movwf	___ftmul@f2+1
  1914  0242  0021               	movlb	1	; select bank1
  1915  0243  0826               	movf	(sprintf@tmpval+2)^(0+128),w
  1916  0244  0020               	movlb	0	; select bank0
  1917  0245  00AD               	movwf	___ftmul@f2+2
  1918  0246  3197  274C  3180   	fcall	___ftmul
  1919  0249  0020               	movlb	0	; select bank0
  1920  024A  0828               	movf	?___ftmul,w
  1921  024B  0021               	movlb	1	; select bank1
  1922  024C  00A4               	movwf	sprintf@tmpval^(0+128)
  1923  024D  0020               	movlb	0	; select bank0
  1924  024E  0829               	movf	?___ftmul+1,w
  1925  024F  0021               	movlb	1	; select bank1
  1926  0250  00A5               	movwf	(sprintf@tmpval+1)^(0+128)
  1927  0251  0020               	movlb	0	; select bank0
  1928  0252  082A               	movf	?___ftmul+2,w
  1929  0253  0021               	movlb	1	; select bank1
  1930  0254  00A6               	movwf	(sprintf@tmpval+2)^(0+128)
  1931                           
  1932                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1933  0255  0824               	movf	sprintf@tmpval^(0+128),w
  1934  0256  00F0               	movwf	___ftge@ff1
  1935  0257  0825               	movf	(sprintf@tmpval+1)^(0+128),w
  1936  0258  00F1               	movwf	___ftge@ff1+1
  1937  0259  0826               	movf	(sprintf@tmpval+2)^(0+128),w
  1938  025A  00F2               	movwf	___ftge@ff1+2
  1939  025B  3000               	movlw	0
  1940  025C  00F3               	movwf	___ftge@ff2
  1941  025D  3080               	movlw	128
  1942  025E  00F4               	movwf	___ftge@ff2+1
  1943  025F  303F               	movlw	63
  1944  0260  00F5               	movwf	___ftge@ff2+2
  1945  0261  3193  235C  3180   	fcall	___ftge
  1946  0264  1803               	btfsc	3,0
  1947  0265  2A6B               	goto	l2626
  1948                           
  1949                           ;doprnt.c: 849: exp--;
  1950  0266  30FF               	movlw	255
  1951  0267  0021               	movlb	1	; select bank1
  1952  0268  07AC               	addwf	sprintf@exp^(0+128),f
  1953  0269  30FF               	movlw	255
  1954  026A  2A81               	goto	L2
  1955  026B                     l2626:	
  1956                           
  1957                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1958  026B  0021               	movlb	1	; select bank1
  1959  026C  0824               	movf	sprintf@tmpval^(0+128),w
  1960  026D  00F0               	movwf	___ftge@ff1
  1961  026E  0825               	movf	(sprintf@tmpval+1)^(0+128),w
  1962  026F  00F1               	movwf	___ftge@ff1+1
  1963  0270  0826               	movf	(sprintf@tmpval+2)^(0+128),w
  1964  0271  00F2               	movwf	___ftge@ff1+2
  1965  0272  3000               	movlw	0
  1966  0273  00F3               	movwf	___ftge@ff2
  1967  0274  3020               	movlw	32
  1968  0275  00F4               	movwf	___ftge@ff2+1
  1969  0276  3041               	movlw	65
  1970  0277  00F5               	movwf	___ftge@ff2+2
  1971  0278  3193  235C  3180   	fcall	___ftge
  1972  027B  1C03               	btfss	3,0
  1973  027C  2A82               	goto	l137
  1974                           
  1975                           ;doprnt.c: 851: exp++;
  1976  027D  3001               	movlw	1
  1977  027E  0021               	movlb	1	; select bank1
  1978  027F  07AC               	addwf	sprintf@exp^(0+128),f
  1979  0280  3000               	movlw	0
  1980  0281                     L2:	
  1981  0281  3DAD               	addwfc	(sprintf@exp+1)^(0+128),f
  1982  0282                     l137:	
  1983                           
  1984                           ;doprnt.c: 852: }
  1985                           ;doprnt.c: 1112: if(prec <= 12)
  1986  0282  0021               	movlb	1	; select bank1
  1987  0283  0836               	movf	(sprintf@prec+1)^(0+128),w
  1988  0284  3A80               	xorlw	128
  1989  0285  0020               	movlb	0	; select bank0
  1990  0286  00DE               	movwf	??_sprintf
  1991  0287  3080               	movlw	128
  1992  0288  025E               	subwf	??_sprintf,w
  1993  0289  1D03               	skipz
  1994  028A  2A8E               	goto	u3805
  1995  028B  300D               	movlw	13
  1996  028C  0021               	movlb	1	; select bank1
  1997  028D  0235               	subwf	sprintf@prec^(0+128),w
  1998  028E                     u3805:	
  1999  028E  1803               	skipnc
  2000  028F  2AB7               	goto	l2632
  2001                           
  2002                           ;doprnt.c: 1113: fval += fround(prec);
  2003  0290  0021               	movlb	1	; select bank1
  2004  0291  0835               	movf	sprintf@prec^(0+128),w
  2005  0292  318C  2457  3180   	fcall	_fround
  2006  0295  0020               	movlb	0	; select bank0
  2007  0296  0838               	movf	?_fround,w
  2008  0297  00C6               	movwf	___ftadd@f1
  2009  0298  0839               	movf	?_fround+1,w
  2010  0299  00C7               	movwf	___ftadd@f1+1
  2011  029A  083A               	movf	?_fround+2,w
  2012  029B  00C8               	movwf	___ftadd@f1+2
  2013  029C  0021               	movlb	1	; select bank1
  2014  029D  0832               	movf	sprintf@fval^(0+128),w
  2015  029E  0020               	movlb	0	; select bank0
  2016  029F  00C9               	movwf	___ftadd@f2
  2017  02A0  0021               	movlb	1	; select bank1
  2018  02A1  0833               	movf	(sprintf@fval+1)^(0+128),w
  2019  02A2  0020               	movlb	0	; select bank0
  2020  02A3  00CA               	movwf	___ftadd@f2+1
  2021  02A4  0021               	movlb	1	; select bank1
  2022  02A5  0834               	movf	(sprintf@fval+2)^(0+128),w
  2023  02A6  0020               	movlb	0	; select bank0
  2024  02A7  00CB               	movwf	___ftadd@f2+2
  2025  02A8  3189  213F  3180   	fcall	___ftadd
  2026  02AB  0020               	movlb	0	; select bank0
  2027  02AC  0846               	movf	?___ftadd,w
  2028  02AD  0021               	movlb	1	; select bank1
  2029  02AE  00B2               	movwf	sprintf@fval^(0+128)
  2030  02AF  0020               	movlb	0	; select bank0
  2031  02B0  0847               	movf	?___ftadd+1,w
  2032  02B1  0021               	movlb	1	; select bank1
  2033  02B2  00B3               	movwf	(sprintf@fval+1)^(0+128)
  2034  02B3  0020               	movlb	0	; select bank0
  2035  02B4  0848               	movf	?___ftadd+2,w
  2036  02B5  0021               	movlb	1	; select bank1
  2037  02B6  00B4               	movwf	(sprintf@fval+2)^(0+128)
  2038  02B7                     l2632:	
  2039                           
  2040                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2041  02B7  0021               	movlb	1	; select bank1
  2042  02B8  082D               	movf	(sprintf@exp+1)^(0+128),w
  2043  02B9  3A80               	xorlw	128
  2044  02BA  0020               	movlb	0	; select bank0
  2045  02BB  00DE               	movwf	??_sprintf
  2046  02BC  3080               	movlw	128
  2047  02BD  025E               	subwf	??_sprintf,w
  2048  02BE  1D03               	skipz
  2049  02BF  2AC3               	goto	u3815
  2050  02C0  300A               	movlw	10
  2051  02C1  0021               	movlb	1	; select bank1
  2052  02C2  022C               	subwf	sprintf@exp^(0+128),w
  2053  02C3                     u3815:	
  2054  02C3  1803               	skipnc
  2055  02C4  2AEE               	goto	l2640
  2056  02C5  0021               	movlb	1	; select bank1
  2057  02C6  0834               	movf	(sprintf@fval+2)^(0+128),w
  2058  02C7  0433               	iorwf	(sprintf@fval+1)^(0+128),w
  2059  02C8  0432               	iorwf	sprintf@fval^(0+128),w
  2060  02C9  1903               	skipnz
  2061  02CA  2B36               	goto	l2654
  2062  02CB  0832               	movf	sprintf@fval^(0+128),w
  2063  02CC  0020               	movlb	0	; select bank0
  2064  02CD  00C1               	movwf	___fttol@f1
  2065  02CE  0021               	movlb	1	; select bank1
  2066  02CF  0833               	movf	(sprintf@fval+1)^(0+128),w
  2067  02D0  0020               	movlb	0	; select bank0
  2068  02D1  00C2               	movwf	___fttol@f1+1
  2069  02D2  0021               	movlb	1	; select bank1
  2070  02D3  0834               	movf	(sprintf@fval+2)^(0+128),w
  2071  02D4  0020               	movlb	0	; select bank0
  2072  02D5  00C3               	movwf	___fttol@f1+2
  2073  02D6  3188  2002  3180   	fcall	___fttol
  2074  02D9  0020               	movlb	0	; select bank0
  2075  02DA  0844               	movf	?___fttol+3,w
  2076  02DB  0443               	iorwf	?___fttol+2,w
  2077  02DC  0442               	iorwf	?___fttol+1,w
  2078  02DD  0441               	iorwf	?___fttol,w
  2079  02DE  1D03               	skipz
  2080  02DF  2B36               	goto	l2654
  2081  02E0  0021               	movlb	1	; select bank1
  2082  02E1  082D               	movf	(sprintf@exp+1)^(0+128),w
  2083  02E2  3A80               	xorlw	128
  2084  02E3  0020               	movlb	0	; select bank0
  2085  02E4  00DE               	movwf	??_sprintf
  2086  02E5  3080               	movlw	128
  2087  02E6  025E               	subwf	??_sprintf,w
  2088  02E7  1D03               	skipz
  2089  02E8  2AEC               	goto	u3845
  2090  02E9  3002               	movlw	2
  2091  02EA  0021               	movlb	1	; select bank1
  2092  02EB  022C               	subwf	sprintf@exp^(0+128),w
  2093  02EC                     u3845:	
  2094  02EC  1C03               	skipc
  2095  02ED  2B36               	goto	l2654
  2096  02EE                     l2640:	
  2097                           
  2098                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2099  02EE  0021               	movlb	1	; select bank1
  2100  02EF  0824               	movf	sprintf@tmpval^(0+128),w
  2101  02F0  00F0               	movwf	___ftge@ff1
  2102  02F1  0825               	movf	(sprintf@tmpval+1)^(0+128),w
  2103  02F2  00F1               	movwf	___ftge@ff1+1
  2104  02F3  0826               	movf	(sprintf@tmpval+2)^(0+128),w
  2105  02F4  00F2               	movwf	___ftge@ff1+2
  2106  02F5  3070               	movlw	112
  2107  02F6  00F3               	movwf	___ftge@ff2
  2108  02F7  3089               	movlw	137
  2109  02F8  00F4               	movwf	___ftge@ff2+1
  2110  02F9  3040               	movlw	64
  2111  02FA  00F5               	movwf	___ftge@ff2+2
  2112  02FB  3193  235C  3180   	fcall	___ftge
  2113  02FE  1803               	btfsc	3,0
  2114  02FF  2B02               	goto	l2644
  2115                           
  2116                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2117  0300  30F7               	movlw	247
  2118  0301  2B03               	goto	L3
  2119  0302                     l2644:	
  2120                           ;doprnt.c: 1122: }else{
  2121                           
  2122                           
  2123                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2124  0302  30F8               	movlw	248
  2125  0303                     L3:	
  2126  0303  0021               	movlb	1	; select bank1
  2127  0304  07AC               	addwf	sprintf@exp^(0+128),f
  2128  0305  30FF               	movlw	255
  2129  0306  3DAD               	addwfc	(sprintf@exp+1)^(0+128),f
  2130                           
  2131                           ;doprnt.c: 1124: }
  2132                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2133  0307  082C               	movf	sprintf@exp^(0+128),w
  2134  0308  318D  25BC  3180   	fcall	_scale
  2135  030B  0020               	movlb	0	; select bank0
  2136  030C  0838               	movf	?_scale,w
  2137  030D  0021               	movlb	1	; select bank1
  2138  030E  00A4               	movwf	sprintf@tmpval^(0+128)
  2139  030F  0020               	movlb	0	; select bank0
  2140  0310  0839               	movf	?_scale+1,w
  2141  0311  0021               	movlb	1	; select bank1
  2142  0312  00A5               	movwf	(sprintf@tmpval+1)^(0+128)
  2143  0313  0020               	movlb	0	; select bank0
  2144  0314  083A               	movf	?_scale+2,w
  2145  0315  0021               	movlb	1	; select bank1
  2146  0316  00A6               	movwf	(sprintf@tmpval+2)^(0+128)
  2147                           
  2148                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2149  0317  0832               	movf	sprintf@fval^(0+128),w
  2150  0318  00F0               	movwf	__tdiv_to_l_@f1
  2151  0319  0833               	movf	(sprintf@fval+1)^(0+128),w
  2152  031A  00F1               	movwf	__tdiv_to_l_@f1+1
  2153  031B  0834               	movf	(sprintf@fval+2)^(0+128),w
  2154  031C  00F2               	movwf	__tdiv_to_l_@f1+2
  2155  031D  0824               	movf	sprintf@tmpval^(0+128),w
  2156  031E  00F3               	movwf	__tdiv_to_l_@f2
  2157  031F  0825               	movf	(sprintf@tmpval+1)^(0+128),w
  2158  0320  00F4               	movwf	__tdiv_to_l_@f2+1
  2159  0321  0826               	movf	(sprintf@tmpval+2)^(0+128),w
  2160  0322  00F5               	movwf	__tdiv_to_l_@f2+2
  2161  0323  3188  2089  3180   	fcall	__tdiv_to_l_
  2162  0326  0873               	movf	?__tdiv_to_l_+3,w
  2163  0327  0021               	movlb	1	; select bank1
  2164  0328  00AB               	movwf	(sprintf@val+3)^(0+128)
  2165  0329  0872               	movf	?__tdiv_to_l_+2,w
  2166  032A  00AA               	movwf	(sprintf@val+2)^(0+128)
  2167  032B  0871               	movf	?__tdiv_to_l_+1,w
  2168  032C  00A9               	movwf	(sprintf@val+1)^(0+128)
  2169  032D  0870               	movf	?__tdiv_to_l_,w
  2170  032E  00A8               	movwf	sprintf@val^(0+128)
  2171                           
  2172                           ;doprnt.c: 1129: fval = 0.0;
  2173  032F  3000               	movlw	0
  2174  0330  00B2               	movwf	sprintf@fval^(0+128)
  2175  0331  3000               	movlw	0
  2176  0332  00B3               	movwf	(sprintf@fval+1)^(0+128)
  2177  0333  3000               	movlw	0
  2178  0334  00B4               	movwf	(sprintf@fval+2)^(0+128)
  2179                           
  2180                           ;doprnt.c: 1130: } else {
  2181  0335  2B84               	goto	l2658
  2182  0336                     l2654:	
  2183                           
  2184                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2185  0336  0021               	movlb	1	; select bank1
  2186  0337  0832               	movf	sprintf@fval^(0+128),w
  2187  0338  0020               	movlb	0	; select bank0
  2188  0339  00C1               	movwf	___fttol@f1
  2189  033A  0021               	movlb	1	; select bank1
  2190  033B  0833               	movf	(sprintf@fval+1)^(0+128),w
  2191  033C  0020               	movlb	0	; select bank0
  2192  033D  00C2               	movwf	___fttol@f1+1
  2193  033E  0021               	movlb	1	; select bank1
  2194  033F  0834               	movf	(sprintf@fval+2)^(0+128),w
  2195  0340  0020               	movlb	0	; select bank0
  2196  0341  00C3               	movwf	___fttol@f1+2
  2197  0342  3188  2002  3180   	fcall	___fttol
  2198  0345  0020               	movlb	0	; select bank0
  2199  0346  0844               	movf	?___fttol+3,w
  2200  0347  0021               	movlb	1	; select bank1
  2201  0348  00AB               	movwf	(sprintf@val+3)^(0+128)
  2202  0349  0020               	movlb	0	; select bank0
  2203  034A  0843               	movf	?___fttol+2,w
  2204  034B  0021               	movlb	1	; select bank1
  2205  034C  00AA               	movwf	(sprintf@val+2)^(0+128)
  2206  034D  0020               	movlb	0	; select bank0
  2207  034E  0842               	movf	?___fttol+1,w
  2208  034F  0021               	movlb	1	; select bank1
  2209  0350  00A9               	movwf	(sprintf@val+1)^(0+128)
  2210  0351  0020               	movlb	0	; select bank0
  2211  0352  0841               	movf	?___fttol,w
  2212  0353  0021               	movlb	1	; select bank1
  2213  0354  00A8               	movwf	sprintf@val^(0+128)
  2214                           
  2215                           ;doprnt.c: 1132: fval -= (double)val;
  2216  0355  082B               	movf	(sprintf@val+3)^(0+128),w
  2217  0356  00FB               	movwf	___lltoft@c+3
  2218  0357  082A               	movf	(sprintf@val+2)^(0+128),w
  2219  0358  00FA               	movwf	___lltoft@c+2
  2220  0359  0829               	movf	(sprintf@val+1)^(0+128),w
  2221  035A  00F9               	movwf	___lltoft@c+1
  2222  035B  0828               	movf	sprintf@val^(0+128),w
  2223  035C  00F8               	movwf	___lltoft@c
  2224  035D  3192  22FF  3180   	fcall	___lltoft
  2225  0360  0878               	movf	?___lltoft,w
  2226  0361  0020               	movlb	0	; select bank0
  2227  0362  00D3               	movwf	___ftsub@f2
  2228  0363  0879               	movf	?___lltoft+1,w
  2229  0364  00D4               	movwf	___ftsub@f2+1
  2230  0365  087A               	movf	?___lltoft+2,w
  2231  0366  00D5               	movwf	___ftsub@f2+2
  2232  0367  0021               	movlb	1	; select bank1
  2233  0368  0832               	movf	sprintf@fval^(0+128),w
  2234  0369  0020               	movlb	0	; select bank0
  2235  036A  00D6               	movwf	___ftsub@f1
  2236  036B  0021               	movlb	1	; select bank1
  2237  036C  0833               	movf	(sprintf@fval+1)^(0+128),w
  2238  036D  0020               	movlb	0	; select bank0
  2239  036E  00D7               	movwf	___ftsub@f1+1
  2240  036F  0021               	movlb	1	; select bank1
  2241  0370  0834               	movf	(sprintf@fval+2)^(0+128),w
  2242  0371  0020               	movlb	0	; select bank0
  2243  0372  00D8               	movwf	___ftsub@f1+2
  2244  0373  3192  22C1  3180   	fcall	___ftsub
  2245  0376  0020               	movlb	0	; select bank0
  2246  0377  0853               	movf	?___ftsub,w
  2247  0378  0021               	movlb	1	; select bank1
  2248  0379  00B2               	movwf	sprintf@fval^(0+128)
  2249  037A  0020               	movlb	0	; select bank0
  2250  037B  0854               	movf	?___ftsub+1,w
  2251  037C  0021               	movlb	1	; select bank1
  2252  037D  00B3               	movwf	(sprintf@fval+1)^(0+128)
  2253  037E  0020               	movlb	0	; select bank0
  2254  037F  0855               	movf	?___ftsub+2,w
  2255  0380  0021               	movlb	1	; select bank1
  2256  0381  00B4               	movwf	(sprintf@fval+2)^(0+128)
  2257                           
  2258                           ;doprnt.c: 1133: exp = 0;
  2259  0382  01AC               	clrf	sprintf@exp^(0+128)
  2260  0383  01AD               	clrf	(sprintf@exp+1)^(0+128)
  2261  0384                     l2658:	
  2262                           
  2263                           ;doprnt.c: 1134: }
  2264                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2265  0384  01B8               	clrf	sprintf@c^(0+128)
  2266  0385  0AB8               	incf	sprintf@c^(0+128),f
  2267  0386  300A               	movlw	10
  2268  0387  0638               	xorwf	sprintf@c^(0+128),w
  2269  0388  1903               	btfsc	3,2
  2270  0389  2BC1               	goto	l2670
  2271  038A                     l2664:	
  2272                           
  2273                           ;doprnt.c: 1137: if(val < dpowers[c])
  2274  038A  0838               	movf	sprintf@c^(0+128),w
  2275  038B  0020               	movlb	0	; select bank0
  2276  038C  00DE               	movwf	??_sprintf
  2277  038D  01DF               	clrf	??_sprintf+1
  2278  038E  35DE               	lslf	??_sprintf,f
  2279  038F  0DDF               	rlf	??_sprintf+1,f
  2280  0390  35DE               	lslf	??_sprintf,f
  2281  0391  0DDF               	rlf	??_sprintf+1,f
  2282  0392  3000               	movlw	low (_dpowers| (0+32768))
  2283  0393  075E               	addwf	??_sprintf,w
  2284  0394  0084               	movwf	4
  2285  0395  3098               	movlw	high (_dpowers| (0+32768))
  2286  0396  3D5F               	addwfc	??_sprintf+1,w
  2287  0397  0085               	movwf	5
  2288  0398  3F00               	moviw [0]fsr0
  2289  0399  00E0               	movwf	??_sprintf+2
  2290  039A  3F01               	moviw [1]fsr0
  2291  039B  00E1               	movwf	??_sprintf+3
  2292  039C  3F02               	moviw [2]fsr0
  2293  039D  00E2               	movwf	??_sprintf+4
  2294  039E  3F03               	moviw [3]fsr0
  2295  039F  00E3               	movwf	??_sprintf+5
  2296  03A0  0863               	movf	??_sprintf+5,w
  2297  03A1  0021               	movlb	1	; select bank1
  2298  03A2  022B               	subwf	(sprintf@val+3)^(0+128),w
  2299  03A3  1D03               	skipz
  2300  03A4  2BB5               	goto	u3875
  2301  03A5  0020               	movlb	0	; select bank0
  2302  03A6  0862               	movf	??_sprintf+4,w
  2303  03A7  0021               	movlb	1	; select bank1
  2304  03A8  022A               	subwf	(sprintf@val+2)^(0+128),w
  2305  03A9  1D03               	skipz
  2306  03AA  2BB5               	goto	u3875
  2307  03AB  0020               	movlb	0	; select bank0
  2308  03AC  0861               	movf	??_sprintf+3,w
  2309  03AD  0021               	movlb	1	; select bank1
  2310  03AE  0229               	subwf	(sprintf@val+1)^(0+128),w
  2311  03AF  1D03               	skipz
  2312  03B0  2BB5               	goto	u3875
  2313  03B1  0020               	movlb	0	; select bank0
  2314  03B2  0860               	movf	??_sprintf+2,w
  2315  03B3  0021               	movlb	1	; select bank1
  2316  03B4  0228               	subwf	sprintf@val^(0+128),w
  2317  03B5                     u3875:	
  2318  03B5  1C03               	btfss	3,0
  2319  03B6  2BC1               	goto	l2670
  2320                           
  2321                           ;doprnt.c: 1138: break;
  2322  03B7  3001               	movlw	1
  2323  03B8  0020               	movlb	0	; select bank0
  2324  03B9  00DE               	movwf	??_sprintf
  2325  03BA  085E               	movf	??_sprintf,w
  2326  03BB  0021               	movlb	1	; select bank1
  2327  03BC  07B8               	addwf	sprintf@c^(0+128),f
  2328  03BD  300A               	movlw	10
  2329  03BE  0638               	xorwf	sprintf@c^(0+128),w
  2330  03BF  1D03               	btfss	3,2
  2331  03C0  2B8A               	goto	l2664
  2332  03C1                     l2670:	
  2333                           
  2334                           ;doprnt.c: 1142: width -= prec + c + exp;
  2335  03C1  0838               	movf	sprintf@c^(0+128),w
  2336  03C2  0020               	movlb	0	; select bank0
  2337  03C3  00DE               	movwf	??_sprintf
  2338  03C4  01DF               	clrf	??_sprintf+1
  2339  03C5  1BDE               	btfsc	??_sprintf,7
  2340  03C6  03DF               	decf	??_sprintf+1,f
  2341  03C7  0021               	movlb	1	; select bank1
  2342  03C8  0835               	movf	sprintf@prec^(0+128),w
  2343  03C9  0020               	movlb	0	; select bank0
  2344  03CA  075E               	addwf	??_sprintf,w
  2345  03CB  00E0               	movwf	??_sprintf+2
  2346  03CC  0021               	movlb	1	; select bank1
  2347  03CD  0836               	movf	(sprintf@prec+1)^(0+128),w
  2348  03CE  0020               	movlb	0	; select bank0
  2349  03CF  3D5F               	addwfc	??_sprintf+1,w
  2350  03D0  00E1               	movwf	??_sprintf+3
  2351  03D1  0021               	movlb	1	; select bank1
  2352  03D2  082C               	movf	sprintf@exp^(0+128),w
  2353  03D3  0020               	movlb	0	; select bank0
  2354  03D4  0760               	addwf	??_sprintf+2,w
  2355  03D5  00E2               	movwf	??_sprintf+4
  2356  03D6  0021               	movlb	1	; select bank1
  2357  03D7  082D               	movf	(sprintf@exp+1)^(0+128),w
  2358  03D8  0020               	movlb	0	; select bank0
  2359  03D9  3D61               	addwfc	??_sprintf+3,w
  2360  03DA  00E3               	movwf	??_sprintf+5
  2361  03DB  0862               	movf	??_sprintf+4,w
  2362  03DC  0021               	movlb	1	; select bank1
  2363  03DD  02B0               	subwf	sprintf@width^(0+128),f
  2364  03DE  0020               	movlb	0	; select bank0
  2365  03DF  0863               	movf	??_sprintf+5,w
  2366  03E0  0021               	movlb	1	; select bank1
  2367  03E1  3BB1               	subwfb	(sprintf@width+1)^(0+128),f
  2368                           
  2369                           ;doprnt.c: 1143: if(
  2370                           ;doprnt.c: 1147: prec)
  2371  03E2  0835               	movf	sprintf@prec^(0+128),w
  2372  03E3  0436               	iorwf	(sprintf@prec+1)^(0+128),w
  2373  03E4  1903               	btfsc	3,2
  2374  03E5  2BEA               	goto	l2674
  2375                           
  2376                           ;doprnt.c: 1148: width--;
  2377  03E6  30FF               	movlw	255
  2378  03E7  07B0               	addwf	sprintf@width^(0+128),f
  2379  03E8  30FF               	movlw	255
  2380  03E9  3DB1               	addwfc	(sprintf@width+1)^(0+128),f
  2381  03EA                     l2674:	
  2382                           
  2383                           ;doprnt.c: 1149: if(flag & 0x03)
  2384  03EA  3003               	movlw	3
  2385  03EB  052E               	andwf	sprintf@flag^(0+128),w
  2386  03EC  0020               	movlb	0	; select bank0
  2387  03ED  00DE               	movwf	??_sprintf
  2388  03EE  3000               	movlw	0
  2389  03EF  0021               	movlb	1	; select bank1
  2390  03F0  052F               	andwf	(sprintf@flag+1)^(0+128),w
  2391  03F1  0020               	movlb	0	; select bank0
  2392  03F2  00DF               	movwf	??_sprintf+1
  2393  03F3  085E               	movf	??_sprintf,w
  2394  03F4  045F               	iorwf	??_sprintf+1,w
  2395  03F5  1903               	btfsc	3,2
  2396  03F6  2BFC               	goto	l2678
  2397                           
  2398                           ;doprnt.c: 1150: width--;
  2399  03F7  30FF               	movlw	255
  2400  03F8  0021               	movlb	1	; select bank1
  2401  03F9  07B0               	addwf	sprintf@width^(0+128),f
  2402  03FA  30FF               	movlw	255
  2403  03FB  3DB1               	addwfc	(sprintf@width+1)^(0+128),f
  2404  03FC                     l2678:	
  2405                           
  2406                           ;doprnt.c: 1153: if(flag & 0x04) {
  2407  03FC  0021               	movlb	1	; select bank1
  2408  03FD  1D2E               	btfss	sprintf@flag^(0+128),2
  2409  03FE  2C4F               	goto	l2700
  2410                           
  2411                           ;doprnt.c: 1157: if(flag & 0x03)
  2412  03FF  3003               	movlw	3
  2413  0400  052E               	andwf	sprintf@flag^(0+128),w
  2414  0401  0020               	movlb	0	; select bank0
  2415  0402  00DE               	movwf	??_sprintf
  2416  0403  3000               	movlw	0
  2417  0404  0021               	movlb	1	; select bank1
  2418  0405  052F               	andwf	(sprintf@flag+1)^(0+128),w
  2419  0406  0020               	movlb	0	; select bank0
  2420  0407  00DF               	movwf	??_sprintf+1
  2421  0408  085E               	movf	??_sprintf,w
  2422  0409  045F               	iorwf	??_sprintf+1,w
  2423  040A  1903               	btfsc	3,2
  2424  040B  2C1A               	goto	l2692
  2425                           
  2426                           ;doprnt.c: 1159: ((*sp++ = ('-')));
  2427  040C  302D               	movlw	45
  2428  040D  00DE               	movwf	??_sprintf
  2429  040E  0021               	movlb	1	; select bank1
  2430  040F  0837               	movf	sprintf@sp^(0+128),w
  2431  0410  0086               	movwf	6
  2432  0411  0187               	clrf	7
  2433  0412  0020               	movlb	0	; select bank0
  2434  0413  085E               	movf	??_sprintf,w
  2435  0414  0081               	movwf	1
  2436  0415  3001               	movlw	1
  2437  0416  00DE               	movwf	??_sprintf
  2438  0417  085E               	movf	??_sprintf,w
  2439  0418  0021               	movlb	1	; select bank1
  2440  0419  07B7               	addwf	sprintf@sp^(0+128),f
  2441  041A                     l2692:	
  2442                           ;doprnt.c: 1168: while(width > 0) {
  2443                           
  2444  041A  0021               	movlb	1	; select bank1
  2445  041B  0831               	movf	(sprintf@width+1)^(0+128),w
  2446  041C  3A80               	xorlw	128
  2447  041D  0020               	movlb	0	; select bank0
  2448  041E  00DE               	movwf	??_sprintf
  2449  041F  3080               	movlw	128
  2450  0420  025E               	subwf	??_sprintf,w
  2451  0421  1D03               	skipz
  2452  0422  2C26               	goto	u3935
  2453  0423  3001               	movlw	1
  2454  0424  0021               	movlb	1	; select bank1
  2455  0425  0230               	subwf	sprintf@width^(0+128),w
  2456  0426                     u3935:	
  2457  0426  1C03               	btfss	3,0
  2458  0427  2C79               	goto	l2716
  2459                           
  2460                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  2461  0428  3030               	movlw	48
  2462  0429  0020               	movlb	0	; select bank0
  2463  042A  00DE               	movwf	??_sprintf
  2464  042B  0021               	movlb	1	; select bank1
  2465  042C  0837               	movf	sprintf@sp^(0+128),w
  2466  042D  0086               	movwf	6
  2467  042E  0187               	clrf	7
  2468  042F  0020               	movlb	0	; select bank0
  2469  0430  085E               	movf	??_sprintf,w
  2470  0431  0081               	movwf	1
  2471  0432  3001               	movlw	1
  2472  0433  00DE               	movwf	??_sprintf
  2473  0434  085E               	movf	??_sprintf,w
  2474  0435  0021               	movlb	1	; select bank1
  2475  0436  07B7               	addwf	sprintf@sp^(0+128),f
  2476                           
  2477                           ;doprnt.c: 1170: width--;
  2478  0437  30FF               	movlw	255
  2479  0438  07B0               	addwf	sprintf@width^(0+128),f
  2480  0439  30FF               	movlw	255
  2481  043A  3DB1               	addwfc	(sprintf@width+1)^(0+128),f
  2482  043B  2C1A               	goto	l2692
  2483  043C                     l2694:	
  2484                           ;doprnt.c: 1175: {
  2485                           ;doprnt.c: 1180: while(width > 0) {
  2486                           
  2487                           ;doprnt.c: 1171: }
  2488                           ;doprnt.c: 1173: } else
  2489                           
  2490                           
  2491                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  2492  043C  3020               	movlw	32
  2493  043D  0020               	movlb	0	; select bank0
  2494  043E  00DE               	movwf	??_sprintf
  2495  043F  0021               	movlb	1	; select bank1
  2496  0440  0837               	movf	sprintf@sp^(0+128),w
  2497  0441  0086               	movwf	6
  2498  0442  0187               	clrf	7
  2499  0443  0020               	movlb	0	; select bank0
  2500  0444  085E               	movf	??_sprintf,w
  2501  0445  0081               	movwf	1
  2502  0446  3001               	movlw	1
  2503  0447  00DE               	movwf	??_sprintf
  2504  0448  085E               	movf	??_sprintf,w
  2505  0449  0021               	movlb	1	; select bank1
  2506  044A  07B7               	addwf	sprintf@sp^(0+128),f
  2507                           
  2508                           ;doprnt.c: 1182: width--;
  2509  044B  30FF               	movlw	255
  2510  044C  07B0               	addwf	sprintf@width^(0+128),f
  2511  044D  30FF               	movlw	255
  2512  044E  3DB1               	addwfc	(sprintf@width+1)^(0+128),f
  2513  044F                     l2700:	
  2514  044F  0021               	movlb	1	; select bank1
  2515  0450  0831               	movf	(sprintf@width+1)^(0+128),w
  2516  0451  3A80               	xorlw	128
  2517  0452  0020               	movlb	0	; select bank0
  2518  0453  00DE               	movwf	??_sprintf
  2519  0454  3080               	movlw	128
  2520  0455  025E               	subwf	??_sprintf,w
  2521  0456  1D03               	skipz
  2522  0457  2C5B               	goto	u3945
  2523  0458  3001               	movlw	1
  2524  0459  0021               	movlb	1	; select bank1
  2525  045A  0230               	subwf	sprintf@width^(0+128),w
  2526  045B                     u3945:	
  2527  045B  1803               	skipnc
  2528  045C  2C3C               	goto	l2694
  2529                           
  2530                           ;doprnt.c: 1183: }
  2531                           ;doprnt.c: 1188: if(flag & 0x03)
  2532  045D  3003               	movlw	3
  2533  045E  0021               	movlb	1	; select bank1
  2534  045F  052E               	andwf	sprintf@flag^(0+128),w
  2535  0460  0020               	movlb	0	; select bank0
  2536  0461  00DE               	movwf	??_sprintf
  2537  0462  3000               	movlw	0
  2538  0463  0021               	movlb	1	; select bank1
  2539  0464  052F               	andwf	(sprintf@flag+1)^(0+128),w
  2540  0465  0020               	movlb	0	; select bank0
  2541  0466  00DF               	movwf	??_sprintf+1
  2542  0467  085E               	movf	??_sprintf,w
  2543  0468  045F               	iorwf	??_sprintf+1,w
  2544  0469  1903               	btfsc	3,2
  2545  046A  2C79               	goto	l2716
  2546                           
  2547                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2548  046B  302D               	movlw	45
  2549  046C                     L7:	
  2550  046C  00DE               	movwf	??_sprintf
  2551  046D  0021               	movlb	1	; select bank1
  2552  046E  0837               	movf	sprintf@sp^(0+128),w
  2553  046F  0086               	movwf	6
  2554  0470  0187               	clrf	7
  2555  0471  0020               	movlb	0	; select bank0
  2556  0472  085E               	movf	??_sprintf,w
  2557  0473  0081               	movwf	1
  2558  0474  3001               	movlw	1
  2559  0475  00DE               	movwf	??_sprintf
  2560  0476  085E               	movf	??_sprintf,w
  2561  0477  0021               	movlb	1	; select bank1
  2562  0478  07B7               	addwf	sprintf@sp^(0+128),f
  2563  0479                     l2716:	
  2564  0479  30FF               	movlw	255
  2565  047A  0020               	movlb	0	; select bank0
  2566  047B  00DE               	movwf	??_sprintf
  2567  047C  085E               	movf	??_sprintf,w
  2568  047D  0021               	movlb	1	; select bank1
  2569  047E  07B8               	addwf	sprintf@c^(0+128),f
  2570  047F  0A38               	incf	sprintf@c^(0+128),w
  2571  0480  1903               	btfsc	3,2
  2572  0481  2CF0               	goto	l2724
  2573                           
  2574                           ;doprnt.c: 1200: {
  2575                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2576                           
  2577                           ;doprnt.c: 1195: }
  2578                           ;doprnt.c: 1196: while(c--) {
  2579  0482  0838               	movf	sprintf@c^(0+128),w
  2580  0483  0020               	movlb	0	; select bank0
  2581  0484  00DE               	movwf	??_sprintf
  2582  0485  01DF               	clrf	??_sprintf+1
  2583  0486  35DE               	lslf	??_sprintf,f
  2584  0487  0DDF               	rlf	??_sprintf+1,f
  2585  0488  35DE               	lslf	??_sprintf,f
  2586  0489  0DDF               	rlf	??_sprintf+1,f
  2587  048A  3000               	movlw	low (_dpowers| (0+32768))
  2588  048B  075E               	addwf	??_sprintf,w
  2589  048C  0084               	movwf	4
  2590  048D  3098               	movlw	high (_dpowers| (0+32768))
  2591  048E  3D5F               	addwfc	??_sprintf+1,w
  2592  048F  0085               	movwf	5
  2593  0490  3F00               	moviw [0]fsr0
  2594  0491  00F0               	movwf	___lldiv@divisor
  2595  0492  3F01               	moviw [1]fsr0
  2596  0493  00F1               	movwf	___lldiv@divisor+1
  2597  0494  3F02               	moviw [2]fsr0
  2598  0495  00F2               	movwf	___lldiv@divisor+2
  2599  0496  3F03               	moviw [3]fsr0
  2600  0497  00F3               	movwf	___lldiv@divisor+3
  2601  0498  0021               	movlb	1	; select bank1
  2602  0499  082B               	movf	(sprintf@val+3)^(0+128),w
  2603  049A  00F7               	movwf	___lldiv@dividend+3
  2604  049B  082A               	movf	(sprintf@val+2)^(0+128),w
  2605  049C  00F6               	movwf	___lldiv@dividend+2
  2606  049D  0829               	movf	(sprintf@val+1)^(0+128),w
  2607  049E  00F5               	movwf	___lldiv@dividend+1
  2608  049F  0828               	movf	sprintf@val^(0+128),w
  2609  04A0  00F4               	movwf	___lldiv@dividend
  2610  04A1  3194  241F  3180   	fcall	___lldiv
  2611  04A4  0873               	movf	?___lldiv+3,w
  2612  04A5  0021               	movlb	1	; select bank1
  2613  04A6  00A7               	movwf	(sprintf@tmpval+3)^(0+128)
  2614  04A7  0872               	movf	?___lldiv+2,w
  2615  04A8  00A6               	movwf	(sprintf@tmpval+2)^(0+128)
  2616  04A9  0871               	movf	?___lldiv+1,w
  2617  04AA  00A5               	movwf	(sprintf@tmpval+1)^(0+128)
  2618  04AB  0870               	movf	?___lldiv,w
  2619  04AC  00A4               	movwf	sprintf@tmpval^(0+128)
  2620                           
  2621                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2622  04AD  3000               	movlw	0
  2623  04AE  0020               	movlb	0	; select bank0
  2624  04AF  00A3               	movwf	___llmod@divisor+3
  2625  04B0  3000               	movlw	0
  2626  04B1  00A2               	movwf	___llmod@divisor+2
  2627  04B2  3000               	movlw	0
  2628  04B3  00A1               	movwf	___llmod@divisor+1
  2629  04B4  300A               	movlw	10
  2630  04B5  00A0               	movwf	___llmod@divisor
  2631  04B6  0021               	movlb	1	; select bank1
  2632  04B7  0827               	movf	(sprintf@tmpval+3)^(0+128),w
  2633  04B8  0020               	movlb	0	; select bank0
  2634  04B9  00A7               	movwf	___llmod@dividend+3
  2635  04BA  0021               	movlb	1	; select bank1
  2636  04BB  0826               	movf	(sprintf@tmpval+2)^(0+128),w
  2637  04BC  0020               	movlb	0	; select bank0
  2638  04BD  00A6               	movwf	___llmod@dividend+2
  2639  04BE  0021               	movlb	1	; select bank1
  2640  04BF  0825               	movf	(sprintf@tmpval+1)^(0+128),w
  2641  04C0  0020               	movlb	0	; select bank0
  2642  04C1  00A5               	movwf	___llmod@dividend+1
  2643  04C2  0021               	movlb	1	; select bank1
  2644  04C3  0824               	movf	sprintf@tmpval^(0+128),w
  2645  04C4  0020               	movlb	0	; select bank0
  2646  04C5  00A4               	movwf	___llmod@dividend
  2647  04C6  3193  2397  3180   	fcall	___llmod
  2648  04C9  0020               	movlb	0	; select bank0
  2649  04CA  0823               	movf	?___llmod+3,w
  2650  04CB  0021               	movlb	1	; select bank1
  2651  04CC  00A7               	movwf	(sprintf@tmpval+3)^(0+128)
  2652  04CD  0020               	movlb	0	; select bank0
  2653  04CE  0822               	movf	?___llmod+2,w
  2654  04CF  0021               	movlb	1	; select bank1
  2655  04D0  00A6               	movwf	(sprintf@tmpval+2)^(0+128)
  2656  04D1  0020               	movlb	0	; select bank0
  2657  04D2  0821               	movf	?___llmod+1,w
  2658  04D3  0021               	movlb	1	; select bank1
  2659  04D4  00A5               	movwf	(sprintf@tmpval+1)^(0+128)
  2660  04D5  0020               	movlb	0	; select bank0
  2661  04D6  0820               	movf	?___llmod,w
  2662  04D7  0021               	movlb	1	; select bank1
  2663  04D8  00A4               	movwf	sprintf@tmpval^(0+128)
  2664                           
  2665                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2666  04D9  0824               	movf	sprintf@tmpval^(0+128),w
  2667  04DA  3E30               	addlw	48
  2668  04DB  0020               	movlb	0	; select bank0
  2669  04DC  2C6C               	goto	L7
  2670  04DD                     l2718:	
  2671                           ;doprnt.c: 1204: }
  2672                           ;doprnt.c: 1206: }
  2673                           ;doprnt.c: 1207: while(exp > 0) {
  2674                           
  2675                           
  2676                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2677  04DD  3030               	movlw	48
  2678  04DE  0020               	movlb	0	; select bank0
  2679  04DF  00DE               	movwf	??_sprintf
  2680  04E0  0021               	movlb	1	; select bank1
  2681  04E1  0837               	movf	sprintf@sp^(0+128),w
  2682  04E2  0086               	movwf	6
  2683  04E3  0187               	clrf	7
  2684  04E4  0020               	movlb	0	; select bank0
  2685  04E5  085E               	movf	??_sprintf,w
  2686  04E6  0081               	movwf	1
  2687  04E7  3001               	movlw	1
  2688  04E8  00DE               	movwf	??_sprintf
  2689  04E9  085E               	movf	??_sprintf,w
  2690  04EA  0021               	movlb	1	; select bank1
  2691  04EB  07B7               	addwf	sprintf@sp^(0+128),f
  2692                           
  2693                           ;doprnt.c: 1209: exp--;
  2694  04EC  30FF               	movlw	255
  2695  04ED  07AC               	addwf	sprintf@exp^(0+128),f
  2696  04EE  30FF               	movlw	255
  2697  04EF  3DAD               	addwfc	(sprintf@exp+1)^(0+128),f
  2698  04F0                     l2724:	
  2699  04F0  082D               	movf	(sprintf@exp+1)^(0+128),w
  2700  04F1  3A80               	xorlw	128
  2701  04F2  0020               	movlb	0	; select bank0
  2702  04F3  00DE               	movwf	??_sprintf
  2703  04F4  3080               	movlw	128
  2704  04F5  025E               	subwf	??_sprintf,w
  2705  04F6  1D03               	skipz
  2706  04F7  2CFB               	goto	u3975
  2707  04F8  3001               	movlw	1
  2708  04F9  0021               	movlb	1	; select bank1
  2709  04FA  022C               	subwf	sprintf@exp^(0+128),w
  2710  04FB                     u3975:	
  2711  04FB  1803               	skipnc
  2712  04FC  2CDD               	goto	l2718
  2713                           
  2714                           ;doprnt.c: 1210: }
  2715                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2716  04FD  0021               	movlb	1	; select bank1
  2717  04FE  0836               	movf	(sprintf@prec+1)^(0+128),w
  2718  04FF  3A80               	xorlw	128
  2719  0500  0020               	movlb	0	; select bank0
  2720  0501  00DE               	movwf	??_sprintf
  2721  0502  3080               	movlw	128
  2722  0503  025E               	subwf	??_sprintf,w
  2723  0504  1D03               	skipz
  2724  0505  2D09               	goto	u3985
  2725  0506  3009               	movlw	9
  2726  0507  0021               	movlb	1	; select bank1
  2727  0508  0235               	subwf	sprintf@prec^(0+128),w
  2728  0509                     u3985:	
  2729  0509  1C03               	skipc
  2730  050A  2D0D               	goto	l2730
  2731                           
  2732                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2733  050B  3008               	movlw	8
  2734  050C  2D0F               	goto	L4
  2735  050D                     l2730:	
  2736                           
  2737                           ;doprnt.c: 1213: else
  2738                           ;doprnt.c: 1214: c = prec;
  2739  050D  0021               	movlb	1	; select bank1
  2740  050E  0835               	movf	sprintf@prec^(0+128),w
  2741  050F                     L4:	
  2742  050F  0020               	movlb	0	; select bank0
  2743  0510  00DE               	movwf	??_sprintf
  2744  0511  085E               	movf	??_sprintf,w
  2745  0512  0021               	movlb	1	; select bank1
  2746  0513  00B8               	movwf	sprintf@c^(0+128)
  2747                           
  2748                           ;doprnt.c: 1215: prec -= c;
  2749  0514  0838               	movf	sprintf@c^(0+128),w
  2750  0515  0020               	movlb	0	; select bank0
  2751  0516  00DE               	movwf	??_sprintf
  2752  0517  01DF               	clrf	??_sprintf+1
  2753  0518  1BDE               	btfsc	??_sprintf,7
  2754  0519  03DF               	decf	??_sprintf+1,f
  2755  051A  085E               	movf	??_sprintf,w
  2756  051B  0021               	movlb	1	; select bank1
  2757  051C  02B5               	subwf	sprintf@prec^(0+128),f
  2758  051D  0020               	movlb	0	; select bank0
  2759  051E  085F               	movf	??_sprintf+1,w
  2760  051F  0021               	movlb	1	; select bank1
  2761  0520  3BB6               	subwfb	(sprintf@prec+1)^(0+128),f
  2762                           
  2763                           ;doprnt.c: 1219: if(c)
  2764  0521  0838               	movf	sprintf@c^(0+128),w
  2765  0522  1903               	btfsc	3,2
  2766  0523  2D33               	goto	l2738
  2767                           
  2768                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2769  0524  302E               	movlw	46
  2770  0525  0020               	movlb	0	; select bank0
  2771  0526  00DE               	movwf	??_sprintf
  2772  0527  0021               	movlb	1	; select bank1
  2773  0528  0837               	movf	sprintf@sp^(0+128),w
  2774  0529  0086               	movwf	6
  2775  052A  0187               	clrf	7
  2776  052B  0020               	movlb	0	; select bank0
  2777  052C  085E               	movf	??_sprintf,w
  2778  052D  0081               	movwf	1
  2779  052E  3001               	movlw	1
  2780  052F  00DE               	movwf	??_sprintf
  2781  0530  085E               	movf	??_sprintf,w
  2782  0531  0021               	movlb	1	; select bank1
  2783  0532  07B7               	addwf	sprintf@sp^(0+128),f
  2784  0533                     l2738:	
  2785                           
  2786                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2787  0533  0838               	movf	sprintf@c^(0+128),w
  2788  0534  318D  25BC  3180   	fcall	_scale
  2789  0537  0020               	movlb	0	; select bank0
  2790  0538  0838               	movf	?_scale,w
  2791  0539  0021               	movlb	1	; select bank1
  2792  053A  00A0               	movwf	_sprintf$723^(0+128)
  2793  053B  0020               	movlb	0	; select bank0
  2794  053C  0839               	movf	?_scale+1,w
  2795  053D  0021               	movlb	1	; select bank1
  2796  053E  00A1               	movwf	(_sprintf$723+1)^(0+128)
  2797  053F  0020               	movlb	0	; select bank0
  2798  0540  083A               	movf	?_scale+2,w
  2799  0541  0021               	movlb	1	; select bank1
  2800  0542  00A2               	movwf	(_sprintf$723+2)^(0+128)
  2801                           
  2802                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2803  0543  0820               	movf	_sprintf$723^(0+128),w
  2804  0544  0020               	movlb	0	; select bank0
  2805  0545  00AB               	movwf	___ftmul@f2
  2806  0546  0021               	movlb	1	; select bank1
  2807  0547  0821               	movf	(_sprintf$723+1)^(0+128),w
  2808  0548  0020               	movlb	0	; select bank0
  2809  0549  00AC               	movwf	___ftmul@f2+1
  2810  054A  0021               	movlb	1	; select bank1
  2811  054B  0822               	movf	(_sprintf$723+2)^(0+128),w
  2812  054C  0020               	movlb	0	; select bank0
  2813  054D  00AD               	movwf	___ftmul@f2+2
  2814  054E  0021               	movlb	1	; select bank1
  2815  054F  0832               	movf	sprintf@fval^(0+128),w
  2816  0550  0020               	movlb	0	; select bank0
  2817  0551  00A8               	movwf	___ftmul@f1
  2818  0552  0021               	movlb	1	; select bank1
  2819  0553  0833               	movf	(sprintf@fval+1)^(0+128),w
  2820  0554  0020               	movlb	0	; select bank0
  2821  0555  00A9               	movwf	___ftmul@f1+1
  2822  0556  0021               	movlb	1	; select bank1
  2823  0557  0834               	movf	(sprintf@fval+2)^(0+128),w
  2824  0558  0020               	movlb	0	; select bank0
  2825  0559  00AA               	movwf	___ftmul@f1+2
  2826  055A  3197  274C  3180   	fcall	___ftmul
  2827  055D  0020               	movlb	0	; select bank0
  2828  055E  0828               	movf	?___ftmul,w
  2829  055F  00C1               	movwf	___fttol@f1
  2830  0560  0829               	movf	?___ftmul+1,w
  2831  0561  00C2               	movwf	___fttol@f1+1
  2832  0562  082A               	movf	?___ftmul+2,w
  2833  0563  00C3               	movwf	___fttol@f1+2
  2834  0564  3188  2002  3180   	fcall	___fttol
  2835  0567  0020               	movlb	0	; select bank0
  2836  0568  0844               	movf	?___fttol+3,w
  2837  0569  0021               	movlb	1	; select bank1
  2838  056A  00AB               	movwf	(sprintf@val+3)^(0+128)
  2839  056B  0020               	movlb	0	; select bank0
  2840  056C  0843               	movf	?___fttol+2,w
  2841  056D  0021               	movlb	1	; select bank1
  2842  056E  00AA               	movwf	(sprintf@val+2)^(0+128)
  2843  056F  0020               	movlb	0	; select bank0
  2844  0570  0842               	movf	?___fttol+1,w
  2845  0571  0021               	movlb	1	; select bank1
  2846  0572  00A9               	movwf	(sprintf@val+1)^(0+128)
  2847  0573  0020               	movlb	0	; select bank0
  2848  0574  0841               	movf	?___fttol,w
  2849  0575                     L5:	
  2850  0575  0021               	movlb	1	; select bank1
  2851  0576  00A8               	movwf	sprintf@val^(0+128)
  2852  0577  30FF               	movlw	255
  2853  0578  0020               	movlb	0	; select bank0
  2854  0579  00DE               	movwf	??_sprintf
  2855  057A  085E               	movf	??_sprintf,w
  2856  057B  0021               	movlb	1	; select bank1
  2857  057C  07B8               	addwf	sprintf@c^(0+128),f
  2858  057D  0A38               	incf	sprintf@c^(0+128),w
  2859  057E  1903               	btfsc	3,2
  2860  057F  2E32               	goto	l2760
  2861                           
  2862                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2863                           
  2864                           ;doprnt.c: 1228: while(c--) {
  2865  0580  0838               	movf	sprintf@c^(0+128),w
  2866  0581  0020               	movlb	0	; select bank0
  2867  0582  00DE               	movwf	??_sprintf
  2868  0583  01DF               	clrf	??_sprintf+1
  2869  0584  35DE               	lslf	??_sprintf,f
  2870  0585  0DDF               	rlf	??_sprintf+1,f
  2871  0586  35DE               	lslf	??_sprintf,f
  2872  0587  0DDF               	rlf	??_sprintf+1,f
  2873  0588  3000               	movlw	low (_dpowers| (0+32768))
  2874  0589  075E               	addwf	??_sprintf,w
  2875  058A  0084               	movwf	4
  2876  058B  3098               	movlw	high (_dpowers| (0+32768))
  2877  058C  3D5F               	addwfc	??_sprintf+1,w
  2878  058D  0085               	movwf	5
  2879  058E  3F00               	moviw [0]fsr0
  2880  058F  00F0               	movwf	___lldiv@divisor
  2881  0590  3F01               	moviw [1]fsr0
  2882  0591  00F1               	movwf	___lldiv@divisor+1
  2883  0592  3F02               	moviw [2]fsr0
  2884  0593  00F2               	movwf	___lldiv@divisor+2
  2885  0594  3F03               	moviw [3]fsr0
  2886  0595  00F3               	movwf	___lldiv@divisor+3
  2887  0596  0021               	movlb	1	; select bank1
  2888  0597  082B               	movf	(sprintf@val+3)^(0+128),w
  2889  0598  00F7               	movwf	___lldiv@dividend+3
  2890  0599  082A               	movf	(sprintf@val+2)^(0+128),w
  2891  059A  00F6               	movwf	___lldiv@dividend+2
  2892  059B  0829               	movf	(sprintf@val+1)^(0+128),w
  2893  059C  00F5               	movwf	___lldiv@dividend+1
  2894  059D  0828               	movf	sprintf@val^(0+128),w
  2895  059E  00F4               	movwf	___lldiv@dividend
  2896  059F  3194  241F  3180   	fcall	___lldiv
  2897  05A2  0873               	movf	?___lldiv+3,w
  2898  05A3  0021               	movlb	1	; select bank1
  2899  05A4  00A7               	movwf	(sprintf@tmpval+3)^(0+128)
  2900  05A5  0872               	movf	?___lldiv+2,w
  2901  05A6  00A6               	movwf	(sprintf@tmpval+2)^(0+128)
  2902  05A7  0871               	movf	?___lldiv+1,w
  2903  05A8  00A5               	movwf	(sprintf@tmpval+1)^(0+128)
  2904  05A9  0870               	movf	?___lldiv,w
  2905  05AA  00A4               	movwf	sprintf@tmpval^(0+128)
  2906                           
  2907                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2908  05AB  3000               	movlw	0
  2909  05AC  0020               	movlb	0	; select bank0
  2910  05AD  00A3               	movwf	___llmod@divisor+3
  2911  05AE  3000               	movlw	0
  2912  05AF  00A2               	movwf	___llmod@divisor+2
  2913  05B0  3000               	movlw	0
  2914  05B1  00A1               	movwf	___llmod@divisor+1
  2915  05B2  300A               	movlw	10
  2916  05B3  00A0               	movwf	___llmod@divisor
  2917  05B4  0021               	movlb	1	; select bank1
  2918  05B5  0827               	movf	(sprintf@tmpval+3)^(0+128),w
  2919  05B6  0020               	movlb	0	; select bank0
  2920  05B7  00A7               	movwf	___llmod@dividend+3
  2921  05B8  0021               	movlb	1	; select bank1
  2922  05B9  0826               	movf	(sprintf@tmpval+2)^(0+128),w
  2923  05BA  0020               	movlb	0	; select bank0
  2924  05BB  00A6               	movwf	___llmod@dividend+2
  2925  05BC  0021               	movlb	1	; select bank1
  2926  05BD  0825               	movf	(sprintf@tmpval+1)^(0+128),w
  2927  05BE  0020               	movlb	0	; select bank0
  2928  05BF  00A5               	movwf	___llmod@dividend+1
  2929  05C0  0021               	movlb	1	; select bank1
  2930  05C1  0824               	movf	sprintf@tmpval^(0+128),w
  2931  05C2  0020               	movlb	0	; select bank0
  2932  05C3  00A4               	movwf	___llmod@dividend
  2933  05C4  3193  2397  3180   	fcall	___llmod
  2934  05C7  0020               	movlb	0	; select bank0
  2935  05C8  0823               	movf	?___llmod+3,w
  2936  05C9  0021               	movlb	1	; select bank1
  2937  05CA  00A7               	movwf	(sprintf@tmpval+3)^(0+128)
  2938  05CB  0020               	movlb	0	; select bank0
  2939  05CC  0822               	movf	?___llmod+2,w
  2940  05CD  0021               	movlb	1	; select bank1
  2941  05CE  00A6               	movwf	(sprintf@tmpval+2)^(0+128)
  2942  05CF  0020               	movlb	0	; select bank0
  2943  05D0  0821               	movf	?___llmod+1,w
  2944  05D1  0021               	movlb	1	; select bank1
  2945  05D2  00A5               	movwf	(sprintf@tmpval+1)^(0+128)
  2946  05D3  0020               	movlb	0	; select bank0
  2947  05D4  0820               	movf	?___llmod,w
  2948  05D5  0021               	movlb	1	; select bank1
  2949  05D6  00A4               	movwf	sprintf@tmpval^(0+128)
  2950                           
  2951                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2952  05D7  0824               	movf	sprintf@tmpval^(0+128),w
  2953  05D8  3E30               	addlw	48
  2954  05D9  0020               	movlb	0	; select bank0
  2955  05DA  00DE               	movwf	??_sprintf
  2956  05DB  0021               	movlb	1	; select bank1
  2957  05DC  0837               	movf	sprintf@sp^(0+128),w
  2958  05DD  0086               	movwf	6
  2959  05DE  0187               	clrf	7
  2960  05DF  0020               	movlb	0	; select bank0
  2961  05E0  085E               	movf	??_sprintf,w
  2962  05E1  0081               	movwf	1
  2963  05E2  3001               	movlw	1
  2964  05E3  00DE               	movwf	??_sprintf
  2965  05E4  085E               	movf	??_sprintf,w
  2966  05E5  0021               	movlb	1	; select bank1
  2967  05E6  07B7               	addwf	sprintf@sp^(0+128),f
  2968                           
  2969                           ;doprnt.c: 1232: val %= dpowers[c];
  2970  05E7  0838               	movf	sprintf@c^(0+128),w
  2971  05E8  0020               	movlb	0	; select bank0
  2972  05E9  00DE               	movwf	??_sprintf
  2973  05EA  01DF               	clrf	??_sprintf+1
  2974  05EB  35DE               	lslf	??_sprintf,f
  2975  05EC  0DDF               	rlf	??_sprintf+1,f
  2976  05ED  35DE               	lslf	??_sprintf,f
  2977  05EE  0DDF               	rlf	??_sprintf+1,f
  2978  05EF  3000               	movlw	low (_dpowers| (0+32768))
  2979  05F0  075E               	addwf	??_sprintf,w
  2980  05F1  0084               	movwf	4
  2981  05F2  3098               	movlw	high (_dpowers| (0+32768))
  2982  05F3  3D5F               	addwfc	??_sprintf+1,w
  2983  05F4  0085               	movwf	5
  2984  05F5  3F00               	moviw [0]fsr0
  2985  05F6  00A0               	movwf	___llmod@divisor
  2986  05F7  3F01               	moviw [1]fsr0
  2987  05F8  00A1               	movwf	___llmod@divisor+1
  2988  05F9  3F02               	moviw [2]fsr0
  2989  05FA  00A2               	movwf	___llmod@divisor+2
  2990  05FB  3F03               	moviw [3]fsr0
  2991  05FC  00A3               	movwf	___llmod@divisor+3
  2992  05FD  0021               	movlb	1	; select bank1
  2993  05FE  082B               	movf	(sprintf@val+3)^(0+128),w
  2994  05FF  0020               	movlb	0	; select bank0
  2995  0600  00A7               	movwf	___llmod@dividend+3
  2996  0601  0021               	movlb	1	; select bank1
  2997  0602  082A               	movf	(sprintf@val+2)^(0+128),w
  2998  0603  0020               	movlb	0	; select bank0
  2999  0604  00A6               	movwf	___llmod@dividend+2
  3000  0605  0021               	movlb	1	; select bank1
  3001  0606  0829               	movf	(sprintf@val+1)^(0+128),w
  3002  0607  0020               	movlb	0	; select bank0
  3003  0608  00A5               	movwf	___llmod@dividend+1
  3004  0609  0021               	movlb	1	; select bank1
  3005  060A  0828               	movf	sprintf@val^(0+128),w
  3006  060B  0020               	movlb	0	; select bank0
  3007  060C  00A4               	movwf	___llmod@dividend
  3008  060D  3193  2397  3180   	fcall	___llmod
  3009  0610  0020               	movlb	0	; select bank0
  3010  0611  0823               	movf	?___llmod+3,w
  3011  0612  0021               	movlb	1	; select bank1
  3012  0613  00AB               	movwf	(sprintf@val+3)^(0+128)
  3013  0614  0020               	movlb	0	; select bank0
  3014  0615  0822               	movf	?___llmod+2,w
  3015  0616  0021               	movlb	1	; select bank1
  3016  0617  00AA               	movwf	(sprintf@val+2)^(0+128)
  3017  0618  0020               	movlb	0	; select bank0
  3018  0619  0821               	movf	?___llmod+1,w
  3019  061A  0021               	movlb	1	; select bank1
  3020  061B  00A9               	movwf	(sprintf@val+1)^(0+128)
  3021  061C  0020               	movlb	0	; select bank0
  3022  061D  0820               	movf	?___llmod,w
  3023  061E  2D75               	goto	L5
  3024  061F                     l2754:	
  3025                           ;doprnt.c: 1233: }
  3026                           ;doprnt.c: 1235: while(prec) {
  3027                           
  3028                           
  3029                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  3030  061F  3030               	movlw	48
  3031  0620  0020               	movlb	0	; select bank0
  3032  0621  00DE               	movwf	??_sprintf
  3033  0622  0021               	movlb	1	; select bank1
  3034  0623  0837               	movf	sprintf@sp^(0+128),w
  3035  0624  0086               	movwf	6
  3036  0625  0187               	clrf	7
  3037  0626  0020               	movlb	0	; select bank0
  3038  0627  085E               	movf	??_sprintf,w
  3039  0628  0081               	movwf	1
  3040  0629  3001               	movlw	1
  3041  062A  00DE               	movwf	??_sprintf
  3042  062B  085E               	movf	??_sprintf,w
  3043  062C  0021               	movlb	1	; select bank1
  3044  062D  07B7               	addwf	sprintf@sp^(0+128),f
  3045                           
  3046                           ;doprnt.c: 1237: prec--;
  3047  062E  30FF               	movlw	255
  3048  062F  07B5               	addwf	sprintf@prec^(0+128),f
  3049  0630  30FF               	movlw	255
  3050  0631  3DB6               	addwfc	(sprintf@prec+1)^(0+128),f
  3051  0632                     l2760:	
  3052  0632  0835               	movf	sprintf@prec^(0+128),w
  3053  0633  0436               	iorwf	(sprintf@prec+1)^(0+128),w
  3054  0634  1903               	btfsc	3,2
  3055  0635  2886               	goto	l2854
  3056  0636  2E1F               	goto	l2754
  3057  0637                     l2762:	
  3058                           ;doprnt.c: 1238: }
  3059                           ;doprnt.c: 1245: continue;
  3060                           
  3061                           
  3062                           ;doprnt.c: 1246: }
  3063                           ;doprnt.c: 1253: {
  3064                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3065  0637  0021               	movlb	1	; select bank1
  3066  0638  0823               	movf	sprintf@ap^(0+128),w
  3067  0639  0086               	movwf	6
  3068  063A  0187               	clrf	7
  3069  063B  3F40               	moviw [0]fsr1
  3070  063C  0020               	movlb	0	; select bank0
  3071  063D  00DE               	movwf	??_sprintf
  3072  063E  3F41               	moviw [1]fsr1
  3073  063F  00DF               	movwf	??_sprintf+1
  3074  0640  085E               	movf	??_sprintf,w
  3075  0641  0021               	movlb	1	; select bank1
  3076  0642  00A8               	movwf	sprintf@val^(0+128)
  3077  0643  0020               	movlb	0	; select bank0
  3078  0644  085F               	movf	??_sprintf+1,w
  3079  0645  0021               	movlb	1	; select bank1
  3080  0646  00A9               	movwf	(sprintf@val+1)^(0+128)
  3081  0647  0D89               	rlf	9,f
  3082  0648  3B89               	subwfb	9,f
  3083  0649  0989               	comf	9,f
  3084  064A  00AA               	movwf	(sprintf@val+2)^(0+128)
  3085  064B  00AB               	movwf	(sprintf@val+3)^(0+128)
  3086  064C  3002               	movlw	2
  3087  064D  0020               	movlb	0	; select bank0
  3088  064E  00DE               	movwf	??_sprintf
  3089  064F  085E               	movf	??_sprintf,w
  3090  0650  0021               	movlb	1	; select bank1
  3091  0651  07A3               	addwf	sprintf@ap^(0+128),f
  3092                           
  3093                           ;doprnt.c: 1261: if((long)val < 0) {
  3094  0652  1FAB               	btfss	(sprintf@val+3)^(0+128),7
  3095  0653  2E63               	goto	l2772
  3096                           
  3097                           ;doprnt.c: 1262: flag |= 0x03;
  3098  0654  3003               	movlw	3
  3099  0655  04AE               	iorwf	sprintf@flag^(0+128),f
  3100  0656  3000               	movlw	0
  3101  0657  04AF               	iorwf	(sprintf@flag+1)^(0+128),f
  3102                           
  3103                           ;doprnt.c: 1263: val = -val;
  3104  0658  09A8               	comf	sprintf@val^(0+128),f
  3105  0659  09A9               	comf	(sprintf@val+1)^(0+128),f
  3106  065A  09AA               	comf	(sprintf@val+2)^(0+128),f
  3107  065B  09AB               	comf	(sprintf@val+3)^(0+128),f
  3108  065C  0AA8               	incf	sprintf@val^(0+128),f
  3109  065D  1903               	skipnz
  3110  065E  0AA9               	incf	(sprintf@val+1)^(0+128),f
  3111  065F  1903               	skipnz
  3112  0660  0AAA               	incf	(sprintf@val+2)^(0+128),f
  3113  0661  1903               	skipnz
  3114  0662  0AAB               	incf	(sprintf@val+3)^(0+128),f
  3115  0663                     l2772:	
  3116                           
  3117                           ;doprnt.c: 1264: }
  3118                           ;doprnt.c: 1266: }
  3119                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3120  0663  0835               	movf	sprintf@prec^(0+128),w
  3121  0664  0436               	iorwf	(sprintf@prec+1)^(0+128),w
  3122  0665  1D03               	btfss	3,2
  3123  0666  2E71               	goto	l2778
  3124  0667  082B               	movf	(sprintf@val+3)^(0+128),w
  3125  0668  042A               	iorwf	(sprintf@val+2)^(0+128),w
  3126  0669  0429               	iorwf	(sprintf@val+1)^(0+128),w
  3127  066A  0428               	iorwf	sprintf@val^(0+128),w
  3128  066B  1D03               	skipz
  3129  066C  2E71               	goto	l2778
  3130                           
  3131                           ;doprnt.c: 1291: prec++;
  3132  066D  3001               	movlw	1
  3133  066E  07B5               	addwf	sprintf@prec^(0+128),f
  3134  066F  3000               	movlw	0
  3135  0670  3DB6               	addwfc	(sprintf@prec+1)^(0+128),f
  3136  0671                     l2778:	
  3137                           
  3138                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3139  0671  01B8               	clrf	sprintf@c^(0+128)
  3140  0672  0AB8               	incf	sprintf@c^(0+128),f
  3141  0673  300A               	movlw	10
  3142  0674  0638               	xorwf	sprintf@c^(0+128),w
  3143  0675  1903               	btfsc	3,2
  3144  0676  2EAE               	goto	l2790
  3145  0677                     l2784:	
  3146                           
  3147                           ;doprnt.c: 1306: if(val < dpowers[c])
  3148  0677  0838               	movf	sprintf@c^(0+128),w
  3149  0678  0020               	movlb	0	; select bank0
  3150  0679  00DE               	movwf	??_sprintf
  3151  067A  01DF               	clrf	??_sprintf+1
  3152  067B  35DE               	lslf	??_sprintf,f
  3153  067C  0DDF               	rlf	??_sprintf+1,f
  3154  067D  35DE               	lslf	??_sprintf,f
  3155  067E  0DDF               	rlf	??_sprintf+1,f
  3156  067F  3000               	movlw	low (_dpowers| (0+32768))
  3157  0680  075E               	addwf	??_sprintf,w
  3158  0681  0084               	movwf	4
  3159  0682  3098               	movlw	high (_dpowers| (0+32768))
  3160  0683  3D5F               	addwfc	??_sprintf+1,w
  3161  0684  0085               	movwf	5
  3162  0685  3F00               	moviw [0]fsr0
  3163  0686  00E0               	movwf	??_sprintf+2
  3164  0687  3F01               	moviw [1]fsr0
  3165  0688  00E1               	movwf	??_sprintf+3
  3166  0689  3F02               	moviw [2]fsr0
  3167  068A  00E2               	movwf	??_sprintf+4
  3168  068B  3F03               	moviw [3]fsr0
  3169  068C  00E3               	movwf	??_sprintf+5
  3170  068D  0863               	movf	??_sprintf+5,w
  3171  068E  0021               	movlb	1	; select bank1
  3172  068F  022B               	subwf	(sprintf@val+3)^(0+128),w
  3173  0690  1D03               	skipz
  3174  0691  2EA2               	goto	u4065
  3175  0692  0020               	movlb	0	; select bank0
  3176  0693  0862               	movf	??_sprintf+4,w
  3177  0694  0021               	movlb	1	; select bank1
  3178  0695  022A               	subwf	(sprintf@val+2)^(0+128),w
  3179  0696  1D03               	skipz
  3180  0697  2EA2               	goto	u4065
  3181  0698  0020               	movlb	0	; select bank0
  3182  0699  0861               	movf	??_sprintf+3,w
  3183  069A  0021               	movlb	1	; select bank1
  3184  069B  0229               	subwf	(sprintf@val+1)^(0+128),w
  3185  069C  1D03               	skipz
  3186  069D  2EA2               	goto	u4065
  3187  069E  0020               	movlb	0	; select bank0
  3188  069F  0860               	movf	??_sprintf+2,w
  3189  06A0  0021               	movlb	1	; select bank1
  3190  06A1  0228               	subwf	sprintf@val^(0+128),w
  3191  06A2                     u4065:	
  3192  06A2  1C03               	btfss	3,0
  3193  06A3  2EAE               	goto	l2790
  3194                           
  3195                           ;doprnt.c: 1307: break;
  3196  06A4  3001               	movlw	1
  3197  06A5  0020               	movlb	0	; select bank0
  3198  06A6  00DE               	movwf	??_sprintf
  3199  06A7  085E               	movf	??_sprintf,w
  3200  06A8  0021               	movlb	1	; select bank1
  3201  06A9  07B8               	addwf	sprintf@c^(0+128),f
  3202  06AA  300A               	movlw	10
  3203  06AB  0638               	xorwf	sprintf@c^(0+128),w
  3204  06AC  1D03               	btfss	3,2
  3205  06AD  2E77               	goto	l2784
  3206  06AE                     l2790:	
  3207                           
  3208                           ;doprnt.c: 1339: if(c < prec)
  3209  06AE  0838               	movf	sprintf@c^(0+128),w
  3210  06AF  0020               	movlb	0	; select bank0
  3211  06B0  00DE               	movwf	??_sprintf
  3212  06B1  01DF               	clrf	??_sprintf+1
  3213  06B2  1BDE               	btfsc	??_sprintf,7
  3214  06B3  03DF               	decf	??_sprintf+1,f
  3215  06B4  085F               	movf	??_sprintf+1,w
  3216  06B5  3A80               	xorlw	128
  3217  06B6  00E0               	movwf	??_sprintf+2
  3218  06B7  0021               	movlb	1	; select bank1
  3219  06B8  0836               	movf	(sprintf@prec+1)^(0+128),w
  3220  06B9  3A80               	xorlw	128
  3221  06BA  0020               	movlb	0	; select bank0
  3222  06BB  0260               	subwf	??_sprintf+2,w
  3223  06BC  1D03               	skipz
  3224  06BD  2EC2               	goto	u4085
  3225  06BE  0021               	movlb	1	; select bank1
  3226  06BF  0835               	movf	sprintf@prec^(0+128),w
  3227  06C0  0020               	movlb	0	; select bank0
  3228  06C1  025E               	subwf	??_sprintf,w
  3229  06C2                     u4085:	
  3230  06C2  1803               	skipnc
  3231  06C3  2ECC               	goto	l2794
  3232                           
  3233                           ;doprnt.c: 1340: c = prec;
  3234  06C4  0021               	movlb	1	; select bank1
  3235  06C5  0835               	movf	sprintf@prec^(0+128),w
  3236  06C6  0020               	movlb	0	; select bank0
  3237  06C7  00DE               	movwf	??_sprintf
  3238  06C8  085E               	movf	??_sprintf,w
  3239  06C9  0021               	movlb	1	; select bank1
  3240  06CA  00B8               	movwf	sprintf@c^(0+128)
  3241  06CB  2EE8               	goto	l189
  3242  06CC                     l2794:	
  3243                           
  3244                           ;doprnt.c: 1341: else if(prec < c)
  3245  06CC  0021               	movlb	1	; select bank1
  3246  06CD  0838               	movf	sprintf@c^(0+128),w
  3247  06CE  0020               	movlb	0	; select bank0
  3248  06CF  00DE               	movwf	??_sprintf
  3249  06D0  01DF               	clrf	??_sprintf+1
  3250  06D1  1BDE               	btfsc	??_sprintf,7
  3251  06D2  03DF               	decf	??_sprintf+1,f
  3252  06D3  0021               	movlb	1	; select bank1
  3253  06D4  0836               	movf	(sprintf@prec+1)^(0+128),w
  3254  06D5  3A80               	xorlw	128
  3255  06D6  0020               	movlb	0	; select bank0
  3256  06D7  00E0               	movwf	??_sprintf+2
  3257  06D8  085F               	movf	??_sprintf+1,w
  3258  06D9  3A80               	xorlw	128
  3259  06DA  0260               	subwf	??_sprintf+2,w
  3260  06DB  1D03               	skipz
  3261  06DC  2EE0               	goto	u4095
  3262  06DD  085E               	movf	??_sprintf,w
  3263  06DE  0021               	movlb	1	; select bank1
  3264  06DF  0235               	subwf	sprintf@prec^(0+128),w
  3265  06E0                     u4095:	
  3266  06E0  1803               	skipnc
  3267  06E1  2EE8               	goto	l189
  3268                           
  3269                           ;doprnt.c: 1342: prec = c;
  3270  06E2  0021               	movlb	1	; select bank1
  3271  06E3  0838               	movf	sprintf@c^(0+128),w
  3272  06E4  00B5               	movwf	sprintf@prec^(0+128)
  3273  06E5  01B6               	clrf	(sprintf@prec+1)^(0+128)
  3274  06E6  1BB5               	btfsc	sprintf@prec^(0+128),7
  3275  06E7  03B6               	decf	(sprintf@prec+1)^(0+128),f
  3276  06E8                     l189:	
  3277                           
  3278                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3279  06E8  0021               	movlb	1	; select bank1
  3280  06E9  0830               	movf	sprintf@width^(0+128),w
  3281  06EA  0431               	iorwf	(sprintf@width+1)^(0+128),w
  3282  06EB  1903               	btfsc	3,2
  3283  06EC  2EFF               	goto	l2802
  3284  06ED  3003               	movlw	3
  3285  06EE  052E               	andwf	sprintf@flag^(0+128),w
  3286  06EF  0020               	movlb	0	; select bank0
  3287  06F0  00DE               	movwf	??_sprintf
  3288  06F1  3000               	movlw	0
  3289  06F2  0021               	movlb	1	; select bank1
  3290  06F3  052F               	andwf	(sprintf@flag+1)^(0+128),w
  3291  06F4  0020               	movlb	0	; select bank0
  3292  06F5  00DF               	movwf	??_sprintf+1
  3293  06F6  085E               	movf	??_sprintf,w
  3294  06F7  045F               	iorwf	??_sprintf+1,w
  3295  06F8  1903               	btfsc	3,2
  3296  06F9  2EFF               	goto	l2802
  3297                           
  3298                           ;doprnt.c: 1346: width--;
  3299  06FA  30FF               	movlw	255
  3300  06FB  0021               	movlb	1	; select bank1
  3301  06FC  07B0               	addwf	sprintf@width^(0+128),f
  3302  06FD  30FF               	movlw	255
  3303  06FE  3DB1               	addwfc	(sprintf@width+1)^(0+128),f
  3304  06FF                     l2802:	
  3305                           
  3306                           ;doprnt.c: 1348: if(flag & 0x4000) {
  3307  06FF  0021               	movlb	1	; select bank1
  3308  0700  1F2F               	btfss	(sprintf@flag+1)^(0+128),6
  3309  0701  2F1B               	goto	l2810
  3310                           
  3311                           ;doprnt.c: 1349: if(width > prec)
  3312  0702  0836               	movf	(sprintf@prec+1)^(0+128),w
  3313  0703  3A80               	xorlw	128
  3314  0704  0020               	movlb	0	; select bank0
  3315  0705  00DE               	movwf	??_sprintf
  3316  0706  0021               	movlb	1	; select bank1
  3317  0707  0831               	movf	(sprintf@width+1)^(0+128),w
  3318  0708  3A80               	xorlw	128
  3319  0709  0020               	movlb	0	; select bank0
  3320  070A  025E               	subwf	??_sprintf,w
  3321  070B  1D03               	skipz
  3322  070C  2F10               	goto	u4135
  3323  070D  0021               	movlb	1	; select bank1
  3324  070E  0830               	movf	sprintf@width^(0+128),w
  3325  070F  0235               	subwf	sprintf@prec^(0+128),w
  3326  0710                     u4135:	
  3327  0710  1803               	skipnc
  3328  0711  2F18               	goto	l2808
  3329                           
  3330                           ;doprnt.c: 1350: width -= prec;
  3331  0712  0021               	movlb	1	; select bank1
  3332  0713  0835               	movf	sprintf@prec^(0+128),w
  3333  0714  02B0               	subwf	sprintf@width^(0+128),f
  3334  0715  0836               	movf	(sprintf@prec+1)^(0+128),w
  3335  0716  3BB1               	subwfb	(sprintf@width+1)^(0+128),f
  3336  0717  2F1B               	goto	l2810
  3337  0718                     l2808:	
  3338                           
  3339                           ;doprnt.c: 1351: else
  3340                           ;doprnt.c: 1352: width = 0;
  3341  0718  0021               	movlb	1	; select bank1
  3342  0719  01B0               	clrf	sprintf@width^(0+128)
  3343  071A  01B1               	clrf	(sprintf@width+1)^(0+128)
  3344  071B                     l2810:	
  3345                           
  3346                           ;doprnt.c: 1353: }
  3347                           ;doprnt.c: 1381: if(width > c)
  3348  071B  0838               	movf	sprintf@c^(0+128),w
  3349  071C  0020               	movlb	0	; select bank0
  3350  071D  00DE               	movwf	??_sprintf
  3351  071E  01DF               	clrf	??_sprintf+1
  3352  071F  1BDE               	btfsc	??_sprintf,7
  3353  0720  03DF               	decf	??_sprintf+1,f
  3354  0721  085F               	movf	??_sprintf+1,w
  3355  0722  3A80               	xorlw	128
  3356  0723  00E0               	movwf	??_sprintf+2
  3357  0724  0021               	movlb	1	; select bank1
  3358  0725  0831               	movf	(sprintf@width+1)^(0+128),w
  3359  0726  3A80               	xorlw	128
  3360  0727  0020               	movlb	0	; select bank0
  3361  0728  0260               	subwf	??_sprintf+2,w
  3362  0729  1D03               	skipz
  3363  072A  2F2F               	goto	u4145
  3364  072B  0021               	movlb	1	; select bank1
  3365  072C  0830               	movf	sprintf@width^(0+128),w
  3366  072D  0020               	movlb	0	; select bank0
  3367  072E  025E               	subwf	??_sprintf,w
  3368  072F                     u4145:	
  3369  072F  1803               	skipnc
  3370  0730  2F40               	goto	l2814
  3371                           
  3372                           ;doprnt.c: 1382: width -= c;
  3373  0731  0021               	movlb	1	; select bank1
  3374  0732  0838               	movf	sprintf@c^(0+128),w
  3375  0733  0020               	movlb	0	; select bank0
  3376  0734  00DE               	movwf	??_sprintf
  3377  0735  01DF               	clrf	??_sprintf+1
  3378  0736  1BDE               	btfsc	??_sprintf,7
  3379  0737  03DF               	decf	??_sprintf+1,f
  3380  0738  085E               	movf	??_sprintf,w
  3381  0739  0021               	movlb	1	; select bank1
  3382  073A  02B0               	subwf	sprintf@width^(0+128),f
  3383  073B  0020               	movlb	0	; select bank0
  3384  073C  085F               	movf	??_sprintf+1,w
  3385  073D  0021               	movlb	1	; select bank1
  3386  073E  3BB1               	subwfb	(sprintf@width+1)^(0+128),f
  3387  073F  2F43               	goto	l2816
  3388  0740                     l2814:	
  3389                           
  3390                           ;doprnt.c: 1383: else
  3391                           ;doprnt.c: 1384: width = 0;
  3392  0740  0021               	movlb	1	; select bank1
  3393  0741  01B0               	clrf	sprintf@width^(0+128)
  3394  0742  01B1               	clrf	(sprintf@width+1)^(0+128)
  3395  0743                     l2816:	
  3396                           
  3397                           ;doprnt.c: 1387: if(flag & 0x04) {
  3398  0743  1D2E               	btfss	sprintf@flag^(0+128),2
  3399  0744  2F79               	goto	l2832
  3400                           
  3401                           ;doprnt.c: 1392: if(flag & 0x03)
  3402  0745  3003               	movlw	3
  3403  0746  052E               	andwf	sprintf@flag^(0+128),w
  3404  0747  0020               	movlb	0	; select bank0
  3405  0748  00DE               	movwf	??_sprintf
  3406  0749  3000               	movlw	0
  3407  074A  0021               	movlb	1	; select bank1
  3408  074B  052F               	andwf	(sprintf@flag+1)^(0+128),w
  3409  074C  0020               	movlb	0	; select bank0
  3410  074D  00DF               	movwf	??_sprintf+1
  3411  074E  085E               	movf	??_sprintf,w
  3412  074F  045F               	iorwf	??_sprintf+1,w
  3413  0750  1903               	btfsc	3,2
  3414  0751  2F60               	goto	l2824
  3415                           
  3416                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  3417  0752  302D               	movlw	45
  3418  0753  00DE               	movwf	??_sprintf
  3419  0754  0021               	movlb	1	; select bank1
  3420  0755  0837               	movf	sprintf@sp^(0+128),w
  3421  0756  0086               	movwf	6
  3422  0757  0187               	clrf	7
  3423  0758  0020               	movlb	0	; select bank0
  3424  0759  085E               	movf	??_sprintf,w
  3425  075A  0081               	movwf	1
  3426  075B  3001               	movlw	1
  3427  075C  00DE               	movwf	??_sprintf
  3428  075D  085E               	movf	??_sprintf,w
  3429  075E  0021               	movlb	1	; select bank1
  3430  075F  07B7               	addwf	sprintf@sp^(0+128),f
  3431  0760                     l2824:	
  3432                           
  3433                           ;doprnt.c: 1415: if(width)
  3434  0760  0021               	movlb	1	; select bank1
  3435  0761                     L6:	
  3436  0761  0830               	movf	sprintf@width^(0+128),w
  3437  0762  0431               	iorwf	(sprintf@width+1)^(0+128),w
  3438  0763  1903               	btfsc	3,2
  3439  0764  2FAF               	goto	l2852
  3440                           
  3441                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  3442                           
  3443                           ;doprnt.c: 1416: do
  3444  0765  3030               	movlw	48
  3445  0766  0020               	movlb	0	; select bank0
  3446  0767  00DE               	movwf	??_sprintf
  3447  0768  0021               	movlb	1	; select bank1
  3448  0769  0837               	movf	sprintf@sp^(0+128),w
  3449  076A  0086               	movwf	6
  3450  076B  0187               	clrf	7
  3451  076C  0020               	movlb	0	; select bank0
  3452  076D  085E               	movf	??_sprintf,w
  3453  076E  0081               	movwf	1
  3454  076F  3001               	movlw	1
  3455  0770  00DE               	movwf	??_sprintf
  3456  0771  085E               	movf	??_sprintf,w
  3457  0772  0021               	movlb	1	; select bank1
  3458  0773  07B7               	addwf	sprintf@sp^(0+128),f
  3459                           
  3460                           ;doprnt.c: 1418: while(--width);
  3461  0774  30FF               	movlw	255
  3462  0775  07B0               	addwf	sprintf@width^(0+128),f
  3463  0776  30FF               	movlw	255
  3464  0777  3DB1               	addwfc	(sprintf@width+1)^(0+128),f
  3465  0778  2F61               	goto	L6
  3466  0779                     l2832:	
  3467                           ;doprnt.c: 1420: } else
  3468                           
  3469                           
  3470                           ;doprnt.c: 1422: {
  3471                           ;doprnt.c: 1424: if(width
  3472                           ;doprnt.c: 1428: )
  3473  0779  0830               	movf	sprintf@width^(0+128),w
  3474  077A  0431               	iorwf	(sprintf@width+1)^(0+128),w
  3475  077B  1903               	btfsc	3,2
  3476  077C  2F94               	goto	l2840
  3477  077D                     l2834:	
  3478                           ;doprnt.c: 1429: do
  3479                           
  3480                           
  3481                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  3482  077D  3020               	movlw	32
  3483  077E  0020               	movlb	0	; select bank0
  3484  077F  00DE               	movwf	??_sprintf
  3485  0780  0021               	movlb	1	; select bank1
  3486  0781  0837               	movf	sprintf@sp^(0+128),w
  3487  0782  0086               	movwf	6
  3488  0783  0187               	clrf	7
  3489  0784  0020               	movlb	0	; select bank0
  3490  0785  085E               	movf	??_sprintf,w
  3491  0786  0081               	movwf	1
  3492  0787  3001               	movlw	1
  3493  0788  00DE               	movwf	??_sprintf
  3494  0789  085E               	movf	??_sprintf,w
  3495  078A  0021               	movlb	1	; select bank1
  3496  078B  07B7               	addwf	sprintf@sp^(0+128),f
  3497                           
  3498                           ;doprnt.c: 1431: while(--width);
  3499  078C  30FF               	movlw	255
  3500  078D  07B0               	addwf	sprintf@width^(0+128),f
  3501  078E  30FF               	movlw	255
  3502  078F  3DB1               	addwfc	(sprintf@width+1)^(0+128),f
  3503  0790  0830               	movf	sprintf@width^(0+128),w
  3504  0791  0431               	iorwf	(sprintf@width+1)^(0+128),w
  3505  0792  1D03               	btfss	3,2
  3506  0793  2F7D               	goto	l2834
  3507  0794                     l2840:	
  3508                           
  3509                           ;doprnt.c: 1438: if(flag & 0x03)
  3510  0794  3003               	movlw	3
  3511  0795  052E               	andwf	sprintf@flag^(0+128),w
  3512  0796  0020               	movlb	0	; select bank0
  3513  0797  00DE               	movwf	??_sprintf
  3514  0798  3000               	movlw	0
  3515  0799  0021               	movlb	1	; select bank1
  3516  079A  052F               	andwf	(sprintf@flag+1)^(0+128),w
  3517  079B  0020               	movlb	0	; select bank0
  3518  079C  00DF               	movwf	??_sprintf+1
  3519  079D  085E               	movf	??_sprintf,w
  3520  079E  045F               	iorwf	??_sprintf+1,w
  3521  079F  1903               	btfsc	3,2
  3522  07A0  2FAF               	goto	l2852
  3523                           
  3524                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3525  07A1  302D               	movlw	45
  3526  07A2                     L8:	
  3527  07A2  00DE               	movwf	??_sprintf
  3528  07A3  0021               	movlb	1	; select bank1
  3529  07A4  0837               	movf	sprintf@sp^(0+128),w
  3530  07A5  0086               	movwf	6
  3531  07A6  0187               	clrf	7
  3532  07A7  0020               	movlb	0	; select bank0
  3533  07A8  085E               	movf	??_sprintf,w
  3534  07A9  0081               	movwf	1
  3535  07AA  3001               	movlw	1
  3536  07AB  00DE               	movwf	??_sprintf
  3537  07AC  085E               	movf	??_sprintf,w
  3538  07AD  0021               	movlb	1	; select bank1
  3539  07AE  07B7               	addwf	sprintf@sp^(0+128),f
  3540  07AF                     l2852:	
  3541  07AF  30FF               	movlw	255
  3542  07B0  0021               	movlb	1	; select bank1
  3543  07B1  07B5               	addwf	sprintf@prec^(0+128),f
  3544  07B2  30FF               	movlw	255
  3545  07B3  3DB6               	addwfc	(sprintf@prec+1)^(0+128),f
  3546  07B4  0A35               	incf	sprintf@prec^(0+128),w
  3547  07B5  1903               	btfsc	3,2
  3548  07B6  0A36               	incf	(sprintf@prec+1)^(0+128),w
  3549  07B7  1903               	btfsc	3,2
  3550  07B8  2886               	goto	l2854
  3551                           
  3552                           ;doprnt.c: 1478: {
  3553                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3554                           
  3555                           ;doprnt.c: 1469: }
  3556                           ;doprnt.c: 1474: while(prec--) {
  3557  07B9  3000               	movlw	0
  3558  07BA  0020               	movlb	0	; select bank0
  3559  07BB  00A3               	movwf	___llmod@divisor+3
  3560  07BC  3000               	movlw	0
  3561  07BD  00A2               	movwf	___llmod@divisor+2
  3562  07BE  3000               	movlw	0
  3563  07BF  00A1               	movwf	___llmod@divisor+1
  3564  07C0  300A               	movlw	10
  3565  07C1  00A0               	movwf	___llmod@divisor
  3566  07C2  0021               	movlb	1	; select bank1
  3567  07C3  0836               	movf	(sprintf@prec+1)^(0+128),w
  3568  07C4  0085               	movwf	5
  3569  07C5  0835               	movf	sprintf@prec^(0+128),w
  3570  07C6  0084               	movwf	4
  3571  07C7  3584               	lslf	4,f
  3572  07C8  0D85               	rlf	5,f
  3573  07C9  3584               	lslf	4,f
  3574  07CA  0D85               	rlf	5,f
  3575  07CB  3000               	movlw	low (_dpowers| (0+32768))
  3576  07CC  0784               	addwf	4,f
  3577  07CD  3098               	movlw	high (_dpowers| (0+32768))
  3578  07CE  3D85               	addwfc	5,f
  3579  07CF  3F00               	moviw [0]fsr0
  3580  07D0  00F0               	movwf	___lldiv@divisor
  3581  07D1  3F01               	moviw [1]fsr0
  3582  07D2  00F1               	movwf	___lldiv@divisor+1
  3583  07D3  3F02               	moviw [2]fsr0
  3584  07D4  00F2               	movwf	___lldiv@divisor+2
  3585  07D5  3F03               	moviw [3]fsr0
  3586  07D6  00F3               	movwf	___lldiv@divisor+3
  3587  07D7  082B               	movf	(sprintf@val+3)^(0+128),w
  3588  07D8  00F7               	movwf	___lldiv@dividend+3
  3589  07D9  082A               	movf	(sprintf@val+2)^(0+128),w
  3590  07DA  00F6               	movwf	___lldiv@dividend+2
  3591  07DB  0829               	movf	(sprintf@val+1)^(0+128),w
  3592  07DC  00F5               	movwf	___lldiv@dividend+1
  3593  07DD  0828               	movf	sprintf@val^(0+128),w
  3594  07DE  00F4               	movwf	___lldiv@dividend
  3595  07DF  3194  241F  3180   	fcall	___lldiv
  3596  07E2  0873               	movf	?___lldiv+3,w
  3597  07E3  0020               	movlb	0	; select bank0
  3598  07E4  00A7               	movwf	___llmod@dividend+3
  3599  07E5  0872               	movf	?___lldiv+2,w
  3600  07E6  00A6               	movwf	___llmod@dividend+2
  3601  07E7  0871               	movf	?___lldiv+1,w
  3602  07E8  00A5               	movwf	___llmod@dividend+1
  3603  07E9  0870               	movf	?___lldiv,w
  3604  07EA  00A4               	movwf	___llmod@dividend
  3605  07EB  3193  2397  3180   	fcall	___llmod
  3606  07EE  0020               	movlb	0	; select bank0
  3607  07EF  0820               	movf	?___llmod,w
  3608  07F0  3E30               	addlw	48
  3609  07F1  00DE               	movwf	??_sprintf
  3610  07F2  085E               	movf	??_sprintf,w
  3611  07F3  0021               	movlb	1	; select bank1
  3612  07F4  00B8               	movwf	sprintf@c^(0+128)
  3613                           
  3614                           ;doprnt.c: 1523: }
  3615                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3616  07F5  0838               	movf	sprintf@c^(0+128),w
  3617  07F6  0020               	movlb	0	; select bank0
  3618  07F7  2FA2               	goto	L8
  3619  07F8                     l2856:	
  3620                           ;doprnt.c: 1525: }
  3621                           ;doprnt.c: 1533: }
  3622                           ;doprnt.c: 1535: alldone:
  3623                           
  3624                           
  3625                           ;doprnt.c: 1538: *sp = 0;
  3626  07F8  0837               	movf	sprintf@sp^(0+128),w
  3627  07F9  0086               	movwf	6
  3628  07FA  0187               	clrf	7
  3629  07FB  0181               	clrf	1
  3630  07FC  0008               	return
  3631  07FD                     __end_of_sprintf:	
  3632                           ;doprnt.c: 1540: return 0;
  3633                           ;	Return value of _sprintf is never used
  3634                           
  3635                           
  3636                           	psect	text2
  3637  0DBC                     __ptext2:	
  3638 ;; *************** function _scale *****************
  3639 ;; Defined at:
  3640 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\doprnt.c"
  3641 ;; Parameters:    Size  Location     Type
  3642 ;;  scl             1    wreg     char 
  3643 ;; Auto vars:     Size  Location     Type
  3644 ;;  scl             1   32[BANK0 ] char 
  3645 ;; Return value:  Size  Location     Type
  3646 ;;                  3   24[BANK0 ] char 
  3647 ;; Registers used:
  3648 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3649 ;; Tracked objects:
  3650 ;;		On entry : 0/0
  3651 ;;		On exit  : 0/0
  3652 ;;		Unchanged: 0/0
  3653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3654 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3655 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3656 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3657 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3658 ;;Total ram usage:        9 bytes
  3659 ;; Hardware stack levels used:    1
  3660 ;; Hardware stack levels required when called:    2
  3661 ;; This function calls:
  3662 ;;		___awdiv
  3663 ;;		___awmod
  3664 ;;		___ftmul
  3665 ;;		___wmul
  3666 ;; This function is called by:
  3667 ;;		_sprintf
  3668 ;; This function uses a non-reentrant model
  3669 ;;
  3670                           
  3671                           
  3672                           ;psect for function _scale
  3673  0DBC                     _scale:	
  3674                           
  3675                           ;incstack = 0
  3676                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3677                           ;scale@scl stored from wreg
  3678  0DBC  0020               	movlb	0	; select bank0
  3679  0DBD  00C0               	movwf	scale@scl
  3680                           
  3681                           ;doprnt.c: 428: if(scl < 0) {
  3682  0DBE  1FC0               	btfss	scale@scl,7
  3683  0DBF  2EE1               	goto	l2196
  3684                           
  3685                           ;doprnt.c: 429: scl = -scl;
  3686  0DC0  09C0               	comf	scale@scl,f
  3687  0DC1  0AC0               	incf	scale@scl,f
  3688                           
  3689                           ;doprnt.c: 430: if(scl>=110)
  3690  0DC2  0840               	movf	scale@scl,w
  3691  0DC3  3A80               	xorlw	128
  3692  0DC4  3E12               	addlw	-238
  3693  0DC5  1C03               	skipc
  3694  0DC6  2E65               	goto	l2186
  3695                           
  3696                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3697  0DC7  300A               	movlw	10
  3698  0DC8  00F7               	movwf	___awdiv@divisor
  3699  0DC9  3000               	movlw	0
  3700  0DCA  00F8               	movwf	___awdiv@divisor+1
  3701  0DCB  0840               	movf	scale@scl,w
  3702  0DCC  00F2               	movwf	___awmod@dividend
  3703  0DCD  01F3               	clrf	___awmod@dividend+1
  3704  0DCE  1BF2               	btfsc	___awmod@dividend,7
  3705  0DCF  03F3               	decf	___awmod@dividend+1,f
  3706  0DD0  3064               	movlw	100
  3707  0DD1  00F0               	movwf	___awmod@divisor
  3708  0DD2  3000               	movlw	0
  3709  0DD3  00F1               	movwf	___awmod@divisor+1
  3710  0DD4  3193  23DA  318D   	fcall	___awmod
  3711  0DD7  0871               	movf	?___awmod+1,w
  3712  0DD8  00FA               	movwf	___awdiv@dividend+1
  3713  0DD9  0870               	movf	?___awmod,w
  3714  0DDA  00F9               	movwf	___awdiv@dividend
  3715  0DDB  3194  2471  318D   	fcall	___awdiv
  3716  0DDE  0877               	movf	?___awdiv,w
  3717  0DDF  3E09               	addlw	9
  3718  0DE0  0020               	movlb	0	; select bank0
  3719  0DE1  00A4               	movwf	___wmul@multiplier
  3720  0DE2  3000               	movlw	0
  3721  0DE3  3D78               	addwfc	?___awdiv+1,w
  3722  0DE4  00A5               	movwf	___wmul@multiplier+1
  3723  0DE5  3003               	movlw	3
  3724  0DE6  00A6               	movwf	___wmul@multiplicand
  3725  0DE7  3000               	movlw	0
  3726  0DE8  00A7               	movwf	___wmul@multiplicand+1
  3727  0DE9  3192  22A5  318D   	fcall	___wmul
  3728  0DEC  0020               	movlb	0	; select bank0
  3729  0DED  0825               	movf	?___wmul+1,w
  3730  0DEE  0085               	movwf	5
  3731  0DEF  0824               	movf	?___wmul,w
  3732  0DF0  0084               	movwf	4
  3733  0DF1  3028               	movlw	low (__npowers_| (0+32768))
  3734  0DF2  0784               	addwf	4,f
  3735  0DF3  3098               	movlw	high (__npowers_| (0+32768))
  3736  0DF4  3D85               	addwfc	5,f
  3737  0DF5  3F00               	moviw [0]fsr0
  3738  0DF6  00A8               	movwf	___ftmul@f1
  3739  0DF7  3F01               	moviw [1]fsr0
  3740  0DF8  00A9               	movwf	___ftmul@f1+1
  3741  0DF9  3F02               	moviw [2]fsr0
  3742  0DFA  00AA               	movwf	___ftmul@f1+2
  3743  0DFB  3064               	movlw	100
  3744  0DFC  00F7               	movwf	___awdiv@divisor
  3745  0DFD  3000               	movlw	0
  3746  0DFE  00F8               	movwf	___awdiv@divisor+1
  3747  0DFF  0840               	movf	scale@scl,w
  3748  0E00  00F9               	movwf	___awdiv@dividend
  3749  0E01  01FA               	clrf	___awdiv@dividend+1
  3750  0E02  1BF9               	btfsc	___awdiv@dividend,7
  3751  0E03  03FA               	decf	___awdiv@dividend+1,f
  3752  0E04  3194  2471  318D   	fcall	___awdiv
  3753  0E07  0877               	movf	?___awdiv,w
  3754  0E08  3E12               	addlw	18
  3755  0E09  0020               	movlb	0	; select bank0
  3756  0E0A  00A4               	movwf	___wmul@multiplier
  3757  0E0B  3000               	movlw	0
  3758  0E0C  3D78               	addwfc	?___awdiv+1,w
  3759  0E0D  00A5               	movwf	___wmul@multiplier+1
  3760  0E0E  3003               	movlw	3
  3761  0E0F  00A6               	movwf	___wmul@multiplicand
  3762  0E10  3000               	movlw	0
  3763  0E11  00A7               	movwf	___wmul@multiplicand+1
  3764  0E12  3192  22A5  318D   	fcall	___wmul
  3765  0E15  0020               	movlb	0	; select bank0
  3766  0E16  0825               	movf	?___wmul+1,w
  3767  0E17  0085               	movwf	5
  3768  0E18  0824               	movf	?___wmul,w
  3769  0E19  0084               	movwf	4
  3770  0E1A  3028               	movlw	low (__npowers_| (0+32768))
  3771  0E1B  0784               	addwf	4,f
  3772  0E1C  3098               	movlw	high (__npowers_| (0+32768))
  3773  0E1D  3D85               	addwfc	5,f
  3774  0E1E  3F00               	moviw [0]fsr0
  3775  0E1F  00AB               	movwf	___ftmul@f2
  3776  0E20  3F01               	moviw [1]fsr0
  3777  0E21  00AC               	movwf	___ftmul@f2+1
  3778  0E22  3F02               	moviw [2]fsr0
  3779  0E23  00AD               	movwf	___ftmul@f2+2
  3780  0E24  3197  274C  318D   	fcall	___ftmul
  3781  0E27  0020               	movlb	0	; select bank0
  3782  0E28  0828               	movf	?___ftmul,w
  3783  0E29  00BD               	movwf	_scale$722
  3784  0E2A  0829               	movf	?___ftmul+1,w
  3785  0E2B  00BE               	movwf	_scale$722+1
  3786  0E2C  082A               	movf	?___ftmul+2,w
  3787  0E2D  00BF               	movwf	_scale$722+2
  3788                           
  3789                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3790  0E2E  0840               	movf	scale@scl,w
  3791  0E2F  00F2               	movwf	___awmod@dividend
  3792  0E30  01F3               	clrf	___awmod@dividend+1
  3793  0E31  1BF2               	btfsc	___awmod@dividend,7
  3794  0E32  03F3               	decf	___awmod@dividend+1,f
  3795  0E33  300A               	movlw	10
  3796  0E34  00F0               	movwf	___awmod@divisor
  3797  0E35  3000               	movlw	0
  3798  0E36  00F1               	movwf	___awmod@divisor+1
  3799  0E37  3193  23DA  318D   	fcall	___awmod
  3800  0E3A  0871               	movf	?___awmod+1,w
  3801  0E3B  0020               	movlb	0	; select bank0
  3802  0E3C  00A5               	movwf	___wmul@multiplier+1
  3803  0E3D  0870               	movf	?___awmod,w
  3804  0E3E  00A4               	movwf	___wmul@multiplier
  3805  0E3F  3003               	movlw	3
  3806  0E40  00A6               	movwf	___wmul@multiplicand
  3807  0E41  3000               	movlw	0
  3808  0E42  00A7               	movwf	___wmul@multiplicand+1
  3809  0E43  3192  22A5  318D   	fcall	___wmul
  3810  0E46  0020               	movlb	0	; select bank0
  3811  0E47  0825               	movf	?___wmul+1,w
  3812  0E48  0085               	movwf	5
  3813  0E49  0824               	movf	?___wmul,w
  3814  0E4A  0084               	movwf	4
  3815  0E4B  3028               	movlw	low (__npowers_| (0+32768))
  3816  0E4C  0784               	addwf	4,f
  3817  0E4D  3098               	movlw	high (__npowers_| (0+32768))
  3818  0E4E  3D85               	addwfc	5,f
  3819  0E4F  3F00               	moviw [0]fsr0
  3820  0E50  00A8               	movwf	___ftmul@f1
  3821  0E51  3F01               	moviw [1]fsr0
  3822  0E52  00A9               	movwf	___ftmul@f1+1
  3823  0E53  3F02               	moviw [2]fsr0
  3824  0E54  00AA               	movwf	___ftmul@f1+2
  3825  0E55  083D               	movf	_scale$722,w
  3826  0E56  00AB               	movwf	___ftmul@f2
  3827  0E57  083E               	movf	_scale$722+1,w
  3828  0E58  00AC               	movwf	___ftmul@f2+1
  3829  0E59  083F               	movf	_scale$722+2,w
  3830  0E5A  00AD               	movwf	___ftmul@f2+2
  3831  0E5B  3197  274C         	fcall	___ftmul
  3832  0E5D  0020               	movlb	0	; select bank0
  3833  0E5E  0828               	movf	?___ftmul,w
  3834  0E5F  00B8               	movwf	?_scale
  3835  0E60  0829               	movf	?___ftmul+1,w
  3836  0E61  00B9               	movwf	?_scale+1
  3837  0E62  082A               	movf	?___ftmul+2,w
  3838  0E63  00BA               	movwf	?_scale+2
  3839  0E64  0008               	return
  3840  0E65                     l2186:	
  3841                           
  3842                           ;doprnt.c: 432: else if(scl > 10)
  3843  0E65  0840               	movf	scale@scl,w
  3844  0E66  3A80               	xorlw	128
  3845  0E67  3E75               	addlw	-139
  3846  0E68  1C03               	skipc
  3847  0E69  2EC4               	goto	l2192
  3848                           
  3849                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3850  0E6A  0840               	movf	scale@scl,w
  3851  0E6B  00F2               	movwf	___awmod@dividend
  3852  0E6C  01F3               	clrf	___awmod@dividend+1
  3853  0E6D  1BF2               	btfsc	___awmod@dividend,7
  3854  0E6E  03F3               	decf	___awmod@dividend+1,f
  3855  0E6F  300A               	movlw	10
  3856  0E70  00F0               	movwf	___awmod@divisor
  3857  0E71  3000               	movlw	0
  3858  0E72  00F1               	movwf	___awmod@divisor+1
  3859  0E73  3193  23DA  318D   	fcall	___awmod
  3860  0E76  0871               	movf	?___awmod+1,w
  3861  0E77  0020               	movlb	0	; select bank0
  3862  0E78  00A5               	movwf	___wmul@multiplier+1
  3863  0E79  0870               	movf	?___awmod,w
  3864  0E7A  00A4               	movwf	___wmul@multiplier
  3865  0E7B  3003               	movlw	3
  3866  0E7C  00A6               	movwf	___wmul@multiplicand
  3867  0E7D  3000               	movlw	0
  3868  0E7E  00A7               	movwf	___wmul@multiplicand+1
  3869  0E7F  3192  22A5  318D   	fcall	___wmul
  3870  0E82  0020               	movlb	0	; select bank0
  3871  0E83  0825               	movf	?___wmul+1,w
  3872  0E84  0085               	movwf	5
  3873  0E85  0824               	movf	?___wmul,w
  3874  0E86  0084               	movwf	4
  3875  0E87  3028               	movlw	low (__npowers_| (0+32768))
  3876  0E88  0784               	addwf	4,f
  3877  0E89  3098               	movlw	high (__npowers_| (0+32768))
  3878  0E8A  3D85               	addwfc	5,f
  3879  0E8B  3F00               	moviw [0]fsr0
  3880  0E8C  00A8               	movwf	___ftmul@f1
  3881  0E8D  3F01               	moviw [1]fsr0
  3882  0E8E  00A9               	movwf	___ftmul@f1+1
  3883  0E8F  3F02               	moviw [2]fsr0
  3884  0E90  00AA               	movwf	___ftmul@f1+2
  3885  0E91  300A               	movlw	10
  3886  0E92  00F7               	movwf	___awdiv@divisor
  3887  0E93  3000               	movlw	0
  3888  0E94  00F8               	movwf	___awdiv@divisor+1
  3889  0E95  0840               	movf	scale@scl,w
  3890  0E96  00F9               	movwf	___awdiv@dividend
  3891  0E97  01FA               	clrf	___awdiv@dividend+1
  3892  0E98  1BF9               	btfsc	___awdiv@dividend,7
  3893  0E99  03FA               	decf	___awdiv@dividend+1,f
  3894  0E9A  3194  2471  318D   	fcall	___awdiv
  3895  0E9D  0877               	movf	?___awdiv,w
  3896  0E9E  3E09               	addlw	9
  3897  0E9F  0020               	movlb	0	; select bank0
  3898  0EA0  00A4               	movwf	___wmul@multiplier
  3899  0EA1  3000               	movlw	0
  3900  0EA2  3D78               	addwfc	?___awdiv+1,w
  3901  0EA3  00A5               	movwf	___wmul@multiplier+1
  3902  0EA4  3003               	movlw	3
  3903  0EA5  00A6               	movwf	___wmul@multiplicand
  3904  0EA6  3000               	movlw	0
  3905  0EA7  00A7               	movwf	___wmul@multiplicand+1
  3906  0EA8  3192  22A5  318D   	fcall	___wmul
  3907  0EAB  0020               	movlb	0	; select bank0
  3908  0EAC  0825               	movf	?___wmul+1,w
  3909  0EAD  0085               	movwf	5
  3910  0EAE  0824               	movf	?___wmul,w
  3911  0EAF  0084               	movwf	4
  3912  0EB0  3028               	movlw	low (__npowers_| (0+32768))
  3913  0EB1  0784               	addwf	4,f
  3914  0EB2  3098               	movlw	high (__npowers_| (0+32768))
  3915  0EB3  3D85               	addwfc	5,f
  3916  0EB4  3F00               	moviw [0]fsr0
  3917  0EB5  00AB               	movwf	___ftmul@f2
  3918  0EB6  3F01               	moviw [1]fsr0
  3919  0EB7  00AC               	movwf	___ftmul@f2+1
  3920  0EB8  3F02               	moviw [2]fsr0
  3921  0EB9  00AD               	movwf	___ftmul@f2+2
  3922  0EBA  3197  274C         	fcall	___ftmul
  3923  0EBC  0020               	movlb	0	; select bank0
  3924  0EBD  0828               	movf	?___ftmul,w
  3925  0EBE  00B8               	movwf	?_scale
  3926  0EBF  0829               	movf	?___ftmul+1,w
  3927  0EC0  00B9               	movwf	?_scale+1
  3928  0EC1  082A               	movf	?___ftmul+2,w
  3929  0EC2  00BA               	movwf	?_scale+2
  3930  0EC3  0008               	return
  3931  0EC4                     l2192:	
  3932                           
  3933                           ;doprnt.c: 434: return _npowers_[scl];
  3934  0EC4  0840               	movf	scale@scl,w
  3935  0EC5  00BB               	movwf	??_scale
  3936  0EC6  01BC               	clrf	??_scale+1
  3937  0EC7  083B               	movf	??_scale,w
  3938  0EC8  00A4               	movwf	___wmul@multiplier
  3939  0EC9  083C               	movf	??_scale+1,w
  3940  0ECA  00A5               	movwf	___wmul@multiplier+1
  3941  0ECB  3003               	movlw	3
  3942  0ECC  00A6               	movwf	___wmul@multiplicand
  3943  0ECD  3000               	movlw	0
  3944  0ECE  00A7               	movwf	___wmul@multiplicand+1
  3945  0ECF  3192  22A5         	fcall	___wmul
  3946  0ED1  0020               	movlb	0	; select bank0
  3947  0ED2  0825               	movf	?___wmul+1,w
  3948  0ED3  0085               	movwf	5
  3949  0ED4  0824               	movf	?___wmul,w
  3950  0ED5  0084               	movwf	4
  3951  0ED6  3028               	movlw	low (__npowers_| (0+32768))
  3952  0ED7  0784               	addwf	4,f
  3953  0ED8  3098               	movlw	high (__npowers_| (0+32768))
  3954  0ED9  3D85               	addwfc	5,f
  3955  0EDA  3F00               	moviw [0]fsr0
  3956  0EDB  00B8               	movwf	?_scale
  3957  0EDC  3F01               	moviw [1]fsr0
  3958  0EDD  00B9               	movwf	?_scale+1
  3959  0EDE  3F02               	moviw [2]fsr0
  3960  0EDF  00BA               	movwf	?_scale+2
  3961  0EE0  0008               	return
  3962  0EE1                     l2196:	
  3963                           
  3964                           ;doprnt.c: 435: }
  3965                           ;doprnt.c: 436: if(scl>=110)
  3966  0EE1  0840               	movf	scale@scl,w
  3967  0EE2  3A80               	xorlw	128
  3968  0EE3  3E12               	addlw	-238
  3969  0EE4  1C03               	skipc
  3970  0EE5  2F84               	goto	l2204
  3971                           
  3972                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3973  0EE6  300A               	movlw	10
  3974  0EE7  00F7               	movwf	___awdiv@divisor
  3975  0EE8  3000               	movlw	0
  3976  0EE9  00F8               	movwf	___awdiv@divisor+1
  3977  0EEA  0840               	movf	scale@scl,w
  3978  0EEB  00F2               	movwf	___awmod@dividend
  3979  0EEC  01F3               	clrf	___awmod@dividend+1
  3980  0EED  1BF2               	btfsc	___awmod@dividend,7
  3981  0EEE  03F3               	decf	___awmod@dividend+1,f
  3982  0EEF  3064               	movlw	100
  3983  0EF0  00F0               	movwf	___awmod@divisor
  3984  0EF1  3000               	movlw	0
  3985  0EF2  00F1               	movwf	___awmod@divisor+1
  3986  0EF3  3193  23DA  318D   	fcall	___awmod
  3987  0EF6  0871               	movf	?___awmod+1,w
  3988  0EF7  00FA               	movwf	___awdiv@dividend+1
  3989  0EF8  0870               	movf	?___awmod,w
  3990  0EF9  00F9               	movwf	___awdiv@dividend
  3991  0EFA  3194  2471  318D   	fcall	___awdiv
  3992  0EFD  0877               	movf	?___awdiv,w
  3993  0EFE  3E09               	addlw	9
  3994  0EFF  0020               	movlb	0	; select bank0
  3995  0F00  00A4               	movwf	___wmul@multiplier
  3996  0F01  3000               	movlw	0
  3997  0F02  3D78               	addwfc	?___awdiv+1,w
  3998  0F03  00A5               	movwf	___wmul@multiplier+1
  3999  0F04  3003               	movlw	3
  4000  0F05  00A6               	movwf	___wmul@multiplicand
  4001  0F06  3000               	movlw	0
  4002  0F07  00A7               	movwf	___wmul@multiplicand+1
  4003  0F08  3192  22A5  318D   	fcall	___wmul
  4004  0F0B  0020               	movlb	0	; select bank0
  4005  0F0C  0825               	movf	?___wmul+1,w
  4006  0F0D  0085               	movwf	5
  4007  0F0E  0824               	movf	?___wmul,w
  4008  0F0F  0084               	movwf	4
  4009  0F10  304F               	movlw	low (__powers_| (0+32768))
  4010  0F11  0784               	addwf	4,f
  4011  0F12  3098               	movlw	high (__powers_| (0+32768))
  4012  0F13  3D85               	addwfc	5,f
  4013  0F14  3F00               	moviw [0]fsr0
  4014  0F15  00A8               	movwf	___ftmul@f1
  4015  0F16  3F01               	moviw [1]fsr0
  4016  0F17  00A9               	movwf	___ftmul@f1+1
  4017  0F18  3F02               	moviw [2]fsr0
  4018  0F19  00AA               	movwf	___ftmul@f1+2
  4019  0F1A  3064               	movlw	100
  4020  0F1B  00F7               	movwf	___awdiv@divisor
  4021  0F1C  3000               	movlw	0
  4022  0F1D  00F8               	movwf	___awdiv@divisor+1
  4023  0F1E  0840               	movf	scale@scl,w
  4024  0F1F  00F9               	movwf	___awdiv@dividend
  4025  0F20  01FA               	clrf	___awdiv@dividend+1
  4026  0F21  1BF9               	btfsc	___awdiv@dividend,7
  4027  0F22  03FA               	decf	___awdiv@dividend+1,f
  4028  0F23  3194  2471  318D   	fcall	___awdiv
  4029  0F26  0877               	movf	?___awdiv,w
  4030  0F27  3E12               	addlw	18
  4031  0F28  0020               	movlb	0	; select bank0
  4032  0F29  00A4               	movwf	___wmul@multiplier
  4033  0F2A  3000               	movlw	0
  4034  0F2B  3D78               	addwfc	?___awdiv+1,w
  4035  0F2C  00A5               	movwf	___wmul@multiplier+1
  4036  0F2D  3003               	movlw	3
  4037  0F2E  00A6               	movwf	___wmul@multiplicand
  4038  0F2F  3000               	movlw	0
  4039  0F30  00A7               	movwf	___wmul@multiplicand+1
  4040  0F31  3192  22A5  318D   	fcall	___wmul
  4041  0F34  0020               	movlb	0	; select bank0
  4042  0F35  0825               	movf	?___wmul+1,w
  4043  0F36  0085               	movwf	5
  4044  0F37  0824               	movf	?___wmul,w
  4045  0F38  0084               	movwf	4
  4046  0F39  304F               	movlw	low (__powers_| (0+32768))
  4047  0F3A  0784               	addwf	4,f
  4048  0F3B  3098               	movlw	high (__powers_| (0+32768))
  4049  0F3C  3D85               	addwfc	5,f
  4050  0F3D  3F00               	moviw [0]fsr0
  4051  0F3E  00AB               	movwf	___ftmul@f2
  4052  0F3F  3F01               	moviw [1]fsr0
  4053  0F40  00AC               	movwf	___ftmul@f2+1
  4054  0F41  3F02               	moviw [2]fsr0
  4055  0F42  00AD               	movwf	___ftmul@f2+2
  4056  0F43  3197  274C  318D   	fcall	___ftmul
  4057  0F46  0020               	movlb	0	; select bank0
  4058  0F47  0828               	movf	?___ftmul,w
  4059  0F48  00BD               	movwf	_scale$722
  4060  0F49  0829               	movf	?___ftmul+1,w
  4061  0F4A  00BE               	movwf	_scale$722+1
  4062  0F4B  082A               	movf	?___ftmul+2,w
  4063  0F4C  00BF               	movwf	_scale$722+2
  4064                           
  4065                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4066  0F4D  0840               	movf	scale@scl,w
  4067  0F4E  00F2               	movwf	___awmod@dividend
  4068  0F4F  01F3               	clrf	___awmod@dividend+1
  4069  0F50  1BF2               	btfsc	___awmod@dividend,7
  4070  0F51  03F3               	decf	___awmod@dividend+1,f
  4071  0F52  300A               	movlw	10
  4072  0F53  00F0               	movwf	___awmod@divisor
  4073  0F54  3000               	movlw	0
  4074  0F55  00F1               	movwf	___awmod@divisor+1
  4075  0F56  3193  23DA  318D   	fcall	___awmod
  4076  0F59  0871               	movf	?___awmod+1,w
  4077  0F5A  0020               	movlb	0	; select bank0
  4078  0F5B  00A5               	movwf	___wmul@multiplier+1
  4079  0F5C  0870               	movf	?___awmod,w
  4080  0F5D  00A4               	movwf	___wmul@multiplier
  4081  0F5E  3003               	movlw	3
  4082  0F5F  00A6               	movwf	___wmul@multiplicand
  4083  0F60  3000               	movlw	0
  4084  0F61  00A7               	movwf	___wmul@multiplicand+1
  4085  0F62  3192  22A5  318D   	fcall	___wmul
  4086  0F65  0020               	movlb	0	; select bank0
  4087  0F66  0825               	movf	?___wmul+1,w
  4088  0F67  0085               	movwf	5
  4089  0F68  0824               	movf	?___wmul,w
  4090  0F69  0084               	movwf	4
  4091  0F6A  304F               	movlw	low (__powers_| (0+32768))
  4092  0F6B  0784               	addwf	4,f
  4093  0F6C  3098               	movlw	high (__powers_| (0+32768))
  4094  0F6D  3D85               	addwfc	5,f
  4095  0F6E  3F00               	moviw [0]fsr0
  4096  0F6F  00A8               	movwf	___ftmul@f1
  4097  0F70  3F01               	moviw [1]fsr0
  4098  0F71  00A9               	movwf	___ftmul@f1+1
  4099  0F72  3F02               	moviw [2]fsr0
  4100  0F73  00AA               	movwf	___ftmul@f1+2
  4101  0F74  083D               	movf	_scale$722,w
  4102  0F75  00AB               	movwf	___ftmul@f2
  4103  0F76  083E               	movf	_scale$722+1,w
  4104  0F77  00AC               	movwf	___ftmul@f2+1
  4105  0F78  083F               	movf	_scale$722+2,w
  4106  0F79  00AD               	movwf	___ftmul@f2+2
  4107  0F7A  3197  274C         	fcall	___ftmul
  4108  0F7C  0020               	movlb	0	; select bank0
  4109  0F7D  0828               	movf	?___ftmul,w
  4110  0F7E  00B8               	movwf	?_scale
  4111  0F7F  0829               	movf	?___ftmul+1,w
  4112  0F80  00B9               	movwf	?_scale+1
  4113  0F81  082A               	movf	?___ftmul+2,w
  4114  0F82  00BA               	movwf	?_scale+2
  4115  0F83  0008               	return
  4116  0F84                     l2204:	
  4117                           
  4118                           ;doprnt.c: 438: else if(scl > 10)
  4119  0F84  0840               	movf	scale@scl,w
  4120  0F85  3A80               	xorlw	128
  4121  0F86  3E75               	addlw	-139
  4122  0F87  1C03               	skipc
  4123  0F88  2FE3               	goto	l2210
  4124                           
  4125                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4126  0F89  0840               	movf	scale@scl,w
  4127  0F8A  00F2               	movwf	___awmod@dividend
  4128  0F8B  01F3               	clrf	___awmod@dividend+1
  4129  0F8C  1BF2               	btfsc	___awmod@dividend,7
  4130  0F8D  03F3               	decf	___awmod@dividend+1,f
  4131  0F8E  300A               	movlw	10
  4132  0F8F  00F0               	movwf	___awmod@divisor
  4133  0F90  3000               	movlw	0
  4134  0F91  00F1               	movwf	___awmod@divisor+1
  4135  0F92  3193  23DA  318D   	fcall	___awmod
  4136  0F95  0871               	movf	?___awmod+1,w
  4137  0F96  0020               	movlb	0	; select bank0
  4138  0F97  00A5               	movwf	___wmul@multiplier+1
  4139  0F98  0870               	movf	?___awmod,w
  4140  0F99  00A4               	movwf	___wmul@multiplier
  4141  0F9A  3003               	movlw	3
  4142  0F9B  00A6               	movwf	___wmul@multiplicand
  4143  0F9C  3000               	movlw	0
  4144  0F9D  00A7               	movwf	___wmul@multiplicand+1
  4145  0F9E  3192  22A5  318D   	fcall	___wmul
  4146  0FA1  0020               	movlb	0	; select bank0
  4147  0FA2  0825               	movf	?___wmul+1,w
  4148  0FA3  0085               	movwf	5
  4149  0FA4  0824               	movf	?___wmul,w
  4150  0FA5  0084               	movwf	4
  4151  0FA6  304F               	movlw	low (__powers_| (0+32768))
  4152  0FA7  0784               	addwf	4,f
  4153  0FA8  3098               	movlw	high (__powers_| (0+32768))
  4154  0FA9  3D85               	addwfc	5,f
  4155  0FAA  3F00               	moviw [0]fsr0
  4156  0FAB  00A8               	movwf	___ftmul@f1
  4157  0FAC  3F01               	moviw [1]fsr0
  4158  0FAD  00A9               	movwf	___ftmul@f1+1
  4159  0FAE  3F02               	moviw [2]fsr0
  4160  0FAF  00AA               	movwf	___ftmul@f1+2
  4161  0FB0  300A               	movlw	10
  4162  0FB1  00F7               	movwf	___awdiv@divisor
  4163  0FB2  3000               	movlw	0
  4164  0FB3  00F8               	movwf	___awdiv@divisor+1
  4165  0FB4  0840               	movf	scale@scl,w
  4166  0FB5  00F9               	movwf	___awdiv@dividend
  4167  0FB6  01FA               	clrf	___awdiv@dividend+1
  4168  0FB7  1BF9               	btfsc	___awdiv@dividend,7
  4169  0FB8  03FA               	decf	___awdiv@dividend+1,f
  4170  0FB9  3194  2471  318D   	fcall	___awdiv
  4171  0FBC  0877               	movf	?___awdiv,w
  4172  0FBD  3E09               	addlw	9
  4173  0FBE  0020               	movlb	0	; select bank0
  4174  0FBF  00A4               	movwf	___wmul@multiplier
  4175  0FC0  3000               	movlw	0
  4176  0FC1  3D78               	addwfc	?___awdiv+1,w
  4177  0FC2  00A5               	movwf	___wmul@multiplier+1
  4178  0FC3  3003               	movlw	3
  4179  0FC4  00A6               	movwf	___wmul@multiplicand
  4180  0FC5  3000               	movlw	0
  4181  0FC6  00A7               	movwf	___wmul@multiplicand+1
  4182  0FC7  3192  22A5  318D   	fcall	___wmul
  4183  0FCA  0020               	movlb	0	; select bank0
  4184  0FCB  0825               	movf	?___wmul+1,w
  4185  0FCC  0085               	movwf	5
  4186  0FCD  0824               	movf	?___wmul,w
  4187  0FCE  0084               	movwf	4
  4188  0FCF  304F               	movlw	low (__powers_| (0+32768))
  4189  0FD0  0784               	addwf	4,f
  4190  0FD1  3098               	movlw	high (__powers_| (0+32768))
  4191  0FD2  3D85               	addwfc	5,f
  4192  0FD3  3F00               	moviw [0]fsr0
  4193  0FD4  00AB               	movwf	___ftmul@f2
  4194  0FD5  3F01               	moviw [1]fsr0
  4195  0FD6  00AC               	movwf	___ftmul@f2+1
  4196  0FD7  3F02               	moviw [2]fsr0
  4197  0FD8  00AD               	movwf	___ftmul@f2+2
  4198  0FD9  3197  274C         	fcall	___ftmul
  4199  0FDB  0020               	movlb	0	; select bank0
  4200  0FDC  0828               	movf	?___ftmul,w
  4201  0FDD  00B8               	movwf	?_scale
  4202  0FDE  0829               	movf	?___ftmul+1,w
  4203  0FDF  00B9               	movwf	?_scale+1
  4204  0FE0  082A               	movf	?___ftmul+2,w
  4205  0FE1  00BA               	movwf	?_scale+2
  4206  0FE2  0008               	return
  4207  0FE3                     l2210:	
  4208                           
  4209                           ;doprnt.c: 440: return _powers_[scl];
  4210  0FE3  0840               	movf	scale@scl,w
  4211  0FE4  00BB               	movwf	??_scale
  4212  0FE5  01BC               	clrf	??_scale+1
  4213  0FE6  083B               	movf	??_scale,w
  4214  0FE7  00A4               	movwf	___wmul@multiplier
  4215  0FE8  083C               	movf	??_scale+1,w
  4216  0FE9  00A5               	movwf	___wmul@multiplier+1
  4217  0FEA  3003               	movlw	3
  4218  0FEB  00A6               	movwf	___wmul@multiplicand
  4219  0FEC  3000               	movlw	0
  4220  0FED  00A7               	movwf	___wmul@multiplicand+1
  4221  0FEE  3192  22A5         	fcall	___wmul
  4222  0FF0  0020               	movlb	0	; select bank0
  4223  0FF1  0825               	movf	?___wmul+1,w
  4224  0FF2  0085               	movwf	5
  4225  0FF3  0824               	movf	?___wmul,w
  4226  0FF4  0084               	movwf	4
  4227  0FF5  304F               	movlw	low (__powers_| (0+32768))
  4228  0FF6  0784               	addwf	4,f
  4229  0FF7  3098               	movlw	high (__powers_| (0+32768))
  4230  0FF8  3D85               	addwfc	5,f
  4231  0FF9  3F00               	moviw [0]fsr0
  4232  0FFA  00B8               	movwf	?_scale
  4233  0FFB  3F01               	moviw [1]fsr0
  4234  0FFC  00B9               	movwf	?_scale+1
  4235  0FFD  3F02               	moviw [2]fsr0
  4236  0FFE  00BA               	movwf	?_scale+2
  4237  0FFF  0008               	return
  4238  1000                     __end_of_scale:	
  4239                           
  4240                           	psect	text3
  4241  000C                     __ptext3:	
  4242 ;; *************** function _isdigit *****************
  4243 ;; Defined at:
  4244 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\isdigit.c"
  4245 ;; Parameters:    Size  Location     Type
  4246 ;;  c               1    wreg     unsigned char 
  4247 ;; Auto vars:     Size  Location     Type
  4248 ;;  c               1    1[COMMON] unsigned char 
  4249 ;; Return value:  Size  Location     Type
  4250 ;;		None               void
  4251 ;; Registers used:
  4252 ;;		wreg, status,2, status,0
  4253 ;; Tracked objects:
  4254 ;;		On entry : 0/0
  4255 ;;		On exit  : 0/0
  4256 ;;		Unchanged: 0/0
  4257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4259 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4261 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4262 ;;Total ram usage:        2 bytes
  4263 ;; Hardware stack levels used:    1
  4264 ;; This function calls:
  4265 ;;		Nothing
  4266 ;; This function is called by:
  4267 ;;		_sprintf
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270                           
  4271                           
  4272                           ;psect for function _isdigit
  4273  000C                     _isdigit:	
  4274                           
  4275                           ;incstack = 0
  4276                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4277                           ;isdigit@c stored from wreg
  4278  000C  00F1               	movwf	isdigit@c
  4279  000D  01F0               	clrf	_isdigit$509
  4280  000E  303A               	movlw	58
  4281  000F  0271               	subwf	isdigit@c,w
  4282  0010  1803               	skipnc
  4283  0011  2818               	goto	l2222
  4284  0012  3030               	movlw	48
  4285  0013  0271               	subwf	isdigit@c,w
  4286  0014  1C03               	skipc
  4287  0015  2818               	goto	l2222
  4288  0016  01F0               	clrf	_isdigit$509
  4289  0017  0AF0               	incf	_isdigit$509,f
  4290  0018                     l2222:	
  4291  0018  0C70               	rrf	_isdigit$509,w
  4292  0019  0008               	return
  4293  001A                     __end_of_isdigit:	
  4294                           
  4295                           	psect	text4
  4296  0C57                     __ptext4:	
  4297 ;; *************** function _fround *****************
  4298 ;; Defined at:
  4299 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\doprnt.c"
  4300 ;; Parameters:    Size  Location     Type
  4301 ;;  prec            1    wreg     unsigned char 
  4302 ;; Auto vars:     Size  Location     Type
  4303 ;;  prec            1   37[BANK0 ] unsigned char 
  4304 ;; Return value:  Size  Location     Type
  4305 ;;                  3   24[BANK0 ] unsigned char 
  4306 ;; Registers used:
  4307 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4308 ;; Tracked objects:
  4309 ;;		On entry : 0/0
  4310 ;;		On exit  : 0/0
  4311 ;;		Unchanged: 0/0
  4312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4313 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4314 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4315 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4316 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4317 ;;Total ram usage:       14 bytes
  4318 ;; Hardware stack levels used:    1
  4319 ;; Hardware stack levels required when called:    2
  4320 ;; This function calls:
  4321 ;;		___awdiv
  4322 ;;		___awmod
  4323 ;;		___ftmul
  4324 ;;		___wmul
  4325 ;; This function is called by:
  4326 ;;		_sprintf
  4327 ;; This function uses a non-reentrant model
  4328 ;;
  4329                           
  4330                           
  4331                           ;psect for function _fround
  4332  0C57                     _fround:	
  4333                           
  4334                           ;incstack = 0
  4335                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4336                           ;fround@prec stored from wreg
  4337  0C57  0020               	movlb	0	; select bank0
  4338  0C58  00C5               	movwf	fround@prec
  4339                           
  4340                           ;doprnt.c: 413: if(prec>=110)
  4341  0C59  306E               	movlw	110
  4342  0C5A  0245               	subwf	fround@prec,w
  4343  0C5B  1C03               	skipc
  4344  0C5C  2D17               	goto	l2162
  4345                           
  4346                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4347  0C5D  300A               	movlw	10
  4348  0C5E  00F7               	movwf	___awdiv@divisor
  4349  0C5F  3000               	movlw	0
  4350  0C60  00F8               	movwf	___awdiv@divisor+1
  4351  0C61  0845               	movf	fround@prec,w
  4352  0C62  00BB               	movwf	??_fround
  4353  0C63  01BC               	clrf	??_fround+1
  4354  0C64  083B               	movf	??_fround,w
  4355  0C65  00F2               	movwf	___awmod@dividend
  4356  0C66  083C               	movf	??_fround+1,w
  4357  0C67  00F3               	movwf	___awmod@dividend+1
  4358  0C68  3064               	movlw	100
  4359  0C69  00F0               	movwf	___awmod@divisor
  4360  0C6A  3000               	movlw	0
  4361  0C6B  00F1               	movwf	___awmod@divisor+1
  4362  0C6C  3193  23DA  318C   	fcall	___awmod
  4363  0C6F  0871               	movf	?___awmod+1,w
  4364  0C70  00FA               	movwf	___awdiv@dividend+1
  4365  0C71  0870               	movf	?___awmod,w
  4366  0C72  00F9               	movwf	___awdiv@dividend
  4367  0C73  3194  2471  318C   	fcall	___awdiv
  4368  0C76  0877               	movf	?___awdiv,w
  4369  0C77  3E09               	addlw	9
  4370  0C78  0020               	movlb	0	; select bank0
  4371  0C79  00A4               	movwf	___wmul@multiplier
  4372  0C7A  3000               	movlw	0
  4373  0C7B  3D78               	addwfc	?___awdiv+1,w
  4374  0C7C  00A5               	movwf	___wmul@multiplier+1
  4375  0C7D  3003               	movlw	3
  4376  0C7E  00A6               	movwf	___wmul@multiplicand
  4377  0C7F  3000               	movlw	0
  4378  0C80  00A7               	movwf	___wmul@multiplicand+1
  4379  0C81  3192  22A5  318C   	fcall	___wmul
  4380  0C84  0020               	movlb	0	; select bank0
  4381  0C85  0825               	movf	?___wmul+1,w
  4382  0C86  0085               	movwf	5
  4383  0C87  0824               	movf	?___wmul,w
  4384  0C88  0084               	movwf	4
  4385  0C89  3028               	movlw	low (__npowers_| (0+32768))
  4386  0C8A  0784               	addwf	4,f
  4387  0C8B  3098               	movlw	high (__npowers_| (0+32768))
  4388  0C8C  3D85               	addwfc	5,f
  4389  0C8D  3F00               	moviw [0]fsr0
  4390  0C8E  00A8               	movwf	___ftmul@f1
  4391  0C8F  3F01               	moviw [1]fsr0
  4392  0C90  00A9               	movwf	___ftmul@f1+1
  4393  0C91  3F02               	moviw [2]fsr0
  4394  0C92  00AA               	movwf	___ftmul@f1+2
  4395  0C93  3064               	movlw	100
  4396  0C94  00F7               	movwf	___awdiv@divisor
  4397  0C95  3000               	movlw	0
  4398  0C96  00F8               	movwf	___awdiv@divisor+1
  4399  0C97  0845               	movf	fround@prec,w
  4400  0C98  00BD               	movwf	??_fround+2
  4401  0C99  01BE               	clrf	??_fround+3
  4402  0C9A  083D               	movf	??_fround+2,w
  4403  0C9B  00F9               	movwf	___awdiv@dividend
  4404  0C9C  083E               	movf	??_fround+3,w
  4405  0C9D  00FA               	movwf	___awdiv@dividend+1
  4406  0C9E  3194  2471  318C   	fcall	___awdiv
  4407  0CA1  0877               	movf	?___awdiv,w
  4408  0CA2  3E12               	addlw	18
  4409  0CA3  0020               	movlb	0	; select bank0
  4410  0CA4  00A4               	movwf	___wmul@multiplier
  4411  0CA5  3000               	movlw	0
  4412  0CA6  3D78               	addwfc	?___awdiv+1,w
  4413  0CA7  00A5               	movwf	___wmul@multiplier+1
  4414  0CA8  3003               	movlw	3
  4415  0CA9  00A6               	movwf	___wmul@multiplicand
  4416  0CAA  3000               	movlw	0
  4417  0CAB  00A7               	movwf	___wmul@multiplicand+1
  4418  0CAC  3192  22A5  318C   	fcall	___wmul
  4419  0CAF  0020               	movlb	0	; select bank0
  4420  0CB0  0825               	movf	?___wmul+1,w
  4421  0CB1  0085               	movwf	5
  4422  0CB2  0824               	movf	?___wmul,w
  4423  0CB3  0084               	movwf	4
  4424  0CB4  3028               	movlw	low (__npowers_| (0+32768))
  4425  0CB5  0784               	addwf	4,f
  4426  0CB6  3098               	movlw	high (__npowers_| (0+32768))
  4427  0CB7  3D85               	addwfc	5,f
  4428  0CB8  3F00               	moviw [0]fsr0
  4429  0CB9  00AB               	movwf	___ftmul@f2
  4430  0CBA  3F01               	moviw [1]fsr0
  4431  0CBB  00AC               	movwf	___ftmul@f2+1
  4432  0CBC  3F02               	moviw [2]fsr0
  4433  0CBD  00AD               	movwf	___ftmul@f2+2
  4434  0CBE  3197  274C  318C   	fcall	___ftmul
  4435  0CC1  0020               	movlb	0	; select bank0
  4436  0CC2  0828               	movf	?___ftmul,w
  4437  0CC3  00C2               	movwf	_fround$720
  4438  0CC4  0829               	movf	?___ftmul+1,w
  4439  0CC5  00C3               	movwf	_fround$720+1
  4440  0CC6  082A               	movf	?___ftmul+2,w
  4441  0CC7  00C4               	movwf	_fround$720+2
  4442                           
  4443                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4444  0CC8  0845               	movf	fround@prec,w
  4445  0CC9  00BB               	movwf	??_fround
  4446  0CCA  01BC               	clrf	??_fround+1
  4447  0CCB  083B               	movf	??_fround,w
  4448  0CCC  00F2               	movwf	___awmod@dividend
  4449  0CCD  083C               	movf	??_fround+1,w
  4450  0CCE  00F3               	movwf	___awmod@dividend+1
  4451  0CCF  300A               	movlw	10
  4452  0CD0  00F0               	movwf	___awmod@divisor
  4453  0CD1  3000               	movlw	0
  4454  0CD2  00F1               	movwf	___awmod@divisor+1
  4455  0CD3  3193  23DA  318C   	fcall	___awmod
  4456  0CD6  0871               	movf	?___awmod+1,w
  4457  0CD7  0020               	movlb	0	; select bank0
  4458  0CD8  00A5               	movwf	___wmul@multiplier+1
  4459  0CD9  0870               	movf	?___awmod,w
  4460  0CDA  00A4               	movwf	___wmul@multiplier
  4461  0CDB  3003               	movlw	3
  4462  0CDC  00A6               	movwf	___wmul@multiplicand
  4463  0CDD  3000               	movlw	0
  4464  0CDE  00A7               	movwf	___wmul@multiplicand+1
  4465  0CDF  3192  22A5  318C   	fcall	___wmul
  4466  0CE2  0020               	movlb	0	; select bank0
  4467  0CE3  0825               	movf	?___wmul+1,w
  4468  0CE4  0085               	movwf	5
  4469  0CE5  0824               	movf	?___wmul,w
  4470  0CE6  0084               	movwf	4
  4471  0CE7  3028               	movlw	low (__npowers_| (0+32768))
  4472  0CE8  0784               	addwf	4,f
  4473  0CE9  3098               	movlw	high (__npowers_| (0+32768))
  4474  0CEA  3D85               	addwfc	5,f
  4475  0CEB  3F00               	moviw [0]fsr0
  4476  0CEC  00A8               	movwf	___ftmul@f1
  4477  0CED  3F01               	moviw [1]fsr0
  4478  0CEE  00A9               	movwf	___ftmul@f1+1
  4479  0CEF  3F02               	moviw [2]fsr0
  4480  0CF0  00AA               	movwf	___ftmul@f1+2
  4481  0CF1  0842               	movf	_fround$720,w
  4482  0CF2  00AB               	movwf	___ftmul@f2
  4483  0CF3  0843               	movf	_fround$720+1,w
  4484  0CF4  00AC               	movwf	___ftmul@f2+1
  4485  0CF5  0844               	movf	_fround$720+2,w
  4486  0CF6  00AD               	movwf	___ftmul@f2+2
  4487  0CF7  3197  274C  318C   	fcall	___ftmul
  4488  0CFA  0020               	movlb	0	; select bank0
  4489  0CFB  0828               	movf	?___ftmul,w
  4490  0CFC  00BF               	movwf	_fround$721
  4491  0CFD  0829               	movf	?___ftmul+1,w
  4492  0CFE  00C0               	movwf	_fround$721+1
  4493  0CFF  082A               	movf	?___ftmul+2,w
  4494  0D00  00C1               	movwf	_fround$721+2
  4495                           
  4496                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4497  0D01  3000               	movlw	0
  4498  0D02  00A8               	movwf	___ftmul@f1
  4499  0D03  3000               	movlw	0
  4500  0D04  00A9               	movwf	___ftmul@f1+1
  4501  0D05  303F               	movlw	63
  4502  0D06  00AA               	movwf	___ftmul@f1+2
  4503  0D07  083F               	movf	_fround$721,w
  4504  0D08  00AB               	movwf	___ftmul@f2
  4505  0D09  0840               	movf	_fround$721+1,w
  4506  0D0A  00AC               	movwf	___ftmul@f2+1
  4507  0D0B  0841               	movf	_fround$721+2,w
  4508  0D0C  00AD               	movwf	___ftmul@f2+2
  4509  0D0D  3197  274C         	fcall	___ftmul
  4510  0D0F  0020               	movlb	0	; select bank0
  4511  0D10  0828               	movf	?___ftmul,w
  4512  0D11  00B8               	movwf	?_fround
  4513  0D12  0829               	movf	?___ftmul+1,w
  4514  0D13  00B9               	movwf	?_fround+1
  4515  0D14  082A               	movf	?___ftmul+2,w
  4516  0D15  00BA               	movwf	?_fround+2
  4517  0D16  0008               	return
  4518  0D17                     l2162:	
  4519                           
  4520                           ;doprnt.c: 415: else if(prec > 10)
  4521  0D17  300B               	movlw	11
  4522  0D18  0245               	subwf	fround@prec,w
  4523  0D19  1C03               	skipc
  4524  0D1A  2D8F               	goto	l2170
  4525                           
  4526                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4527  0D1B  0845               	movf	fround@prec,w
  4528  0D1C  00BB               	movwf	??_fround
  4529  0D1D  01BC               	clrf	??_fround+1
  4530  0D1E  083B               	movf	??_fround,w
  4531  0D1F  00F2               	movwf	___awmod@dividend
  4532  0D20  083C               	movf	??_fround+1,w
  4533  0D21  00F3               	movwf	___awmod@dividend+1
  4534  0D22  300A               	movlw	10
  4535  0D23  00F0               	movwf	___awmod@divisor
  4536  0D24  3000               	movlw	0
  4537  0D25  00F1               	movwf	___awmod@divisor+1
  4538  0D26  3193  23DA  318C   	fcall	___awmod
  4539  0D29  0871               	movf	?___awmod+1,w
  4540  0D2A  0020               	movlb	0	; select bank0
  4541  0D2B  00A5               	movwf	___wmul@multiplier+1
  4542  0D2C  0870               	movf	?___awmod,w
  4543  0D2D  00A4               	movwf	___wmul@multiplier
  4544  0D2E  3003               	movlw	3
  4545  0D2F  00A6               	movwf	___wmul@multiplicand
  4546  0D30  3000               	movlw	0
  4547  0D31  00A7               	movwf	___wmul@multiplicand+1
  4548  0D32  3192  22A5  318C   	fcall	___wmul
  4549  0D35  0020               	movlb	0	; select bank0
  4550  0D36  0825               	movf	?___wmul+1,w
  4551  0D37  0085               	movwf	5
  4552  0D38  0824               	movf	?___wmul,w
  4553  0D39  0084               	movwf	4
  4554  0D3A  3028               	movlw	low (__npowers_| (0+32768))
  4555  0D3B  0784               	addwf	4,f
  4556  0D3C  3098               	movlw	high (__npowers_| (0+32768))
  4557  0D3D  3D85               	addwfc	5,f
  4558  0D3E  3F00               	moviw [0]fsr0
  4559  0D3F  00A8               	movwf	___ftmul@f1
  4560  0D40  3F01               	moviw [1]fsr0
  4561  0D41  00A9               	movwf	___ftmul@f1+1
  4562  0D42  3F02               	moviw [2]fsr0
  4563  0D43  00AA               	movwf	___ftmul@f1+2
  4564  0D44  300A               	movlw	10
  4565  0D45  00F7               	movwf	___awdiv@divisor
  4566  0D46  3000               	movlw	0
  4567  0D47  00F8               	movwf	___awdiv@divisor+1
  4568  0D48  0845               	movf	fround@prec,w
  4569  0D49  00BD               	movwf	??_fround+2
  4570  0D4A  01BE               	clrf	??_fround+3
  4571  0D4B  083D               	movf	??_fround+2,w
  4572  0D4C  00F9               	movwf	___awdiv@dividend
  4573  0D4D  083E               	movf	??_fround+3,w
  4574  0D4E  00FA               	movwf	___awdiv@dividend+1
  4575  0D4F  3194  2471  318C   	fcall	___awdiv
  4576  0D52  0877               	movf	?___awdiv,w
  4577  0D53  3E09               	addlw	9
  4578  0D54  0020               	movlb	0	; select bank0
  4579  0D55  00A4               	movwf	___wmul@multiplier
  4580  0D56  3000               	movlw	0
  4581  0D57  3D78               	addwfc	?___awdiv+1,w
  4582  0D58  00A5               	movwf	___wmul@multiplier+1
  4583  0D59  3003               	movlw	3
  4584  0D5A  00A6               	movwf	___wmul@multiplicand
  4585  0D5B  3000               	movlw	0
  4586  0D5C  00A7               	movwf	___wmul@multiplicand+1
  4587  0D5D  3192  22A5  318C   	fcall	___wmul
  4588  0D60  0020               	movlb	0	; select bank0
  4589  0D61  0825               	movf	?___wmul+1,w
  4590  0D62  0085               	movwf	5
  4591  0D63  0824               	movf	?___wmul,w
  4592  0D64  0084               	movwf	4
  4593  0D65  3028               	movlw	low (__npowers_| (0+32768))
  4594  0D66  0784               	addwf	4,f
  4595  0D67  3098               	movlw	high (__npowers_| (0+32768))
  4596  0D68  3D85               	addwfc	5,f
  4597  0D69  3F00               	moviw [0]fsr0
  4598  0D6A  00AB               	movwf	___ftmul@f2
  4599  0D6B  3F01               	moviw [1]fsr0
  4600  0D6C  00AC               	movwf	___ftmul@f2+1
  4601  0D6D  3F02               	moviw [2]fsr0
  4602  0D6E  00AD               	movwf	___ftmul@f2+2
  4603  0D6F  3197  274C  318C   	fcall	___ftmul
  4604  0D72  0020               	movlb	0	; select bank0
  4605  0D73  0828               	movf	?___ftmul,w
  4606  0D74  00C2               	movwf	_fround$720
  4607  0D75  0829               	movf	?___ftmul+1,w
  4608  0D76  00C3               	movwf	_fround$720+1
  4609  0D77  082A               	movf	?___ftmul+2,w
  4610  0D78  00C4               	movwf	_fround$720+2
  4611                           
  4612                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4613  0D79  3000               	movlw	0
  4614  0D7A  00A8               	movwf	___ftmul@f1
  4615  0D7B  3000               	movlw	0
  4616  0D7C  00A9               	movwf	___ftmul@f1+1
  4617  0D7D  303F               	movlw	63
  4618  0D7E  00AA               	movwf	___ftmul@f1+2
  4619  0D7F  0842               	movf	_fround$720,w
  4620  0D80  00AB               	movwf	___ftmul@f2
  4621  0D81  0843               	movf	_fround$720+1,w
  4622  0D82  00AC               	movwf	___ftmul@f2+1
  4623  0D83  0844               	movf	_fround$720+2,w
  4624  0D84  00AD               	movwf	___ftmul@f2+2
  4625  0D85  3197  274C         	fcall	___ftmul
  4626  0D87  0020               	movlb	0	; select bank0
  4627  0D88  0828               	movf	?___ftmul,w
  4628  0D89  00B8               	movwf	?_fround
  4629  0D8A  0829               	movf	?___ftmul+1,w
  4630  0D8B  00B9               	movwf	?_fround+1
  4631  0D8C  082A               	movf	?___ftmul+2,w
  4632  0D8D  00BA               	movwf	?_fround+2
  4633  0D8E  0008               	return
  4634  0D8F                     l2170:	
  4635                           
  4636                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4637  0D8F  3000               	movlw	0
  4638  0D90  00A8               	movwf	___ftmul@f1
  4639  0D91  3000               	movlw	0
  4640  0D92  00A9               	movwf	___ftmul@f1+1
  4641  0D93  303F               	movlw	63
  4642  0D94  00AA               	movwf	___ftmul@f1+2
  4643  0D95  0845               	movf	fround@prec,w
  4644  0D96  00BB               	movwf	??_fround
  4645  0D97  01BC               	clrf	??_fround+1
  4646  0D98  083B               	movf	??_fround,w
  4647  0D99  00A4               	movwf	___wmul@multiplier
  4648  0D9A  083C               	movf	??_fround+1,w
  4649  0D9B  00A5               	movwf	___wmul@multiplier+1
  4650  0D9C  3003               	movlw	3
  4651  0D9D  00A6               	movwf	___wmul@multiplicand
  4652  0D9E  3000               	movlw	0
  4653  0D9F  00A7               	movwf	___wmul@multiplicand+1
  4654  0DA0  3192  22A5  318C   	fcall	___wmul
  4655  0DA3  0020               	movlb	0	; select bank0
  4656  0DA4  0825               	movf	?___wmul+1,w
  4657  0DA5  0085               	movwf	5
  4658  0DA6  0824               	movf	?___wmul,w
  4659  0DA7  0084               	movwf	4
  4660  0DA8  3028               	movlw	low (__npowers_| (0+32768))
  4661  0DA9  0784               	addwf	4,f
  4662  0DAA  3098               	movlw	high (__npowers_| (0+32768))
  4663  0DAB  3D85               	addwfc	5,f
  4664  0DAC  3F00               	moviw [0]fsr0
  4665  0DAD  00AB               	movwf	___ftmul@f2
  4666  0DAE  3F01               	moviw [1]fsr0
  4667  0DAF  00AC               	movwf	___ftmul@f2+1
  4668  0DB0  3F02               	moviw [2]fsr0
  4669  0DB1  00AD               	movwf	___ftmul@f2+2
  4670  0DB2  3197  274C         	fcall	___ftmul
  4671  0DB4  0020               	movlb	0	; select bank0
  4672  0DB5  0828               	movf	?___ftmul,w
  4673  0DB6  00B8               	movwf	?_fround
  4674  0DB7  0829               	movf	?___ftmul+1,w
  4675  0DB8  00B9               	movwf	?_fround+1
  4676  0DB9  082A               	movf	?___ftmul+2,w
  4677  0DBA  00BA               	movwf	?_fround+2
  4678  0DBB  0008               	return
  4679  0DBC                     __end_of_fround:	
  4680                           
  4681                           	psect	text5
  4682  12A5                     __ptext5:	
  4683 ;; *************** function ___wmul *****************
  4684 ;; Defined at:
  4685 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\Umul16.c"
  4686 ;; Parameters:    Size  Location     Type
  4687 ;;  multiplier      2    4[BANK0 ] unsigned int 
  4688 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  4689 ;; Auto vars:     Size  Location     Type
  4690 ;;  product         2   12[COMMON] unsigned int 
  4691 ;; Return value:  Size  Location     Type
  4692 ;;                  2    4[BANK0 ] unsigned int 
  4693 ;; Registers used:
  4694 ;;		wreg, status,2, status,0
  4695 ;; Tracked objects:
  4696 ;;		On entry : 0/0
  4697 ;;		On exit  : 0/0
  4698 ;;		Unchanged: 0/0
  4699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4700 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4701 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4703 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4704 ;;Total ram usage:        6 bytes
  4705 ;; Hardware stack levels used:    1
  4706 ;; This function calls:
  4707 ;;		Nothing
  4708 ;; This function is called by:
  4709 ;;		_fround
  4710 ;;		_scale
  4711 ;;		_sprintf
  4712 ;; This function uses a non-reentrant model
  4713 ;;
  4714                           
  4715                           
  4716                           ;psect for function ___wmul
  4717  12A5                     ___wmul:	
  4718                           
  4719                           ;incstack = 0
  4720                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4721  12A5  01FC               	clrf	___wmul@product
  4722  12A6  01FD               	clrf	___wmul@product+1
  4723  12A7                     l1892:	
  4724  12A7  0020               	movlb	0	; select bank0
  4725  12A8  1C24               	btfss	___wmul@multiplier,0
  4726  12A9  2AAE               	goto	l295
  4727  12AA  0826               	movf	___wmul@multiplicand,w
  4728  12AB  07FC               	addwf	___wmul@product,f
  4729  12AC  0827               	movf	___wmul@multiplicand+1,w
  4730  12AD  3DFD               	addwfc	___wmul@product+1,f
  4731  12AE                     l295:	
  4732  12AE  3001               	movlw	1
  4733  12AF                     u2315:	
  4734  12AF  35A6               	lslf	___wmul@multiplicand,f
  4735  12B0  0DA7               	rlf	___wmul@multiplicand+1,f
  4736  12B1  0B89               	decfsz	9,f
  4737  12B2  2AAF               	goto	u2315
  4738  12B3  3001               	movlw	1
  4739  12B4                     u2325:	
  4740  12B4  36A5               	lsrf	___wmul@multiplier+1,f
  4741  12B5  0CA4               	rrf	___wmul@multiplier,f
  4742  12B6  0B89               	decfsz	9,f
  4743  12B7  2AB4               	goto	u2325
  4744  12B8  0824               	movf	___wmul@multiplier,w
  4745  12B9  0425               	iorwf	___wmul@multiplier+1,w
  4746  12BA  1D03               	btfss	3,2
  4747  12BB  2AA7               	goto	l1892
  4748  12BC  087D               	movf	___wmul@product+1,w
  4749  12BD  00A5               	movwf	?___wmul+1
  4750  12BE  087C               	movf	___wmul@product,w
  4751  12BF  00A4               	movwf	?___wmul
  4752  12C0  0008               	return
  4753  12C1                     __end_of___wmul:	
  4754                           
  4755                           	psect	text6
  4756  174C                     __ptext6:	
  4757 ;; *************** function ___ftmul *****************
  4758 ;; Defined at:
  4759 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftmul.c"
  4760 ;; Parameters:    Size  Location     Type
  4761 ;;  f1              3    8[BANK0 ] float 
  4762 ;;  f2              3   11[BANK0 ] float 
  4763 ;; Auto vars:     Size  Location     Type
  4764 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
  4765 ;;  sign            1   23[BANK0 ] unsigned char 
  4766 ;;  cntr            1   22[BANK0 ] unsigned char 
  4767 ;;  exp             1   18[BANK0 ] unsigned char 
  4768 ;; Return value:  Size  Location     Type
  4769 ;;                  3    8[BANK0 ] float 
  4770 ;; Registers used:
  4771 ;;		wreg, status,2, status,0, pclath, cstack
  4772 ;; Tracked objects:
  4773 ;;		On entry : 0/0
  4774 ;;		On exit  : 0/0
  4775 ;;		Unchanged: 0/0
  4776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4777 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4778 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4779 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4780 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4781 ;;Total ram usage:       16 bytes
  4782 ;; Hardware stack levels used:    1
  4783 ;; Hardware stack levels required when called:    1
  4784 ;; This function calls:
  4785 ;;		___ftpack
  4786 ;; This function is called by:
  4787 ;;		_main
  4788 ;;		_fround
  4789 ;;		_scale
  4790 ;;		_sprintf
  4791 ;; This function uses a non-reentrant model
  4792 ;;
  4793                           
  4794                           
  4795                           ;psect for function ___ftmul
  4796  174C                     ___ftmul:	
  4797                           
  4798                           ;incstack = 0
  4799                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4800  174C  0020               	movlb	0	; select bank0
  4801  174D  0828               	movf	___ftmul@f1,w
  4802  174E  00AE               	movwf	??___ftmul
  4803  174F  0829               	movf	___ftmul@f1+1,w
  4804  1750  00AF               	movwf	??___ftmul+1
  4805  1751  082A               	movf	___ftmul@f1+2,w
  4806  1752  00B0               	movwf	??___ftmul+2
  4807  1753  1003               	clrc
  4808  1754  0D2F               	rlf	??___ftmul+1,w
  4809  1755  0D30               	rlf	??___ftmul+2,w
  4810  1756  00B1               	movwf	??___ftmul+3
  4811  1757  0831               	movf	??___ftmul+3,w
  4812  1758  00B2               	movwf	___ftmul@exp
  4813  1759  0832               	movf	___ftmul@exp,w
  4814  175A  1D03               	btfss	3,2
  4815  175B  2F63               	goto	l2062
  4816  175C  3000               	movlw	0
  4817  175D  00A8               	movwf	?___ftmul
  4818  175E  3000               	movlw	0
  4819  175F  00A9               	movwf	?___ftmul+1
  4820  1760  3000               	movlw	0
  4821  1761  00AA               	movwf	?___ftmul+2
  4822  1762  0008               	return
  4823  1763                     l2062:	
  4824  1763  082B               	movf	___ftmul@f2,w
  4825  1764  00AE               	movwf	??___ftmul
  4826  1765  082C               	movf	___ftmul@f2+1,w
  4827  1766  00AF               	movwf	??___ftmul+1
  4828  1767  082D               	movf	___ftmul@f2+2,w
  4829  1768  00B0               	movwf	??___ftmul+2
  4830  1769  1003               	clrc
  4831  176A  0D2F               	rlf	??___ftmul+1,w
  4832  176B  0D30               	rlf	??___ftmul+2,w
  4833  176C  00B1               	movwf	??___ftmul+3
  4834  176D  0831               	movf	??___ftmul+3,w
  4835  176E  00B7               	movwf	___ftmul@sign
  4836  176F  0837               	movf	___ftmul@sign,w
  4837  1770  1D03               	btfss	3,2
  4838  1771  2F79               	goto	l2068
  4839  1772  3000               	movlw	0
  4840  1773  00A8               	movwf	?___ftmul
  4841  1774  3000               	movlw	0
  4842  1775  00A9               	movwf	?___ftmul+1
  4843  1776  3000               	movlw	0
  4844  1777  00AA               	movwf	?___ftmul+2
  4845  1778  0008               	return
  4846  1779                     l2068:	
  4847  1779  0837               	movf	___ftmul@sign,w
  4848  177A  3E7B               	addlw	123
  4849  177B  00AE               	movwf	??___ftmul
  4850  177C  082E               	movf	??___ftmul,w
  4851  177D  07B2               	addwf	___ftmul@exp,f
  4852  177E  0828               	movf	___ftmul@f1,w
  4853  177F  00AE               	movwf	??___ftmul
  4854  1780  0829               	movf	___ftmul@f1+1,w
  4855  1781  00AF               	movwf	??___ftmul+1
  4856  1782  082A               	movf	___ftmul@f1+2,w
  4857  1783  00B0               	movwf	??___ftmul+2
  4858  1784  3010               	movlw	16
  4859  1785                     u2785:	
  4860  1785  36B0               	lsrf	??___ftmul+2,f
  4861  1786  0CAF               	rrf	??___ftmul+1,f
  4862  1787  0CAE               	rrf	??___ftmul,f
  4863  1788  0B89               	decfsz	9,f
  4864  1789  2F85               	goto	u2785
  4865  178A  082E               	movf	??___ftmul,w
  4866  178B  00B1               	movwf	??___ftmul+3
  4867  178C  0831               	movf	??___ftmul+3,w
  4868  178D  00B7               	movwf	___ftmul@sign
  4869  178E  082B               	movf	___ftmul@f2,w
  4870  178F  00AE               	movwf	??___ftmul
  4871  1790  082C               	movf	___ftmul@f2+1,w
  4872  1791  00AF               	movwf	??___ftmul+1
  4873  1792  082D               	movf	___ftmul@f2+2,w
  4874  1793  00B0               	movwf	??___ftmul+2
  4875  1794  3010               	movlw	16
  4876  1795                     u2795:	
  4877  1795  36B0               	lsrf	??___ftmul+2,f
  4878  1796  0CAF               	rrf	??___ftmul+1,f
  4879  1797  0CAE               	rrf	??___ftmul,f
  4880  1798  0B89               	decfsz	9,f
  4881  1799  2F95               	goto	u2795
  4882  179A  082E               	movf	??___ftmul,w
  4883  179B  00B1               	movwf	??___ftmul+3
  4884  179C  0831               	movf	??___ftmul+3,w
  4885  179D  06B7               	xorwf	___ftmul@sign,f
  4886  179E  3080               	movlw	128
  4887  179F  00AE               	movwf	??___ftmul
  4888  17A0  082E               	movf	??___ftmul,w
  4889  17A1  05B7               	andwf	___ftmul@sign,f
  4890  17A2  17A9               	bsf	___ftmul@f1+1,7
  4891  17A3  17AC               	bsf	___ftmul@f2+1,7
  4892  17A4  30FF               	movlw	255
  4893  17A5  05AB               	andwf	___ftmul@f2,f
  4894  17A6  30FF               	movlw	255
  4895  17A7  05AC               	andwf	___ftmul@f2+1,f
  4896  17A8  3000               	movlw	0
  4897  17A9  05AD               	andwf	___ftmul@f2+2,f
  4898  17AA  3000               	movlw	0
  4899  17AB  00B3               	movwf	___ftmul@f3_as_product
  4900  17AC  3000               	movlw	0
  4901  17AD  00B4               	movwf	___ftmul@f3_as_product+1
  4902  17AE  3000               	movlw	0
  4903  17AF  00B5               	movwf	___ftmul@f3_as_product+2
  4904  17B0  3007               	movlw	7
  4905  17B1  00AE               	movwf	??___ftmul
  4906  17B2  082E               	movf	??___ftmul,w
  4907  17B3  00B6               	movwf	___ftmul@cntr
  4908  17B4                     l2080:	
  4909  17B4  1C28               	btfss	___ftmul@f1,0
  4910  17B5  2FBC               	goto	l2084
  4911  17B6  082B               	movf	___ftmul@f2,w
  4912  17B7  07B3               	addwf	___ftmul@f3_as_product,f
  4913  17B8  082C               	movf	___ftmul@f2+1,w
  4914  17B9  3DB4               	addwfc	___ftmul@f3_as_product+1,f
  4915  17BA  082D               	movf	___ftmul@f2+2,w
  4916  17BB  3DB5               	addwfc	___ftmul@f3_as_product+2,f
  4917  17BC                     l2084:	
  4918  17BC  3001               	movlw	1
  4919  17BD                     u2815:	
  4920  17BD  36AA               	lsrf	___ftmul@f1+2,f
  4921  17BE  0CA9               	rrf	___ftmul@f1+1,f
  4922  17BF  0CA8               	rrf	___ftmul@f1,f
  4923  17C0  0B89               	decfsz	9,f
  4924  17C1  2FBD               	goto	u2815
  4925  17C2  3001               	movlw	1
  4926  17C3                     u2825:	
  4927  17C3  35AB               	lslf	___ftmul@f2,f
  4928  17C4  0DAC               	rlf	___ftmul@f2+1,f
  4929  17C5  0DAD               	rlf	___ftmul@f2+2,f
  4930  17C6  0B89               	decfsz	9,f
  4931  17C7  2FC3               	goto	u2825
  4932  17C8  3001               	movlw	1
  4933  17C9  02B6               	subwf	___ftmul@cntr,f
  4934  17CA  1D03               	btfss	3,2
  4935  17CB  2FB4               	goto	l2080
  4936  17CC  3009               	movlw	9
  4937  17CD  00AE               	movwf	??___ftmul
  4938  17CE  082E               	movf	??___ftmul,w
  4939  17CF  00B6               	movwf	___ftmul@cntr
  4940  17D0                     l2092:	
  4941  17D0  1C28               	btfss	___ftmul@f1,0
  4942  17D1  2FD8               	goto	l2096
  4943  17D2  082B               	movf	___ftmul@f2,w
  4944  17D3  07B3               	addwf	___ftmul@f3_as_product,f
  4945  17D4  082C               	movf	___ftmul@f2+1,w
  4946  17D5  3DB4               	addwfc	___ftmul@f3_as_product+1,f
  4947  17D6  082D               	movf	___ftmul@f2+2,w
  4948  17D7  3DB5               	addwfc	___ftmul@f3_as_product+2,f
  4949  17D8                     l2096:	
  4950  17D8  3001               	movlw	1
  4951  17D9                     u2855:	
  4952  17D9  36AA               	lsrf	___ftmul@f1+2,f
  4953  17DA  0CA9               	rrf	___ftmul@f1+1,f
  4954  17DB  0CA8               	rrf	___ftmul@f1,f
  4955  17DC  0B89               	decfsz	9,f
  4956  17DD  2FD9               	goto	u2855
  4957  17DE  3001               	movlw	1
  4958  17DF                     u2865:	
  4959  17DF  36B5               	lsrf	___ftmul@f3_as_product+2,f
  4960  17E0  0CB4               	rrf	___ftmul@f3_as_product+1,f
  4961  17E1  0CB3               	rrf	___ftmul@f3_as_product,f
  4962  17E2  0B89               	decfsz	9,f
  4963  17E3  2FDF               	goto	u2865
  4964  17E4  3001               	movlw	1
  4965  17E5  02B6               	subwf	___ftmul@cntr,f
  4966  17E6  1D03               	btfss	3,2
  4967  17E7  2FD0               	goto	l2092
  4968  17E8  0833               	movf	___ftmul@f3_as_product,w
  4969  17E9  00F0               	movwf	___ftpack@arg
  4970  17EA  0834               	movf	___ftmul@f3_as_product+1,w
  4971  17EB  00F1               	movwf	___ftpack@arg+1
  4972  17EC  0835               	movf	___ftmul@f3_as_product+2,w
  4973  17ED  00F2               	movwf	___ftpack@arg+2
  4974  17EE  0832               	movf	___ftmul@exp,w
  4975  17EF  00AE               	movwf	??___ftmul
  4976  17F0  082E               	movf	??___ftmul,w
  4977  17F1  00F3               	movwf	___ftpack@exp
  4978  17F2  0837               	movf	___ftmul@sign,w
  4979  17F3  00AF               	movwf	??___ftmul+1
  4980  17F4  082F               	movf	??___ftmul+1,w
  4981  17F5  00F4               	movwf	___ftpack@sign
  4982  17F6  3180  201A         	fcall	___ftpack
  4983  17F8  0870               	movf	?___ftpack,w
  4984  17F9  0020               	movlb	0	; select bank0
  4985  17FA  00A8               	movwf	?___ftmul
  4986  17FB  0871               	movf	?___ftpack+1,w
  4987  17FC  00A9               	movwf	?___ftmul+1
  4988  17FD  0872               	movf	?___ftpack+2,w
  4989  17FE  00AA               	movwf	?___ftmul+2
  4990  17FF  0008               	return
  4991  1800                     __end_of___ftmul:	
  4992                           
  4993                           	psect	text7
  4994  13DA                     __ptext7:	
  4995 ;; *************** function ___awmod *****************
  4996 ;; Defined at:
  4997 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\awmod.c"
  4998 ;; Parameters:    Size  Location     Type
  4999 ;;  divisor         2    0[COMMON] int 
  5000 ;;  dividend        2    2[COMMON] int 
  5001 ;; Auto vars:     Size  Location     Type
  5002 ;;  sign            1    6[COMMON] unsigned char 
  5003 ;;  counter         1    5[COMMON] unsigned char 
  5004 ;; Return value:  Size  Location     Type
  5005 ;;                  2    0[COMMON] int 
  5006 ;; Registers used:
  5007 ;;		wreg, status,2, status,0
  5008 ;; Tracked objects:
  5009 ;;		On entry : 0/0
  5010 ;;		On exit  : 0/0
  5011 ;;		Unchanged: 0/0
  5012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5013 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5014 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5015 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5016 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5017 ;;Total ram usage:        7 bytes
  5018 ;; Hardware stack levels used:    1
  5019 ;; This function calls:
  5020 ;;		Nothing
  5021 ;; This function is called by:
  5022 ;;		_fround
  5023 ;;		_scale
  5024 ;; This function uses a non-reentrant model
  5025 ;;
  5026                           
  5027                           
  5028                           ;psect for function ___awmod
  5029  13DA                     ___awmod:	
  5030                           
  5031                           ;incstack = 0
  5032                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5033  13DA  01F6               	clrf	___awmod@sign
  5034  13DB  1FF3               	btfss	___awmod@dividend+1,7
  5035  13DC  2BE4               	goto	l1956
  5036  13DD  09F2               	comf	___awmod@dividend,f
  5037  13DE  09F3               	comf	___awmod@dividend+1,f
  5038  13DF  0AF2               	incf	___awmod@dividend,f
  5039  13E0  1903               	skipnz
  5040  13E1  0AF3               	incf	___awmod@dividend+1,f
  5041  13E2  01F6               	clrf	___awmod@sign
  5042  13E3  0AF6               	incf	___awmod@sign,f
  5043  13E4                     l1956:	
  5044  13E4  1FF1               	btfss	___awmod@divisor+1,7
  5045  13E5  2BEB               	goto	l1960
  5046  13E6  09F0               	comf	___awmod@divisor,f
  5047  13E7  09F1               	comf	___awmod@divisor+1,f
  5048  13E8  0AF0               	incf	___awmod@divisor,f
  5049  13E9  1903               	skipnz
  5050  13EA  0AF1               	incf	___awmod@divisor+1,f
  5051  13EB                     l1960:	
  5052  13EB  0870               	movf	___awmod@divisor,w
  5053  13EC  0471               	iorwf	___awmod@divisor+1,w
  5054  13ED  1903               	btfsc	3,2
  5055  13EE  2C12               	goto	l1978
  5056  13EF  01F5               	clrf	___awmod@counter
  5057  13F0  0AF5               	incf	___awmod@counter,f
  5058  13F1                     l1968:	
  5059  13F1  1BF1               	btfsc	___awmod@divisor+1,7
  5060  13F2  2BFD               	goto	l1970
  5061  13F3  3001               	movlw	1
  5062  13F4                     u2475:	
  5063  13F4  35F0               	lslf	___awmod@divisor,f
  5064  13F5  0DF1               	rlf	___awmod@divisor+1,f
  5065  13F6  0B89               	decfsz	9,f
  5066  13F7  2BF4               	goto	u2475
  5067  13F8  3001               	movlw	1
  5068  13F9  00F4               	movwf	??___awmod
  5069  13FA  0874               	movf	??___awmod,w
  5070  13FB  07F5               	addwf	___awmod@counter,f
  5071  13FC  2BF1               	goto	l1968
  5072  13FD                     l1970:	
  5073  13FD  0871               	movf	___awmod@divisor+1,w
  5074  13FE  0273               	subwf	___awmod@dividend+1,w
  5075  13FF  1D03               	skipz
  5076  1400  2C03               	goto	u2495
  5077  1401  0870               	movf	___awmod@divisor,w
  5078  1402  0272               	subwf	___awmod@dividend,w
  5079  1403                     u2495:	
  5080  1403  1C03               	skipc
  5081  1404  2C09               	goto	l1974
  5082  1405  0870               	movf	___awmod@divisor,w
  5083  1406  02F2               	subwf	___awmod@dividend,f
  5084  1407  0871               	movf	___awmod@divisor+1,w
  5085  1408  3BF3               	subwfb	___awmod@dividend+1,f
  5086  1409                     l1974:	
  5087  1409  3001               	movlw	1
  5088  140A                     u2505:	
  5089  140A  36F1               	lsrf	___awmod@divisor+1,f
  5090  140B  0CF0               	rrf	___awmod@divisor,f
  5091  140C  0B89               	decfsz	9,f
  5092  140D  2C0A               	goto	u2505
  5093  140E  3001               	movlw	1
  5094  140F  02F5               	subwf	___awmod@counter,f
  5095  1410  1D03               	btfss	3,2
  5096  1411  2BFD               	goto	l1970
  5097  1412                     l1978:	
  5098  1412  0876               	movf	___awmod@sign,w
  5099  1413  1903               	btfsc	3,2
  5100  1414  2C1A               	goto	l1982
  5101  1415  09F2               	comf	___awmod@dividend,f
  5102  1416  09F3               	comf	___awmod@dividend+1,f
  5103  1417  0AF2               	incf	___awmod@dividend,f
  5104  1418  1903               	skipnz
  5105  1419  0AF3               	incf	___awmod@dividend+1,f
  5106  141A                     l1982:	
  5107  141A  0873               	movf	___awmod@dividend+1,w
  5108  141B  00F1               	movwf	?___awmod+1
  5109  141C  0872               	movf	___awmod@dividend,w
  5110  141D  00F0               	movwf	?___awmod
  5111  141E  0008               	return
  5112  141F                     __end_of___awmod:	
  5113                           
  5114                           	psect	text8
  5115  1471                     __ptext8:	
  5116 ;; *************** function ___awdiv *****************
  5117 ;; Defined at:
  5118 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\awdiv.c"
  5119 ;; Parameters:    Size  Location     Type
  5120 ;;  divisor         2    7[COMMON] int 
  5121 ;;  dividend        2    9[COMMON] int 
  5122 ;; Auto vars:     Size  Location     Type
  5123 ;;  quotient        2    2[BANK0 ] int 
  5124 ;;  sign            1    1[BANK0 ] unsigned char 
  5125 ;;  counter         1    0[BANK0 ] unsigned char 
  5126 ;; Return value:  Size  Location     Type
  5127 ;;                  2    7[COMMON] int 
  5128 ;; Registers used:
  5129 ;;		wreg, status,2, status,0
  5130 ;; Tracked objects:
  5131 ;;		On entry : 0/0
  5132 ;;		On exit  : 0/0
  5133 ;;		Unchanged: 0/0
  5134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5135 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5136 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5137 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5138 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5139 ;;Total ram usage:        9 bytes
  5140 ;; Hardware stack levels used:    1
  5141 ;; This function calls:
  5142 ;;		Nothing
  5143 ;; This function is called by:
  5144 ;;		_fround
  5145 ;;		_scale
  5146 ;;		_sprintf
  5147 ;; This function uses a non-reentrant model
  5148 ;;
  5149                           
  5150                           
  5151                           ;psect for function ___awdiv
  5152  1471                     ___awdiv:	
  5153                           
  5154                           ;incstack = 0
  5155                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5156  1471  0020               	movlb	0	; select bank0
  5157  1472  01A1               	clrf	___awdiv@sign
  5158  1473  1FF8               	btfss	___awdiv@divisor+1,7
  5159  1474  2C7C               	goto	l1912
  5160  1475  09F7               	comf	___awdiv@divisor,f
  5161  1476  09F8               	comf	___awdiv@divisor+1,f
  5162  1477  0AF7               	incf	___awdiv@divisor,f
  5163  1478  1903               	skipnz
  5164  1479  0AF8               	incf	___awdiv@divisor+1,f
  5165  147A  01A1               	clrf	___awdiv@sign
  5166  147B  0AA1               	incf	___awdiv@sign,f
  5167  147C                     l1912:	
  5168  147C  1FFA               	btfss	___awdiv@dividend+1,7
  5169  147D  2C87               	goto	l1918
  5170  147E  09F9               	comf	___awdiv@dividend,f
  5171  147F  09FA               	comf	___awdiv@dividend+1,f
  5172  1480  0AF9               	incf	___awdiv@dividend,f
  5173  1481  1903               	skipnz
  5174  1482  0AFA               	incf	___awdiv@dividend+1,f
  5175  1483  3001               	movlw	1
  5176  1484  00FB               	movwf	??___awdiv
  5177  1485  087B               	movf	??___awdiv,w
  5178  1486  06A1               	xorwf	___awdiv@sign,f
  5179  1487                     l1918:	
  5180  1487  01A2               	clrf	___awdiv@quotient
  5181  1488  01A3               	clrf	___awdiv@quotient+1
  5182  1489  0877               	movf	___awdiv@divisor,w
  5183  148A  0478               	iorwf	___awdiv@divisor+1,w
  5184  148B  1903               	btfsc	3,2
  5185  148C  2CB6               	goto	l1940
  5186  148D  01A0               	clrf	___awdiv@counter
  5187  148E  0AA0               	incf	___awdiv@counter,f
  5188  148F                     l1928:	
  5189  148F  1BF8               	btfsc	___awdiv@divisor+1,7
  5190  1490  2C9B               	goto	l1930
  5191  1491  3001               	movlw	1
  5192  1492                     u2375:	
  5193  1492  35F7               	lslf	___awdiv@divisor,f
  5194  1493  0DF8               	rlf	___awdiv@divisor+1,f
  5195  1494  0B89               	decfsz	9,f
  5196  1495  2C92               	goto	u2375
  5197  1496  3001               	movlw	1
  5198  1497  00FB               	movwf	??___awdiv
  5199  1498  087B               	movf	??___awdiv,w
  5200  1499  07A0               	addwf	___awdiv@counter,f
  5201  149A  2C8F               	goto	l1928
  5202  149B                     l1930:	
  5203  149B  3001               	movlw	1
  5204  149C                     u2395:	
  5205  149C  35A2               	lslf	___awdiv@quotient,f
  5206  149D  0DA3               	rlf	___awdiv@quotient+1,f
  5207  149E  0B89               	decfsz	9,f
  5208  149F  2C9C               	goto	u2395
  5209  14A0  0878               	movf	___awdiv@divisor+1,w
  5210  14A1  027A               	subwf	___awdiv@dividend+1,w
  5211  14A2  1D03               	skipz
  5212  14A3  2CA6               	goto	u2405
  5213  14A4  0877               	movf	___awdiv@divisor,w
  5214  14A5  0279               	subwf	___awdiv@dividend,w
  5215  14A6                     u2405:	
  5216  14A6  1C03               	skipc
  5217  14A7  2CAD               	goto	l1936
  5218  14A8  0877               	movf	___awdiv@divisor,w
  5219  14A9  02F9               	subwf	___awdiv@dividend,f
  5220  14AA  0878               	movf	___awdiv@divisor+1,w
  5221  14AB  3BFA               	subwfb	___awdiv@dividend+1,f
  5222  14AC  1422               	bsf	___awdiv@quotient,0
  5223  14AD                     l1936:	
  5224  14AD  3001               	movlw	1
  5225  14AE                     u2415:	
  5226  14AE  36F8               	lsrf	___awdiv@divisor+1,f
  5227  14AF  0CF7               	rrf	___awdiv@divisor,f
  5228  14B0  0B89               	decfsz	9,f
  5229  14B1  2CAE               	goto	u2415
  5230  14B2  3001               	movlw	1
  5231  14B3  02A0               	subwf	___awdiv@counter,f
  5232  14B4  1D03               	btfss	3,2
  5233  14B5  2C9B               	goto	l1930
  5234  14B6                     l1940:	
  5235  14B6  0821               	movf	___awdiv@sign,w
  5236  14B7  1903               	btfsc	3,2
  5237  14B8  2CBE               	goto	l1944
  5238  14B9  09A2               	comf	___awdiv@quotient,f
  5239  14BA  09A3               	comf	___awdiv@quotient+1,f
  5240  14BB  0AA2               	incf	___awdiv@quotient,f
  5241  14BC  1903               	skipnz
  5242  14BD  0AA3               	incf	___awdiv@quotient+1,f
  5243  14BE                     l1944:	
  5244  14BE  0823               	movf	___awdiv@quotient+1,w
  5245  14BF  00F8               	movwf	?___awdiv+1
  5246  14C0  0822               	movf	___awdiv@quotient,w
  5247  14C1  00F7               	movwf	?___awdiv
  5248  14C2  0008               	return
  5249  14C3                     __end_of___awdiv:	
  5250                           
  5251                           	psect	text9
  5252  0889                     __ptext9:	
  5253 ;; *************** function __tdiv_to_l_ *****************
  5254 ;; Defined at:
  5255 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftdivl.c"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;  f1              3    0[COMMON] float 
  5258 ;;  f2              3    3[COMMON] float 
  5259 ;; Auto vars:     Size  Location     Type
  5260 ;;  quot            4    0[BANK0 ] unsigned long 
  5261 ;;  exp1            1    5[BANK0 ] unsigned char 
  5262 ;;  cntr            1    4[BANK0 ] unsigned char 
  5263 ;; Return value:  Size  Location     Type
  5264 ;;                  4    0[COMMON] unsigned long 
  5265 ;; Registers used:
  5266 ;;		wreg, status,2, status,0
  5267 ;; Tracked objects:
  5268 ;;		On entry : 0/0
  5269 ;;		On exit  : 0/0
  5270 ;;		Unchanged: 0/0
  5271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5272 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5273 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5274 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5275 ;;      Totals:        10       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5276 ;;Total ram usage:       16 bytes
  5277 ;; Hardware stack levels used:    1
  5278 ;; This function calls:
  5279 ;;		Nothing
  5280 ;; This function is called by:
  5281 ;;		_sprintf
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           
  5286                           ;psect for function __tdiv_to_l_
  5287  0889                     __tdiv_to_l_:	
  5288                           
  5289                           ;incstack = 0
  5290                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  5291  0889  0870               	movf	__tdiv_to_l_@f1,w
  5292  088A  00F6               	movwf	??__tdiv_to_l_
  5293  088B  0871               	movf	__tdiv_to_l_@f1+1,w
  5294  088C  00F7               	movwf	??__tdiv_to_l_+1
  5295  088D  0872               	movf	__tdiv_to_l_@f1+2,w
  5296  088E  00F8               	movwf	??__tdiv_to_l_+2
  5297  088F  1003               	clrc
  5298  0890  0D77               	rlf	??__tdiv_to_l_+1,w
  5299  0891  0D78               	rlf	??__tdiv_to_l_+2,w
  5300  0892  00F9               	movwf	??__tdiv_to_l_+3
  5301  0893  0879               	movf	??__tdiv_to_l_+3,w
  5302  0894  0020               	movlb	0	; select bank0
  5303  0895  00A5               	movwf	__tdiv_to_l_@exp1
  5304  0896  0825               	movf	__tdiv_to_l_@exp1,w
  5305  0897  1D03               	btfss	3,2
  5306  0898  28A2               	goto	l2232
  5307  0899  3000               	movlw	0
  5308  089A  00F3               	movwf	?__tdiv_to_l_+3
  5309  089B  3000               	movlw	0
  5310  089C  00F2               	movwf	?__tdiv_to_l_+2
  5311  089D  3000               	movlw	0
  5312  089E  00F1               	movwf	?__tdiv_to_l_+1
  5313  089F  3000               	movlw	0
  5314  08A0  00F0               	movwf	?__tdiv_to_l_
  5315  08A1  0008               	return
  5316  08A2                     l2232:	
  5317  08A2  0873               	movf	__tdiv_to_l_@f2,w
  5318  08A3  00F6               	movwf	??__tdiv_to_l_
  5319  08A4  0874               	movf	__tdiv_to_l_@f2+1,w
  5320  08A5  00F7               	movwf	??__tdiv_to_l_+1
  5321  08A6  0875               	movf	__tdiv_to_l_@f2+2,w
  5322  08A7  00F8               	movwf	??__tdiv_to_l_+2
  5323  08A8  1003               	clrc
  5324  08A9  0D77               	rlf	??__tdiv_to_l_+1,w
  5325  08AA  0D78               	rlf	??__tdiv_to_l_+2,w
  5326  08AB  00F9               	movwf	??__tdiv_to_l_+3
  5327  08AC  0879               	movf	??__tdiv_to_l_+3,w
  5328  08AD  00A4               	movwf	__tdiv_to_l_@cntr
  5329  08AE  0824               	movf	__tdiv_to_l_@cntr,w
  5330  08AF  1D03               	btfss	3,2
  5331  08B0  28BA               	goto	l530
  5332  08B1  3000               	movlw	0
  5333  08B2  00F3               	movwf	?__tdiv_to_l_+3
  5334  08B3  3000               	movlw	0
  5335  08B4  00F2               	movwf	?__tdiv_to_l_+2
  5336  08B5  3000               	movlw	0
  5337  08B6  00F1               	movwf	?__tdiv_to_l_+1
  5338  08B7  3000               	movlw	0
  5339  08B8  00F0               	movwf	?__tdiv_to_l_
  5340  08B9  0008               	return
  5341  08BA                     l530:	
  5342  08BA  17F1               	bsf	__tdiv_to_l_@f1+1,7
  5343  08BB  30FF               	movlw	255
  5344  08BC  05F0               	andwf	__tdiv_to_l_@f1,f
  5345  08BD  30FF               	movlw	255
  5346  08BE  05F1               	andwf	__tdiv_to_l_@f1+1,f
  5347  08BF  3000               	movlw	0
  5348  08C0  05F2               	andwf	__tdiv_to_l_@f1+2,f
  5349  08C1  17F4               	bsf	__tdiv_to_l_@f2+1,7
  5350  08C2  30FF               	movlw	255
  5351  08C3  05F3               	andwf	__tdiv_to_l_@f2,f
  5352  08C4  30FF               	movlw	255
  5353  08C5  05F4               	andwf	__tdiv_to_l_@f2+1,f
  5354  08C6  3000               	movlw	0
  5355  08C7  05F5               	andwf	__tdiv_to_l_@f2+2,f
  5356  08C8  3000               	movlw	0
  5357  08C9  00A3               	movwf	__tdiv_to_l_@quot+3
  5358  08CA  3000               	movlw	0
  5359  08CB  00A2               	movwf	__tdiv_to_l_@quot+2
  5360  08CC  3000               	movlw	0
  5361  08CD  00A1               	movwf	__tdiv_to_l_@quot+1
  5362  08CE  3000               	movlw	0
  5363  08CF  00A0               	movwf	__tdiv_to_l_@quot
  5364  08D0  307F               	movlw	127
  5365  08D1  02A5               	subwf	__tdiv_to_l_@exp1,f
  5366  08D2  3098               	movlw	152
  5367  08D3  0724               	addwf	__tdiv_to_l_@cntr,w
  5368  08D4  00F6               	movwf	??__tdiv_to_l_
  5369  08D5  0876               	movf	??__tdiv_to_l_,w
  5370  08D6  02A5               	subwf	__tdiv_to_l_@exp1,f
  5371  08D7  3018               	movlw	24
  5372  08D8  00F6               	movwf	??__tdiv_to_l_
  5373  08D9  0876               	movf	??__tdiv_to_l_,w
  5374  08DA  00A4               	movwf	__tdiv_to_l_@cntr
  5375  08DB                     l2246:	
  5376  08DB  3001               	movlw	1
  5377  08DC                     u3115:	
  5378  08DC  35A0               	lslf	__tdiv_to_l_@quot,f
  5379  08DD  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  5380  08DE  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  5381  08DF  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  5382  08E0  0B89               	decfsz	9,f
  5383  08E1  28DC               	goto	u3115
  5384  08E2  0875               	movf	__tdiv_to_l_@f2+2,w
  5385  08E3  0272               	subwf	__tdiv_to_l_@f1+2,w
  5386  08E4  1D03               	skipz
  5387  08E5  28EC               	goto	u3125
  5388  08E6  0874               	movf	__tdiv_to_l_@f2+1,w
  5389  08E7  0271               	subwf	__tdiv_to_l_@f1+1,w
  5390  08E8  1D03               	skipz
  5391  08E9  28EC               	goto	u3125
  5392  08EA  0873               	movf	__tdiv_to_l_@f2,w
  5393  08EB  0270               	subwf	__tdiv_to_l_@f1,w
  5394  08EC                     u3125:	
  5395  08EC  1C03               	skipc
  5396  08ED  28F5               	goto	l2254
  5397  08EE  0873               	movf	__tdiv_to_l_@f2,w
  5398  08EF  02F0               	subwf	__tdiv_to_l_@f1,f
  5399  08F0  0874               	movf	__tdiv_to_l_@f2+1,w
  5400  08F1  3BF1               	subwfb	__tdiv_to_l_@f1+1,f
  5401  08F2  0875               	movf	__tdiv_to_l_@f2+2,w
  5402  08F3  3BF2               	subwfb	__tdiv_to_l_@f1+2,f
  5403  08F4  1420               	bsf	__tdiv_to_l_@quot,0
  5404  08F5                     l2254:	
  5405  08F5  3001               	movlw	1
  5406  08F6                     u3135:	
  5407  08F6  35F0               	lslf	__tdiv_to_l_@f1,f
  5408  08F7  0DF1               	rlf	__tdiv_to_l_@f1+1,f
  5409  08F8  0DF2               	rlf	__tdiv_to_l_@f1+2,f
  5410  08F9  0B89               	decfsz	9,f
  5411  08FA  28F6               	goto	u3135
  5412  08FB  3001               	movlw	1
  5413  08FC  02A4               	subwf	__tdiv_to_l_@cntr,f
  5414  08FD  1D03               	btfss	3,2
  5415  08FE  28DB               	goto	l2246
  5416  08FF  1FA5               	btfss	__tdiv_to_l_@exp1,7
  5417  0900  291D               	goto	l2266
  5418  0901  0825               	movf	__tdiv_to_l_@exp1,w
  5419  0902  3A80               	xorlw	128
  5420  0903  3E97               	addlw	151
  5421  0904  1803               	skipnc
  5422  0905  290F               	goto	l2264
  5423  0906  3000               	movlw	0
  5424  0907  00F3               	movwf	?__tdiv_to_l_+3
  5425  0908  3000               	movlw	0
  5426  0909  00F2               	movwf	?__tdiv_to_l_+2
  5427  090A  3000               	movlw	0
  5428  090B  00F1               	movwf	?__tdiv_to_l_+1
  5429  090C  3000               	movlw	0
  5430  090D  00F0               	movwf	?__tdiv_to_l_
  5431  090E  0008               	return
  5432  090F                     l2264:	
  5433  090F  3001               	movlw	1
  5434  0910                     u3175:	
  5435  0910  36A3               	lsrf	__tdiv_to_l_@quot+3,f
  5436  0911  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  5437  0912  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  5438  0913  0CA0               	rrf	__tdiv_to_l_@quot,f
  5439  0914  0B89               	decfsz	9,f
  5440  0915  2910               	goto	u3175
  5441  0916  3001               	movlw	1
  5442  0917  00F6               	movwf	??__tdiv_to_l_
  5443  0918  0876               	movf	??__tdiv_to_l_,w
  5444  0919  07A5               	addwf	__tdiv_to_l_@exp1,f
  5445  091A  1903               	btfsc	3,2
  5446  091B  2936               	goto	l2274
  5447  091C  290F               	goto	l2264
  5448  091D                     l2266:	
  5449  091D  3018               	movlw	24
  5450  091E  0225               	subwf	__tdiv_to_l_@exp1,w
  5451  091F  1C03               	skipc
  5452  0920  2933               	goto	l540
  5453  0921  3000               	movlw	0
  5454  0922  00F3               	movwf	?__tdiv_to_l_+3
  5455  0923  3000               	movlw	0
  5456  0924  00F2               	movwf	?__tdiv_to_l_+2
  5457  0925  3000               	movlw	0
  5458  0926  00F1               	movwf	?__tdiv_to_l_+1
  5459  0927  3000               	movlw	0
  5460  0928  00F0               	movwf	?__tdiv_to_l_
  5461  0929  0008               	return
  5462  092A                     l2272:	
  5463  092A  3001               	movlw	1
  5464  092B                     u3205:	
  5465  092B  35A0               	lslf	__tdiv_to_l_@quot,f
  5466  092C  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  5467  092D  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  5468  092E  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  5469  092F  0B89               	decfsz	9,f
  5470  0930  292B               	goto	u3205
  5471  0931  3001               	movlw	1
  5472  0932  02A5               	subwf	__tdiv_to_l_@exp1,f
  5473  0933                     l540:	
  5474  0933  0825               	movf	__tdiv_to_l_@exp1,w
  5475  0934  1D03               	btfss	3,2
  5476  0935  292A               	goto	l2272
  5477  0936                     l2274:	
  5478  0936  0823               	movf	__tdiv_to_l_@quot+3,w
  5479  0937  00F3               	movwf	?__tdiv_to_l_+3
  5480  0938  0822               	movf	__tdiv_to_l_@quot+2,w
  5481  0939  00F2               	movwf	?__tdiv_to_l_+2
  5482  093A  0821               	movf	__tdiv_to_l_@quot+1,w
  5483  093B  00F1               	movwf	?__tdiv_to_l_+1
  5484  093C  0820               	movf	__tdiv_to_l_@quot,w
  5485  093D  00F0               	movwf	?__tdiv_to_l_
  5486  093E  0008               	return
  5487  093F                     __end_of__tdiv_to_l_:	
  5488                           
  5489                           	psect	text10
  5490  0B3A                     __ptext10:	
  5491 ;; *************** function __div_to_l_ *****************
  5492 ;; Defined at:
  5493 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\fldivl.c"
  5494 ;; Parameters:    Size  Location     Type
  5495 ;;  f1              3    0[COMMON] unsigned long 
  5496 ;;  f2              3    3[COMMON] unsigned long 
  5497 ;; Auto vars:     Size  Location     Type
  5498 ;;  quot            4    0[BANK0 ] unsigned long 
  5499 ;;  exp1            1    5[BANK0 ] unsigned char 
  5500 ;;  cntr            1    4[BANK0 ] unsigned char 
  5501 ;; Return value:  Size  Location     Type
  5502 ;;                  4    0[COMMON] unsigned long 
  5503 ;; Registers used:
  5504 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5505 ;; Tracked objects:
  5506 ;;		On entry : 0/0
  5507 ;;		On exit  : 0/0
  5508 ;;		Unchanged: 0/0
  5509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5510 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5511 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5512 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5513 ;;      Totals:        14       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5514 ;;Total ram usage:       20 bytes
  5515 ;; Hardware stack levels used:    1
  5516 ;; This function calls:
  5517 ;;		Nothing
  5518 ;; This function is called by:
  5519 ;;		_sprintf
  5520 ;; This function uses a non-reentrant model
  5521 ;;
  5522                           
  5523                           
  5524                           ;psect for function __div_to_l_
  5525  0B3A                     __div_to_l_:	
  5526                           
  5527                           ;incstack = 0
  5528                           ; Regs used in __div_to_l_: [wreg+fsr1l+fsr1h+status,2+status,0]
  5529  0B3A  3070               	movlw	low (__div_to_l_@f1| 0)
  5530  0B3B  0086               	movwf	6
  5531  0B3C  0187               	clrf	7
  5532  0B3D  3F40               	moviw [0]fsr1
  5533  0B3E  00F6               	movwf	??__div_to_l_
  5534  0B3F  3F41               	moviw [1]fsr1
  5535  0B40  00F7               	movwf	??__div_to_l_+1
  5536  0B41  3F42               	moviw [2]fsr1
  5537  0B42  00F8               	movwf	??__div_to_l_+2
  5538  0B43  3F43               	moviw [3]fsr1
  5539  0B44  00F9               	movwf	??__div_to_l_+3
  5540  0B45  1003               	clrc
  5541  0B46  0D78               	rlf	??__div_to_l_+2,w
  5542  0B47  0D79               	rlf	??__div_to_l_+3,w
  5543  0B48  00FA               	movwf	??__div_to_l_+4
  5544  0B49  087A               	movf	??__div_to_l_+4,w
  5545  0B4A  0020               	movlb	0	; select bank0
  5546  0B4B  00A5               	movwf	__div_to_l_@exp1
  5547  0B4C  0825               	movf	__div_to_l_@exp1,w
  5548  0B4D  1D03               	btfss	3,2
  5549  0B4E  2B58               	goto	l2284
  5550  0B4F  3000               	movlw	0
  5551  0B50  00F3               	movwf	?__div_to_l_+3
  5552  0B51  3000               	movlw	0
  5553  0B52  00F2               	movwf	?__div_to_l_+2
  5554  0B53  3000               	movlw	0
  5555  0B54  00F1               	movwf	?__div_to_l_+1
  5556  0B55  3000               	movlw	0
  5557  0B56  00F0               	movwf	?__div_to_l_
  5558  0B57  0008               	return
  5559  0B58                     l2284:	
  5560  0B58  3073               	movlw	low (__div_to_l_@f2| 0)
  5561  0B59  0086               	movwf	6
  5562  0B5A  0187               	clrf	7
  5563  0B5B  3F40               	moviw [0]fsr1
  5564  0B5C  00F6               	movwf	??__div_to_l_
  5565  0B5D  3F41               	moviw [1]fsr1
  5566  0B5E  00F7               	movwf	??__div_to_l_+1
  5567  0B5F  3F42               	moviw [2]fsr1
  5568  0B60  00F8               	movwf	??__div_to_l_+2
  5569  0B61  3F43               	moviw [3]fsr1
  5570  0B62  00F9               	movwf	??__div_to_l_+3
  5571  0B63  1003               	clrc
  5572  0B64  0D78               	rlf	??__div_to_l_+2,w
  5573  0B65  0D79               	rlf	??__div_to_l_+3,w
  5574  0B66  00FA               	movwf	??__div_to_l_+4
  5575  0B67  087A               	movf	??__div_to_l_+4,w
  5576  0B68  00A4               	movwf	__div_to_l_@cntr
  5577  0B69  0824               	movf	__div_to_l_@cntr,w
  5578  0B6A  1D03               	btfss	3,2
  5579  0B6B  2B75               	goto	l2290
  5580  0B6C  3000               	movlw	0
  5581  0B6D  00F3               	movwf	?__div_to_l_+3
  5582  0B6E  3000               	movlw	0
  5583  0B6F  00F2               	movwf	?__div_to_l_+2
  5584  0B70  3000               	movlw	0
  5585  0B71  00F1               	movwf	?__div_to_l_+1
  5586  0B72  3000               	movlw	0
  5587  0B73  00F0               	movwf	?__div_to_l_
  5588  0B74  0008               	return
  5589  0B75                     l2290:	
  5590  0B75  3070               	movlw	low (__div_to_l_@f1| 0)
  5591  0B76  0086               	movwf	6
  5592  0B77  0187               	clrf	7
  5593  0B78  3000               	movlw	0
  5594  0B79  0481               	iorwf	1,f
  5595  0B7A  3141               	addfsr 1,1
  5596  0B7B  3000               	movlw	0
  5597  0B7C  0481               	iorwf	1,f
  5598  0B7D  3141               	addfsr 1,1
  5599  0B7E  3080               	movlw	128
  5600  0B7F  0481               	iorwf	1,f
  5601  0B80  3141               	addfsr 1,1
  5602  0B81  3000               	movlw	0
  5603  0B82  0481               	iorwf	1,f
  5604  0B83  3070               	movlw	low (__div_to_l_@f1| 0)
  5605  0B84  0086               	movwf	6
  5606  0B85  0187               	clrf	7
  5607  0B86  30FF               	movlw	255
  5608  0B87  0581               	andwf	1,f
  5609  0B88  3141               	addfsr 1,1
  5610  0B89  30FF               	movlw	255
  5611  0B8A  0581               	andwf	1,f
  5612  0B8B  3141               	addfsr 1,1
  5613  0B8C  30FF               	movlw	255
  5614  0B8D  0581               	andwf	1,f
  5615  0B8E  3141               	addfsr 1,1
  5616  0B8F  3000               	movlw	0
  5617  0B90  0581               	andwf	1,f
  5618  0B91  3073               	movlw	low (__div_to_l_@f2| 0)
  5619  0B92  0086               	movwf	6
  5620  0B93  0187               	clrf	7
  5621  0B94  3000               	movlw	0
  5622  0B95  0481               	iorwf	1,f
  5623  0B96  3141               	addfsr 1,1
  5624  0B97  3000               	movlw	0
  5625  0B98  0481               	iorwf	1,f
  5626  0B99  3141               	addfsr 1,1
  5627  0B9A  3080               	movlw	128
  5628  0B9B  0481               	iorwf	1,f
  5629  0B9C  3141               	addfsr 1,1
  5630  0B9D  3000               	movlw	0
  5631  0B9E  0481               	iorwf	1,f
  5632  0B9F  3073               	movlw	low (__div_to_l_@f2| 0)
  5633  0BA0  0086               	movwf	6
  5634  0BA1  0187               	clrf	7
  5635  0BA2  30FF               	movlw	255
  5636  0BA3  0581               	andwf	1,f
  5637  0BA4  3141               	addfsr 1,1
  5638  0BA5  30FF               	movlw	255
  5639  0BA6  0581               	andwf	1,f
  5640  0BA7  3141               	addfsr 1,1
  5641  0BA8  30FF               	movlw	255
  5642  0BA9  0581               	andwf	1,f
  5643  0BAA  3141               	addfsr 1,1
  5644  0BAB  3000               	movlw	0
  5645  0BAC  0581               	andwf	1,f
  5646  0BAD  3000               	movlw	0
  5647  0BAE  00A3               	movwf	__div_to_l_@quot+3
  5648  0BAF  3000               	movlw	0
  5649  0BB0  00A2               	movwf	__div_to_l_@quot+2
  5650  0BB1  3000               	movlw	0
  5651  0BB2  00A1               	movwf	__div_to_l_@quot+1
  5652  0BB3  3000               	movlw	0
  5653  0BB4  00A0               	movwf	__div_to_l_@quot
  5654  0BB5  307F               	movlw	127
  5655  0BB6  02A5               	subwf	__div_to_l_@exp1,f
  5656  0BB7  30A0               	movlw	160
  5657  0BB8  0724               	addwf	__div_to_l_@cntr,w
  5658  0BB9  00F6               	movwf	??__div_to_l_
  5659  0BBA  0876               	movf	??__div_to_l_,w
  5660  0BBB  02A5               	subwf	__div_to_l_@exp1,f
  5661  0BBC  3020               	movlw	32
  5662  0BBD  00F6               	movwf	??__div_to_l_
  5663  0BBE  0876               	movf	??__div_to_l_,w
  5664  0BBF  00A4               	movwf	__div_to_l_@cntr
  5665  0BC0                     l2300:	
  5666  0BC0  3001               	movlw	1
  5667  0BC1                     u3245:	
  5668  0BC1  35A0               	lslf	__div_to_l_@quot,f
  5669  0BC2  0DA1               	rlf	__div_to_l_@quot+1,f
  5670  0BC3  0DA2               	rlf	__div_to_l_@quot+2,f
  5671  0BC4  0DA3               	rlf	__div_to_l_@quot+3,f
  5672  0BC5  0B89               	decfsz	9,f
  5673  0BC6  2BC1               	goto	u3245
  5674  0BC7  3073               	movlw	low (__div_to_l_@f2| 0)
  5675  0BC8  0086               	movwf	6
  5676  0BC9  0187               	clrf	7
  5677  0BCA  3F40               	moviw [0]fsr1
  5678  0BCB  00F6               	movwf	??__div_to_l_
  5679  0BCC  3F41               	moviw [1]fsr1
  5680  0BCD  00F7               	movwf	??__div_to_l_+1
  5681  0BCE  3F42               	moviw [2]fsr1
  5682  0BCF  00F8               	movwf	??__div_to_l_+2
  5683  0BD0  3F43               	moviw [3]fsr1
  5684  0BD1  00F9               	movwf	??__div_to_l_+3
  5685  0BD2  3070               	movlw	low (__div_to_l_@f1| 0)
  5686  0BD3  0086               	movwf	6
  5687  0BD4  0187               	clrf	7
  5688  0BD5  3F40               	moviw [0]fsr1
  5689  0BD6  00FA               	movwf	??__div_to_l_+4
  5690  0BD7  3F41               	moviw [1]fsr1
  5691  0BD8  00FB               	movwf	??__div_to_l_+5
  5692  0BD9  3F42               	moviw [2]fsr1
  5693  0BDA  00FC               	movwf	??__div_to_l_+6
  5694  0BDB  3F43               	moviw [3]fsr1
  5695  0BDC  00FD               	movwf	??__div_to_l_+7
  5696  0BDD  0879               	movf	??__div_to_l_+3,w
  5697  0BDE  027D               	subwf	??__div_to_l_+7,w
  5698  0BDF  1D03               	skipz
  5699  0BE0  2BEB               	goto	u3255
  5700  0BE1  0878               	movf	??__div_to_l_+2,w
  5701  0BE2  027C               	subwf	??__div_to_l_+6,w
  5702  0BE3  1D03               	skipz
  5703  0BE4  2BEB               	goto	u3255
  5704  0BE5  0877               	movf	??__div_to_l_+1,w
  5705  0BE6  027B               	subwf	??__div_to_l_+5,w
  5706  0BE7  1D03               	skipz
  5707  0BE8  2BEB               	goto	u3255
  5708  0BE9  0876               	movf	??__div_to_l_,w
  5709  0BEA  027A               	subwf	??__div_to_l_+4,w
  5710  0BEB                     u3255:	
  5711  0BEB  1C03               	skipc
  5712  0BEC  2C08               	goto	l2308
  5713  0BED  3073               	movlw	low (__div_to_l_@f2| 0)
  5714  0BEE  0086               	movwf	6
  5715  0BEF  0187               	clrf	7
  5716  0BF0  3F40               	moviw [0]fsr1
  5717  0BF1  00F6               	movwf	??__div_to_l_
  5718  0BF2  3F41               	moviw [1]fsr1
  5719  0BF3  00F7               	movwf	??__div_to_l_+1
  5720  0BF4  3F42               	moviw [2]fsr1
  5721  0BF5  00F8               	movwf	??__div_to_l_+2
  5722  0BF6  3F43               	moviw [3]fsr1
  5723  0BF7  00F9               	movwf	??__div_to_l_+3
  5724  0BF8  3070               	movlw	low (__div_to_l_@f1| 0)
  5725  0BF9  0086               	movwf	6
  5726  0BFA  0187               	clrf	7
  5727  0BFB  0876               	movf	??__div_to_l_,w
  5728  0BFC  0281               	subwf	1,f
  5729  0BFD  3141               	addfsr 1,1
  5730  0BFE  0877               	movf	??__div_to_l_+1,w
  5731  0BFF  3B81               	subwfb	1,f
  5732  0C00  3141               	addfsr 1,1
  5733  0C01  0878               	movf	??__div_to_l_+2,w
  5734  0C02  3B81               	subwfb	1,f
  5735  0C03  3141               	addfsr 1,1
  5736  0C04  0879               	movf	??__div_to_l_+3,w
  5737  0C05  3B81               	subwfb	1,f
  5738  0C06  317D               	addfsr 1,-3
  5739  0C07  1420               	bsf	__div_to_l_@quot,0
  5740  0C08                     l2308:	
  5741  0C08  3070               	movlw	low (__div_to_l_@f1| 0)
  5742  0C09  0086               	movwf	6
  5743  0C0A  0187               	clrf	7
  5744  0C0B  3581               	lslf	1,f
  5745  0C0C  3141               	addfsr 1,1
  5746  0C0D  0D81               	rlf	1,f
  5747  0C0E  3141               	addfsr 1,1
  5748  0C0F  0D81               	rlf	1,f
  5749  0C10  3141               	addfsr 1,1
  5750  0C11  0D81               	rlf	1,f
  5751  0C12  317D               	addfsr 1,-3
  5752  0C13  3001               	movlw	1
  5753  0C14  02A4               	subwf	__div_to_l_@cntr,f
  5754  0C15  1D03               	btfss	3,2
  5755  0C16  2BC0               	goto	l2300
  5756  0C17  1FA5               	btfss	__div_to_l_@exp1,7
  5757  0C18  2C35               	goto	l2320
  5758  0C19  0825               	movf	__div_to_l_@exp1,w
  5759  0C1A  3A80               	xorlw	128
  5760  0C1B  3E9F               	addlw	159
  5761  0C1C  1803               	skipnc
  5762  0C1D  2C27               	goto	l2318
  5763  0C1E  3000               	movlw	0
  5764  0C1F  00F3               	movwf	?__div_to_l_+3
  5765  0C20  3000               	movlw	0
  5766  0C21  00F2               	movwf	?__div_to_l_+2
  5767  0C22  3000               	movlw	0
  5768  0C23  00F1               	movwf	?__div_to_l_+1
  5769  0C24  3000               	movlw	0
  5770  0C25  00F0               	movwf	?__div_to_l_
  5771  0C26  0008               	return
  5772  0C27                     l2318:	
  5773  0C27  3001               	movlw	1
  5774  0C28                     u3295:	
  5775  0C28  36A3               	lsrf	__div_to_l_@quot+3,f
  5776  0C29  0CA2               	rrf	__div_to_l_@quot+2,f
  5777  0C2A  0CA1               	rrf	__div_to_l_@quot+1,f
  5778  0C2B  0CA0               	rrf	__div_to_l_@quot,f
  5779  0C2C  0B89               	decfsz	9,f
  5780  0C2D  2C28               	goto	u3295
  5781  0C2E  3001               	movlw	1
  5782  0C2F  00F6               	movwf	??__div_to_l_
  5783  0C30  0876               	movf	??__div_to_l_,w
  5784  0C31  07A5               	addwf	__div_to_l_@exp1,f
  5785  0C32  1903               	btfsc	3,2
  5786  0C33  2C4E               	goto	l2328
  5787  0C34  2C27               	goto	l2318
  5788  0C35                     l2320:	
  5789  0C35  3020               	movlw	32
  5790  0C36  0225               	subwf	__div_to_l_@exp1,w
  5791  0C37  1C03               	skipc
  5792  0C38  2C4B               	goto	l461
  5793  0C39  3000               	movlw	0
  5794  0C3A  00F3               	movwf	?__div_to_l_+3
  5795  0C3B  3000               	movlw	0
  5796  0C3C  00F2               	movwf	?__div_to_l_+2
  5797  0C3D  3000               	movlw	0
  5798  0C3E  00F1               	movwf	?__div_to_l_+1
  5799  0C3F  3000               	movlw	0
  5800  0C40  00F0               	movwf	?__div_to_l_
  5801  0C41  0008               	return
  5802  0C42                     l2326:	
  5803  0C42  3001               	movlw	1
  5804  0C43                     u3325:	
  5805  0C43  35A0               	lslf	__div_to_l_@quot,f
  5806  0C44  0DA1               	rlf	__div_to_l_@quot+1,f
  5807  0C45  0DA2               	rlf	__div_to_l_@quot+2,f
  5808  0C46  0DA3               	rlf	__div_to_l_@quot+3,f
  5809  0C47  0B89               	decfsz	9,f
  5810  0C48  2C43               	goto	u3325
  5811  0C49  3001               	movlw	1
  5812  0C4A  02A5               	subwf	__div_to_l_@exp1,f
  5813  0C4B                     l461:	
  5814  0C4B  0825               	movf	__div_to_l_@exp1,w
  5815  0C4C  1D03               	btfss	3,2
  5816  0C4D  2C42               	goto	l2326
  5817  0C4E                     l2328:	
  5818  0C4E  0823               	movf	__div_to_l_@quot+3,w
  5819  0C4F  00F3               	movwf	?__div_to_l_+3
  5820  0C50  0822               	movf	__div_to_l_@quot+2,w
  5821  0C51  00F2               	movwf	?__div_to_l_+2
  5822  0C52  0821               	movf	__div_to_l_@quot+1,w
  5823  0C53  00F1               	movwf	?__div_to_l_+1
  5824  0C54  0820               	movf	__div_to_l_@quot,w
  5825  0C55  00F0               	movwf	?__div_to_l_
  5826  0C56  0008               	return
  5827  0C57                     __end_of__div_to_l_:	
  5828                           
  5829                           	psect	text11
  5830  12FF                     __ptext11:	
  5831 ;; *************** function ___lltoft *****************
  5832 ;; Defined at:
  5833 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\lltoft.c"
  5834 ;; Parameters:    Size  Location     Type
  5835 ;;  c               4    8[COMMON] unsigned long 
  5836 ;; Auto vars:     Size  Location     Type
  5837 ;;  exp             1   13[COMMON] unsigned char 
  5838 ;; Return value:  Size  Location     Type
  5839 ;;                  3    8[COMMON] float 
  5840 ;; Registers used:
  5841 ;;		wreg, status,2, status,0, pclath, cstack
  5842 ;; Tracked objects:
  5843 ;;		On entry : 0/0
  5844 ;;		On exit  : 0/0
  5845 ;;		Unchanged: 0/0
  5846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5847 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5848 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5849 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5850 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5851 ;;Total ram usage:        6 bytes
  5852 ;; Hardware stack levels used:    1
  5853 ;; Hardware stack levels required when called:    1
  5854 ;; This function calls:
  5855 ;;		___ftpack
  5856 ;; This function is called by:
  5857 ;;		_sprintf
  5858 ;; This function uses a non-reentrant model
  5859 ;;
  5860                           
  5861                           
  5862                           ;psect for function ___lltoft
  5863  12FF                     ___lltoft:	
  5864                           
  5865                           ;incstack = 0
  5866                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  5867  12FF  308E               	movlw	142
  5868  1300  00FC               	movwf	??___lltoft
  5869  1301  087C               	movf	??___lltoft,w
  5870  1302  00FD               	movwf	___lltoft@exp
  5871  1303                     l2458:	
  5872  1303  30FF               	movlw	255
  5873  1304  057B               	andwf	___lltoft@c+3,w
  5874  1305  1903               	btfsc	3,2
  5875  1306  2B13               	goto	l2460
  5876  1307  3001               	movlw	1
  5877  1308                     u3625:	
  5878  1308  36FB               	lsrf	___lltoft@c+3,f
  5879  1309  0CFA               	rrf	___lltoft@c+2,f
  5880  130A  0CF9               	rrf	___lltoft@c+1,f
  5881  130B  0CF8               	rrf	___lltoft@c,f
  5882  130C  0B89               	decfsz	9,f
  5883  130D  2B08               	goto	u3625
  5884  130E  3001               	movlw	1
  5885  130F  00FC               	movwf	??___lltoft
  5886  1310  087C               	movf	??___lltoft,w
  5887  1311  07FD               	addwf	___lltoft@exp,f
  5888  1312  2B03               	goto	l2458
  5889  1313                     l2460:	
  5890  1313  0878               	movf	___lltoft@c,w
  5891  1314  00F0               	movwf	___ftpack@arg
  5892  1315  0879               	movf	___lltoft@c+1,w
  5893  1316  00F1               	movwf	___ftpack@arg+1
  5894  1317  087A               	movf	___lltoft@c+2,w
  5895  1318  00F2               	movwf	___ftpack@arg+2
  5896  1319  087D               	movf	___lltoft@exp,w
  5897  131A  00FC               	movwf	??___lltoft
  5898  131B  087C               	movf	??___lltoft,w
  5899  131C  00F3               	movwf	___ftpack@exp
  5900  131D  01F4               	clrf	___ftpack@sign
  5901  131E  3180  201A         	fcall	___ftpack
  5902  1320  0870               	movf	?___ftpack,w
  5903  1321  00F8               	movwf	?___lltoft
  5904  1322  0871               	movf	?___ftpack+1,w
  5905  1323  00F9               	movwf	?___lltoft+1
  5906  1324  0872               	movf	?___ftpack+2,w
  5907  1325  00FA               	movwf	?___lltoft+2
  5908  1326  0008               	return
  5909  1327                     __end_of___lltoft:	
  5910                           
  5911                           	psect	text12
  5912  1397                     __ptext12:	
  5913 ;; *************** function ___llmod *****************
  5914 ;; Defined at:
  5915 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\llmod.c"
  5916 ;; Parameters:    Size  Location     Type
  5917 ;;  divisor         4    0[BANK0 ] unsigned long 
  5918 ;;  dividend        4    4[BANK0 ] unsigned long 
  5919 ;; Auto vars:     Size  Location     Type
  5920 ;;  counter         1    9[BANK0 ] unsigned char 
  5921 ;; Return value:  Size  Location     Type
  5922 ;;                  4    0[BANK0 ] unsigned long 
  5923 ;; Registers used:
  5924 ;;		wreg, status,2, status,0
  5925 ;; Tracked objects:
  5926 ;;		On entry : 0/0
  5927 ;;		On exit  : 0/0
  5928 ;;		Unchanged: 0/0
  5929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5930 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5931 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5932 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5933 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5934 ;;Total ram usage:       10 bytes
  5935 ;; Hardware stack levels used:    1
  5936 ;; This function calls:
  5937 ;;		Nothing
  5938 ;; This function is called by:
  5939 ;;		_sprintf
  5940 ;; This function uses a non-reentrant model
  5941 ;;
  5942                           
  5943                           
  5944                           ;psect for function ___llmod
  5945  1397                     ___llmod:	
  5946                           
  5947                           ;incstack = 0
  5948                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  5949  1397  0020               	movlb	0	; select bank0
  5950  1398  0823               	movf	___llmod@divisor+3,w
  5951  1399  0422               	iorwf	___llmod@divisor+2,w
  5952  139A  0421               	iorwf	___llmod@divisor+1,w
  5953  139B  0420               	iorwf	___llmod@divisor,w
  5954  139C  1903               	skipnz
  5955  139D  2BD1               	goto	l2450
  5956  139E  01A9               	clrf	___llmod@counter
  5957  139F  0AA9               	incf	___llmod@counter,f
  5958  13A0                     l2440:	
  5959  13A0  1BA3               	btfsc	___llmod@divisor+3,7
  5960  13A1  2BAE               	goto	l2442
  5961  13A2  3001               	movlw	1
  5962  13A3                     u3575:	
  5963  13A3  35A0               	lslf	___llmod@divisor,f
  5964  13A4  0DA1               	rlf	___llmod@divisor+1,f
  5965  13A5  0DA2               	rlf	___llmod@divisor+2,f
  5966  13A6  0DA3               	rlf	___llmod@divisor+3,f
  5967  13A7  0B89               	decfsz	9,f
  5968  13A8  2BA3               	goto	u3575
  5969  13A9  3001               	movlw	1
  5970  13AA  00A8               	movwf	??___llmod
  5971  13AB  0828               	movf	??___llmod,w
  5972  13AC  07A9               	addwf	___llmod@counter,f
  5973  13AD  2BA0               	goto	l2440
  5974  13AE                     l2442:	
  5975  13AE  0823               	movf	___llmod@divisor+3,w
  5976  13AF  0227               	subwf	___llmod@dividend+3,w
  5977  13B0  1D03               	skipz
  5978  13B1  2BBC               	goto	u3595
  5979  13B2  0822               	movf	___llmod@divisor+2,w
  5980  13B3  0226               	subwf	___llmod@dividend+2,w
  5981  13B4  1D03               	skipz
  5982  13B5  2BBC               	goto	u3595
  5983  13B6  0821               	movf	___llmod@divisor+1,w
  5984  13B7  0225               	subwf	___llmod@dividend+1,w
  5985  13B8  1D03               	skipz
  5986  13B9  2BBC               	goto	u3595
  5987  13BA  0820               	movf	___llmod@divisor,w
  5988  13BB  0224               	subwf	___llmod@dividend,w
  5989  13BC                     u3595:	
  5990  13BC  1C03               	skipc
  5991  13BD  2BC6               	goto	l2446
  5992  13BE  0820               	movf	___llmod@divisor,w
  5993  13BF  02A4               	subwf	___llmod@dividend,f
  5994  13C0  0821               	movf	___llmod@divisor+1,w
  5995  13C1  3BA5               	subwfb	___llmod@dividend+1,f
  5996  13C2  0822               	movf	___llmod@divisor+2,w
  5997  13C3  3BA6               	subwfb	___llmod@dividend+2,f
  5998  13C4  0823               	movf	___llmod@divisor+3,w
  5999  13C5  3BA7               	subwfb	___llmod@dividend+3,f
  6000  13C6                     l2446:	
  6001  13C6  3001               	movlw	1
  6002  13C7                     u3605:	
  6003  13C7  36A3               	lsrf	___llmod@divisor+3,f
  6004  13C8  0CA2               	rrf	___llmod@divisor+2,f
  6005  13C9  0CA1               	rrf	___llmod@divisor+1,f
  6006  13CA  0CA0               	rrf	___llmod@divisor,f
  6007  13CB  0B89               	decfsz	9,f
  6008  13CC  2BC7               	goto	u3605
  6009  13CD  3001               	movlw	1
  6010  13CE  02A9               	subwf	___llmod@counter,f
  6011  13CF  1D03               	btfss	3,2
  6012  13D0  2BAE               	goto	l2442
  6013  13D1                     l2450:	
  6014  13D1  0827               	movf	___llmod@dividend+3,w
  6015  13D2  00A3               	movwf	?___llmod+3
  6016  13D3  0826               	movf	___llmod@dividend+2,w
  6017  13D4  00A2               	movwf	?___llmod+2
  6018  13D5  0825               	movf	___llmod@dividend+1,w
  6019  13D6  00A1               	movwf	?___llmod+1
  6020  13D7  0824               	movf	___llmod@dividend,w
  6021  13D8  00A0               	movwf	?___llmod
  6022  13D9  0008               	return
  6023  13DA                     __end_of___llmod:	
  6024                           
  6025                           	psect	text13
  6026  141F                     __ptext13:	
  6027 ;; *************** function ___lldiv *****************
  6028 ;; Defined at:
  6029 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\lldiv.c"
  6030 ;; Parameters:    Size  Location     Type
  6031 ;;  divisor         4    0[COMMON] unsigned long 
  6032 ;;  dividend        4    4[COMMON] unsigned long 
  6033 ;; Auto vars:     Size  Location     Type
  6034 ;;  quotient        4    9[COMMON] unsigned long 
  6035 ;;  counter         1   13[COMMON] unsigned char 
  6036 ;; Return value:  Size  Location     Type
  6037 ;;                  4    0[COMMON] unsigned long 
  6038 ;; Registers used:
  6039 ;;		wreg, status,2, status,0
  6040 ;; Tracked objects:
  6041 ;;		On entry : 0/0
  6042 ;;		On exit  : 0/0
  6043 ;;		Unchanged: 0/0
  6044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6045 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6046 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6047 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6048 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6049 ;;Total ram usage:       14 bytes
  6050 ;; Hardware stack levels used:    1
  6051 ;; This function calls:
  6052 ;;		Nothing
  6053 ;; This function is called by:
  6054 ;;		_sprintf
  6055 ;; This function uses a non-reentrant model
  6056 ;;
  6057                           
  6058                           
  6059                           ;psect for function ___lldiv
  6060  141F                     ___lldiv:	
  6061                           
  6062                           ;incstack = 0
  6063                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6064  141F  3000               	movlw	0
  6065  1420  00FC               	movwf	___lldiv@quotient+3
  6066  1421  3000               	movlw	0
  6067  1422  00FB               	movwf	___lldiv@quotient+2
  6068  1423  3000               	movlw	0
  6069  1424  00FA               	movwf	___lldiv@quotient+1
  6070  1425  3000               	movlw	0
  6071  1426  00F9               	movwf	___lldiv@quotient
  6072  1427  0873               	movf	___lldiv@divisor+3,w
  6073  1428  0472               	iorwf	___lldiv@divisor+2,w
  6074  1429  0471               	iorwf	___lldiv@divisor+1,w
  6075  142A  0470               	iorwf	___lldiv@divisor,w
  6076  142B  1903               	skipnz
  6077  142C  2C68               	goto	l2430
  6078  142D  01FD               	clrf	___lldiv@counter
  6079  142E  0AFD               	incf	___lldiv@counter,f
  6080  142F                     l2416:	
  6081  142F  1BF3               	btfsc	___lldiv@divisor+3,7
  6082  1430  2C3D               	goto	l2418
  6083  1431  3001               	movlw	1
  6084  1432                     u3505:	
  6085  1432  35F0               	lslf	___lldiv@divisor,f
  6086  1433  0DF1               	rlf	___lldiv@divisor+1,f
  6087  1434  0DF2               	rlf	___lldiv@divisor+2,f
  6088  1435  0DF3               	rlf	___lldiv@divisor+3,f
  6089  1436  0B89               	decfsz	9,f
  6090  1437  2C32               	goto	u3505
  6091  1438  3001               	movlw	1
  6092  1439  00F8               	movwf	??___lldiv
  6093  143A  0878               	movf	??___lldiv,w
  6094  143B  07FD               	addwf	___lldiv@counter,f
  6095  143C  2C2F               	goto	l2416
  6096  143D                     l2418:	
  6097  143D  3001               	movlw	1
  6098  143E                     u3525:	
  6099  143E  35F9               	lslf	___lldiv@quotient,f
  6100  143F  0DFA               	rlf	___lldiv@quotient+1,f
  6101  1440  0DFB               	rlf	___lldiv@quotient+2,f
  6102  1441  0DFC               	rlf	___lldiv@quotient+3,f
  6103  1442  0B89               	decfsz	9,f
  6104  1443  2C3E               	goto	u3525
  6105  1444  0873               	movf	___lldiv@divisor+3,w
  6106  1445  0277               	subwf	___lldiv@dividend+3,w
  6107  1446  1D03               	skipz
  6108  1447  2C52               	goto	u3535
  6109  1448  0872               	movf	___lldiv@divisor+2,w
  6110  1449  0276               	subwf	___lldiv@dividend+2,w
  6111  144A  1D03               	skipz
  6112  144B  2C52               	goto	u3535
  6113  144C  0871               	movf	___lldiv@divisor+1,w
  6114  144D  0275               	subwf	___lldiv@dividend+1,w
  6115  144E  1D03               	skipz
  6116  144F  2C52               	goto	u3535
  6117  1450  0870               	movf	___lldiv@divisor,w
  6118  1451  0274               	subwf	___lldiv@dividend,w
  6119  1452                     u3535:	
  6120  1452  1C03               	skipc
  6121  1453  2C5D               	goto	l2426
  6122  1454  0870               	movf	___lldiv@divisor,w
  6123  1455  02F4               	subwf	___lldiv@dividend,f
  6124  1456  0871               	movf	___lldiv@divisor+1,w
  6125  1457  3BF5               	subwfb	___lldiv@dividend+1,f
  6126  1458  0872               	movf	___lldiv@divisor+2,w
  6127  1459  3BF6               	subwfb	___lldiv@dividend+2,f
  6128  145A  0873               	movf	___lldiv@divisor+3,w
  6129  145B  3BF7               	subwfb	___lldiv@dividend+3,f
  6130  145C  1479               	bsf	___lldiv@quotient,0
  6131  145D                     l2426:	
  6132  145D  3001               	movlw	1
  6133  145E                     u3545:	
  6134  145E  36F3               	lsrf	___lldiv@divisor+3,f
  6135  145F  0CF2               	rrf	___lldiv@divisor+2,f
  6136  1460  0CF1               	rrf	___lldiv@divisor+1,f
  6137  1461  0CF0               	rrf	___lldiv@divisor,f
  6138  1462  0B89               	decfsz	9,f
  6139  1463  2C5E               	goto	u3545
  6140  1464  3001               	movlw	1
  6141  1465  02FD               	subwf	___lldiv@counter,f
  6142  1466  1D03               	btfss	3,2
  6143  1467  2C3D               	goto	l2418
  6144  1468                     l2430:	
  6145  1468  087C               	movf	___lldiv@quotient+3,w
  6146  1469  00F3               	movwf	?___lldiv+3
  6147  146A  087B               	movf	___lldiv@quotient+2,w
  6148  146B  00F2               	movwf	?___lldiv+2
  6149  146C  087A               	movf	___lldiv@quotient+1,w
  6150  146D  00F1               	movwf	?___lldiv+1
  6151  146E  0879               	movf	___lldiv@quotient,w
  6152  146F  00F0               	movwf	?___lldiv
  6153  1470  0008               	return
  6154  1471                     __end_of___lldiv:	
  6155                           
  6156                           	psect	text14
  6157  0802                     __ptext14:	
  6158 ;; *************** function ___fttol *****************
  6159 ;; Defined at:
  6160 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\fttol.c"
  6161 ;; Parameters:    Size  Location     Type
  6162 ;;  f1              3   33[BANK0 ] float 
  6163 ;; Auto vars:     Size  Location     Type
  6164 ;;  lval            4   42[BANK0 ] unsigned long 
  6165 ;;  exp1            1   46[BANK0 ] unsigned char 
  6166 ;;  sign1           1   41[BANK0 ] unsigned char 
  6167 ;; Return value:  Size  Location     Type
  6168 ;;                  4   33[BANK0 ] long 
  6169 ;; Registers used:
  6170 ;;		wreg, status,2, status,0
  6171 ;; Tracked objects:
  6172 ;;		On entry : 0/0
  6173 ;;		On exit  : 0/0
  6174 ;;		Unchanged: 0/0
  6175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6176 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6177 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6178 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6179 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6180 ;;Total ram usage:       14 bytes
  6181 ;; Hardware stack levels used:    1
  6182 ;; This function calls:
  6183 ;;		Nothing
  6184 ;; This function is called by:
  6185 ;;		_sprintf
  6186 ;; This function uses a non-reentrant model
  6187 ;;
  6188                           
  6189                           
  6190                           ;psect for function ___fttol
  6191  0802                     ___fttol:	
  6192                           
  6193                           ;incstack = 0
  6194                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6195  0802  0020               	movlb	0	; select bank0
  6196  0803  0841               	movf	___fttol@f1,w
  6197  0804  00C5               	movwf	??___fttol
  6198  0805  0842               	movf	___fttol@f1+1,w
  6199  0806  00C6               	movwf	??___fttol+1
  6200  0807  0843               	movf	___fttol@f1+2,w
  6201  0808  00C7               	movwf	??___fttol+2
  6202  0809  1003               	clrc
  6203  080A  0D46               	rlf	??___fttol+1,w
  6204  080B  0D47               	rlf	??___fttol+2,w
  6205  080C  00C8               	movwf	??___fttol+3
  6206  080D  0848               	movf	??___fttol+3,w
  6207  080E  00CE               	movwf	___fttol@exp1
  6208  080F  084E               	movf	___fttol@exp1,w
  6209  0810  1D03               	btfss	3,2
  6210  0811  281B               	goto	l2374
  6211  0812  3000               	movlw	0
  6212  0813  00C4               	movwf	?___fttol+3
  6213  0814  3000               	movlw	0
  6214  0815  00C3               	movwf	?___fttol+2
  6215  0816  3000               	movlw	0
  6216  0817  00C2               	movwf	?___fttol+1
  6217  0818  3000               	movlw	0
  6218  0819  00C1               	movwf	?___fttol
  6219  081A  0008               	return
  6220  081B                     l2374:	
  6221  081B  0841               	movf	___fttol@f1,w
  6222  081C  00C5               	movwf	??___fttol
  6223  081D  0842               	movf	___fttol@f1+1,w
  6224  081E  00C6               	movwf	??___fttol+1
  6225  081F  0843               	movf	___fttol@f1+2,w
  6226  0820  00C7               	movwf	??___fttol+2
  6227  0821  3017               	movlw	23
  6228  0822                     u3405:	
  6229  0822  36C7               	lsrf	??___fttol+2,f
  6230  0823  0CC6               	rrf	??___fttol+1,f
  6231  0824  0CC5               	rrf	??___fttol,f
  6232  0825  0B89               	decfsz	9,f
  6233  0826  2822               	goto	u3405
  6234  0827  0845               	movf	??___fttol,w
  6235  0828  00C8               	movwf	??___fttol+3
  6236  0829  0848               	movf	??___fttol+3,w
  6237  082A  00C9               	movwf	___fttol@sign1
  6238  082B  17C2               	bsf	___fttol@f1+1,7
  6239  082C  30FF               	movlw	255
  6240  082D  05C1               	andwf	___fttol@f1,f
  6241  082E  30FF               	movlw	255
  6242  082F  05C2               	andwf	___fttol@f1+1,f
  6243  0830  3000               	movlw	0
  6244  0831  05C3               	andwf	___fttol@f1+2,f
  6245  0832  0841               	movf	___fttol@f1,w
  6246  0833  00CA               	movwf	___fttol@lval
  6247  0834  0842               	movf	___fttol@f1+1,w
  6248  0835  00CB               	movwf	___fttol@lval+1
  6249  0836  0843               	movf	___fttol@f1+2,w
  6250  0837  00CC               	movwf	___fttol@lval+2
  6251  0838  01CD               	clrf	___fttol@lval+3
  6252  0839  308E               	movlw	142
  6253  083A  02CE               	subwf	___fttol@exp1,f
  6254  083B  1FCE               	btfss	___fttol@exp1,7
  6255  083C  2859               	goto	l2394
  6256  083D  084E               	movf	___fttol@exp1,w
  6257  083E  3A80               	xorlw	128
  6258  083F  3E8F               	addlw	143
  6259  0840  1803               	skipnc
  6260  0841  284B               	goto	l2392
  6261  0842  3000               	movlw	0
  6262  0843  00C4               	movwf	?___fttol+3
  6263  0844  3000               	movlw	0
  6264  0845  00C3               	movwf	?___fttol+2
  6265  0846  3000               	movlw	0
  6266  0847  00C2               	movwf	?___fttol+1
  6267  0848  3000               	movlw	0
  6268  0849  00C1               	movwf	?___fttol
  6269  084A  0008               	return
  6270  084B                     l2392:	
  6271  084B  3001               	movlw	1
  6272  084C                     u3435:	
  6273  084C  36CD               	lsrf	___fttol@lval+3,f
  6274  084D  0CCC               	rrf	___fttol@lval+2,f
  6275  084E  0CCB               	rrf	___fttol@lval+1,f
  6276  084F  0CCA               	rrf	___fttol@lval,f
  6277  0850  0B89               	decfsz	9,f
  6278  0851  284C               	goto	u3435
  6279  0852  3001               	movlw	1
  6280  0853  00C5               	movwf	??___fttol
  6281  0854  0845               	movf	??___fttol,w
  6282  0855  07CE               	addwf	___fttol@exp1,f
  6283  0856  1903               	btfsc	3,2
  6284  0857  2872               	goto	l2402
  6285  0858  284B               	goto	l2392
  6286  0859                     l2394:	
  6287  0859  3018               	movlw	24
  6288  085A  024E               	subwf	___fttol@exp1,w
  6289  085B  1C03               	skipc
  6290  085C  286F               	goto	l581
  6291  085D  3000               	movlw	0
  6292  085E  00C4               	movwf	?___fttol+3
  6293  085F  3000               	movlw	0
  6294  0860  00C3               	movwf	?___fttol+2
  6295  0861  3000               	movlw	0
  6296  0862  00C2               	movwf	?___fttol+1
  6297  0863  3000               	movlw	0
  6298  0864  00C1               	movwf	?___fttol
  6299  0865  0008               	return
  6300  0866                     l2400:	
  6301  0866  3001               	movlw	1
  6302  0867                     u3465:	
  6303  0867  35CA               	lslf	___fttol@lval,f
  6304  0868  0DCB               	rlf	___fttol@lval+1,f
  6305  0869  0DCC               	rlf	___fttol@lval+2,f
  6306  086A  0DCD               	rlf	___fttol@lval+3,f
  6307  086B  0B89               	decfsz	9,f
  6308  086C  2867               	goto	u3465
  6309  086D  3001               	movlw	1
  6310  086E  02CE               	subwf	___fttol@exp1,f
  6311  086F                     l581:	
  6312  086F  084E               	movf	___fttol@exp1,w
  6313  0870  1D03               	btfss	3,2
  6314  0871  2866               	goto	l2400
  6315  0872                     l2402:	
  6316  0872  0849               	movf	___fttol@sign1,w
  6317  0873  1903               	btfsc	3,2
  6318  0874  2880               	goto	l2406
  6319  0875  09CA               	comf	___fttol@lval,f
  6320  0876  09CB               	comf	___fttol@lval+1,f
  6321  0877  09CC               	comf	___fttol@lval+2,f
  6322  0878  09CD               	comf	___fttol@lval+3,f
  6323  0879  0ACA               	incf	___fttol@lval,f
  6324  087A  1903               	skipnz
  6325  087B  0ACB               	incf	___fttol@lval+1,f
  6326  087C  1903               	skipnz
  6327  087D  0ACC               	incf	___fttol@lval+2,f
  6328  087E  1903               	skipnz
  6329  087F  0ACD               	incf	___fttol@lval+3,f
  6330  0880                     l2406:	
  6331  0880  084D               	movf	___fttol@lval+3,w
  6332  0881  00C4               	movwf	?___fttol+3
  6333  0882  084C               	movf	___fttol@lval+2,w
  6334  0883  00C3               	movwf	?___fttol+2
  6335  0884  084B               	movf	___fttol@lval+1,w
  6336  0885  00C2               	movwf	?___fttol+1
  6337  0886  084A               	movf	___fttol@lval,w
  6338  0887  00C1               	movwf	?___fttol
  6339  0888  0008               	return
  6340  0889                     __end_of___fttol:	
  6341                           
  6342                           	psect	text15
  6343  12C1                     __ptext15:	
  6344 ;; *************** function ___ftsub *****************
  6345 ;; Defined at:
  6346 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftsub.c"
  6347 ;; Parameters:    Size  Location     Type
  6348 ;;  f2              3   51[BANK0 ] float 
  6349 ;;  f1              3   54[BANK0 ] float 
  6350 ;; Auto vars:     Size  Location     Type
  6351 ;;		None
  6352 ;; Return value:  Size  Location     Type
  6353 ;;                  3   51[BANK0 ] float 
  6354 ;; Registers used:
  6355 ;;		wreg, status,2, status,0, pclath, cstack
  6356 ;; Tracked objects:
  6357 ;;		On entry : 0/0
  6358 ;;		On exit  : 0/0
  6359 ;;		Unchanged: 0/0
  6360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6361 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6364 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6365 ;;Total ram usage:        6 bytes
  6366 ;; Hardware stack levels used:    1
  6367 ;; Hardware stack levels required when called:    2
  6368 ;; This function calls:
  6369 ;;		___ftadd
  6370 ;; This function is called by:
  6371 ;;		_sprintf
  6372 ;; This function uses a non-reentrant model
  6373 ;;
  6374                           
  6375                           
  6376                           ;psect for function ___ftsub
  6377  12C1                     ___ftsub:	
  6378                           
  6379                           ;incstack = 0
  6380                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  6381  12C1  0020               	movlb	0	; select bank0
  6382  12C2  0855               	movf	___ftsub@f2+2,w
  6383  12C3  0454               	iorwf	___ftsub@f2+1,w
  6384  12C4  0453               	iorwf	___ftsub@f2,w
  6385  12C5  1903               	skipnz
  6386  12C6  2AC9               	goto	l2364
  6387  12C7  3080               	movlw	128
  6388  12C8  06D5               	xorwf	___ftsub@f2+2,f
  6389  12C9                     l2364:	
  6390  12C9  0856               	movf	___ftsub@f1,w
  6391  12CA  00C6               	movwf	___ftadd@f1
  6392  12CB  0857               	movf	___ftsub@f1+1,w
  6393  12CC  00C7               	movwf	___ftadd@f1+1
  6394  12CD  0858               	movf	___ftsub@f1+2,w
  6395  12CE  00C8               	movwf	___ftadd@f1+2
  6396  12CF  0853               	movf	___ftsub@f2,w
  6397  12D0  00C9               	movwf	___ftadd@f2
  6398  12D1  0854               	movf	___ftsub@f2+1,w
  6399  12D2  00CA               	movwf	___ftadd@f2+1
  6400  12D3  0855               	movf	___ftsub@f2+2,w
  6401  12D4  00CB               	movwf	___ftadd@f2+2
  6402  12D5  3189  213F         	fcall	___ftadd
  6403  12D7  0020               	movlb	0	; select bank0
  6404  12D8  0846               	movf	?___ftadd,w
  6405  12D9  00D3               	movwf	?___ftsub
  6406  12DA  0847               	movf	?___ftadd+1,w
  6407  12DB  00D4               	movwf	?___ftsub+1
  6408  12DC  0848               	movf	?___ftadd+2,w
  6409  12DD  00D5               	movwf	?___ftsub+2
  6410  12DE  0008               	return
  6411  12DF                     __end_of___ftsub:	
  6412                           
  6413                           	psect	text16
  6414  093F                     __ptext16:	
  6415 ;; *************** function ___ftadd *****************
  6416 ;; Defined at:
  6417 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftadd.c"
  6418 ;; Parameters:    Size  Location     Type
  6419 ;;  f1              3   38[BANK0 ] float 
  6420 ;;  f2              3   41[BANK0 ] float 
  6421 ;; Auto vars:     Size  Location     Type
  6422 ;;  exp1            1   50[BANK0 ] unsigned char 
  6423 ;;  exp2            1   49[BANK0 ] unsigned char 
  6424 ;;  sign            1   48[BANK0 ] unsigned char 
  6425 ;; Return value:  Size  Location     Type
  6426 ;;                  3   38[BANK0 ] float 
  6427 ;; Registers used:
  6428 ;;		wreg, status,2, status,0, pclath, cstack
  6429 ;; Tracked objects:
  6430 ;;		On entry : 0/0
  6431 ;;		On exit  : 0/0
  6432 ;;		Unchanged: 0/0
  6433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6434 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6435 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6436 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6437 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6438 ;;Total ram usage:       13 bytes
  6439 ;; Hardware stack levels used:    1
  6440 ;; Hardware stack levels required when called:    1
  6441 ;; This function calls:
  6442 ;;		___ftpack
  6443 ;; This function is called by:
  6444 ;;		_sprintf
  6445 ;;		___ftsub
  6446 ;; This function uses a non-reentrant model
  6447 ;;
  6448                           
  6449                           
  6450                           ;psect for function ___ftadd
  6451  093F                     ___ftadd:	
  6452                           
  6453                           ;incstack = 0
  6454                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  6455  093F  0020               	movlb	0	; select bank0
  6456  0940  0846               	movf	___ftadd@f1,w
  6457  0941  00CC               	movwf	??___ftadd
  6458  0942  0847               	movf	___ftadd@f1+1,w
  6459  0943  00CD               	movwf	??___ftadd+1
  6460  0944  0848               	movf	___ftadd@f1+2,w
  6461  0945  00CE               	movwf	??___ftadd+2
  6462  0946  1003               	clrc
  6463  0947  0D4D               	rlf	??___ftadd+1,w
  6464  0948  0D4E               	rlf	??___ftadd+2,w
  6465  0949  00CF               	movwf	??___ftadd+3
  6466  094A  084F               	movf	??___ftadd+3,w
  6467  094B  00D2               	movwf	___ftadd@exp1
  6468  094C  0849               	movf	___ftadd@f2,w
  6469  094D  00CC               	movwf	??___ftadd
  6470  094E  084A               	movf	___ftadd@f2+1,w
  6471  094F  00CD               	movwf	??___ftadd+1
  6472  0950  084B               	movf	___ftadd@f2+2,w
  6473  0951  00CE               	movwf	??___ftadd+2
  6474  0952  1003               	clrc
  6475  0953  0D4D               	rlf	??___ftadd+1,w
  6476  0954  0D4E               	rlf	??___ftadd+2,w
  6477  0955  00CF               	movwf	??___ftadd+3
  6478  0956  084F               	movf	??___ftadd+3,w
  6479  0957  00D1               	movwf	___ftadd@exp2
  6480  0958  0852               	movf	___ftadd@exp1,w
  6481  0959  1903               	btfsc	3,2
  6482  095A  2967               	goto	l1992
  6483  095B  0851               	movf	___ftadd@exp2,w
  6484  095C  0252               	subwf	___ftadd@exp1,w
  6485  095D  1803               	skipnc
  6486  095E  296E               	goto	l1996
  6487  095F  0352               	decf	___ftadd@exp1,w
  6488  0960  3AFF               	xorlw	255
  6489  0961  0751               	addwf	___ftadd@exp2,w
  6490  0962  00CC               	movwf	??___ftadd
  6491  0963  3019               	movlw	25
  6492  0964  024C               	subwf	??___ftadd,w
  6493  0965  1C03               	skipc
  6494  0966  296E               	goto	l1996
  6495  0967                     l1992:	
  6496  0967  0849               	movf	___ftadd@f2,w
  6497  0968  00C6               	movwf	?___ftadd
  6498  0969  084A               	movf	___ftadd@f2+1,w
  6499  096A  00C7               	movwf	?___ftadd+1
  6500  096B  084B               	movf	___ftadd@f2+2,w
  6501  096C  00C8               	movwf	?___ftadd+2
  6502  096D  0008               	return
  6503  096E                     l1996:	
  6504  096E  0851               	movf	___ftadd@exp2,w
  6505  096F  1903               	btfsc	3,2
  6506  0970  0008               	return
  6507  0971  0852               	movf	___ftadd@exp1,w
  6508  0972  0251               	subwf	___ftadd@exp2,w
  6509  0973  1803               	skipnc
  6510  0974  297D               	goto	l2002
  6511  0975  0351               	decf	___ftadd@exp2,w
  6512  0976  3AFF               	xorlw	255
  6513  0977  0752               	addwf	___ftadd@exp1,w
  6514  0978  00CC               	movwf	??___ftadd
  6515  0979  3019               	movlw	25
  6516  097A  024C               	subwf	??___ftadd,w
  6517  097B  1803               	btfsc	3,0
  6518  097C  0008               	return
  6519  097D                     l2002:	
  6520  097D  3006               	movlw	6
  6521  097E  00CC               	movwf	??___ftadd
  6522  097F  084C               	movf	??___ftadd,w
  6523  0980  00D0               	movwf	___ftadd@sign
  6524  0981  1BC8               	btfsc	___ftadd@f1+2,7
  6525  0982  17D0               	bsf	___ftadd@sign,7
  6526  0983  1BCB               	btfsc	___ftadd@f2+2,7
  6527  0984  1750               	bsf	___ftadd@sign,6
  6528  0985  17C7               	bsf	___ftadd@f1+1,7
  6529  0986  30FF               	movlw	255
  6530  0987  05C6               	andwf	___ftadd@f1,f
  6531  0988  30FF               	movlw	255
  6532  0989  05C7               	andwf	___ftadd@f1+1,f
  6533  098A  3000               	movlw	0
  6534  098B  05C8               	andwf	___ftadd@f1+2,f
  6535  098C  17CA               	bsf	___ftadd@f2+1,7
  6536  098D  30FF               	movlw	255
  6537  098E  05C9               	andwf	___ftadd@f2,f
  6538  098F  30FF               	movlw	255
  6539  0990  05CA               	andwf	___ftadd@f2+1,f
  6540  0991  3000               	movlw	0
  6541  0992  05CB               	andwf	___ftadd@f2+2,f
  6542  0993  0851               	movf	___ftadd@exp2,w
  6543  0994  0252               	subwf	___ftadd@exp1,w
  6544  0995  1803               	skipnc
  6545  0996  29B9               	goto	l2024
  6546  0997                     l2014:	
  6547  0997  3001               	movlw	1
  6548  0998                     u2625:	
  6549  0998  35C9               	lslf	___ftadd@f2,f
  6550  0999  0DCA               	rlf	___ftadd@f2+1,f
  6551  099A  0DCB               	rlf	___ftadd@f2+2,f
  6552  099B  0B89               	decfsz	9,f
  6553  099C  2998               	goto	u2625
  6554  099D  3001               	movlw	1
  6555  099E  02D1               	subwf	___ftadd@exp2,f
  6556  099F  0851               	movf	___ftadd@exp2,w
  6557  09A0  0652               	xorwf	___ftadd@exp1,w
  6558  09A1  1903               	skipnz
  6559  09A2  29B4               	goto	l2022
  6560  09A3  3001               	movlw	1
  6561  09A4  02D0               	subwf	___ftadd@sign,f
  6562  09A5  0850               	movf	___ftadd@sign,w
  6563  09A6  3907               	andlw	7
  6564  09A7  1903               	btfsc	3,2
  6565  09A8  29B4               	goto	l2022
  6566  09A9  2997               	goto	l2014
  6567  09AA                     l2020:	
  6568  09AA  3001               	movlw	1
  6569  09AB                     u2655:	
  6570  09AB  36C8               	lsrf	___ftadd@f1+2,f
  6571  09AC  0CC7               	rrf	___ftadd@f1+1,f
  6572  09AD  0CC6               	rrf	___ftadd@f1,f
  6573  09AE  0B89               	decfsz	9,f
  6574  09AF  29AB               	goto	u2655
  6575  09B0  3001               	movlw	1
  6576  09B1  00CC               	movwf	??___ftadd
  6577  09B2  084C               	movf	??___ftadd,w
  6578  09B3  07D2               	addwf	___ftadd@exp1,f
  6579  09B4                     l2022:	
  6580  09B4  0852               	movf	___ftadd@exp1,w
  6581  09B5  0651               	xorwf	___ftadd@exp2,w
  6582  09B6  1903               	btfsc	3,2
  6583  09B7  29DE               	goto	l504
  6584  09B8  29AA               	goto	l2020
  6585  09B9                     l2024:	
  6586  09B9  0852               	movf	___ftadd@exp1,w
  6587  09BA  0251               	subwf	___ftadd@exp2,w
  6588  09BB  1803               	skipnc
  6589  09BC  29DE               	goto	l504
  6590  09BD                     l2026:	
  6591  09BD  3001               	movlw	1
  6592  09BE                     u2685:	
  6593  09BE  35C6               	lslf	___ftadd@f1,f
  6594  09BF  0DC7               	rlf	___ftadd@f1+1,f
  6595  09C0  0DC8               	rlf	___ftadd@f1+2,f
  6596  09C1  0B89               	decfsz	9,f
  6597  09C2  29BE               	goto	u2685
  6598  09C3  3001               	movlw	1
  6599  09C4  02D2               	subwf	___ftadd@exp1,f
  6600  09C5  0851               	movf	___ftadd@exp2,w
  6601  09C6  0652               	xorwf	___ftadd@exp1,w
  6602  09C7  1903               	skipnz
  6603  09C8  29DA               	goto	l2034
  6604  09C9  3001               	movlw	1
  6605  09CA  02D0               	subwf	___ftadd@sign,f
  6606  09CB  0850               	movf	___ftadd@sign,w
  6607  09CC  3907               	andlw	7
  6608  09CD  1903               	btfsc	3,2
  6609  09CE  29DA               	goto	l2034
  6610  09CF  29BD               	goto	l2026
  6611  09D0                     l2032:	
  6612  09D0  3001               	movlw	1
  6613  09D1                     u2715:	
  6614  09D1  36CB               	lsrf	___ftadd@f2+2,f
  6615  09D2  0CCA               	rrf	___ftadd@f2+1,f
  6616  09D3  0CC9               	rrf	___ftadd@f2,f
  6617  09D4  0B89               	decfsz	9,f
  6618  09D5  29D1               	goto	u2715
  6619  09D6  3001               	movlw	1
  6620  09D7  00CC               	movwf	??___ftadd
  6621  09D8  084C               	movf	??___ftadd,w
  6622  09D9  07D1               	addwf	___ftadd@exp2,f
  6623  09DA                     l2034:	
  6624  09DA  0852               	movf	___ftadd@exp1,w
  6625  09DB  0651               	xorwf	___ftadd@exp2,w
  6626  09DC  1D03               	skipz
  6627  09DD  29D0               	goto	l2032
  6628  09DE                     l504:	
  6629  09DE  1FD0               	btfss	___ftadd@sign,7
  6630  09DF  29F0               	goto	l2038
  6631  09E0  30FF               	movlw	255
  6632  09E1  06C6               	xorwf	___ftadd@f1,f
  6633  09E2  30FF               	movlw	255
  6634  09E3  06C7               	xorwf	___ftadd@f1+1,f
  6635  09E4  30FF               	movlw	255
  6636  09E5  06C8               	xorwf	___ftadd@f1+2,f
  6637  09E6  3001               	movlw	1
  6638  09E7  07C6               	addwf	___ftadd@f1,f
  6639  09E8  3000               	movlw	0
  6640  09E9  1803               	skipnc
  6641  09EA  3001               	movlw	1
  6642  09EB  07C7               	addwf	___ftadd@f1+1,f
  6643  09EC  3000               	movlw	0
  6644  09ED  1803               	skipnc
  6645  09EE  3001               	movlw	1
  6646  09EF  07C8               	addwf	___ftadd@f1+2,f
  6647  09F0                     l2038:	
  6648  09F0  1F50               	btfss	___ftadd@sign,6
  6649  09F1  2A02               	goto	l2042
  6650  09F2  30FF               	movlw	255
  6651  09F3  06C9               	xorwf	___ftadd@f2,f
  6652  09F4  30FF               	movlw	255
  6653  09F5  06CA               	xorwf	___ftadd@f2+1,f
  6654  09F6  30FF               	movlw	255
  6655  09F7  06CB               	xorwf	___ftadd@f2+2,f
  6656  09F8  3001               	movlw	1
  6657  09F9  07C9               	addwf	___ftadd@f2,f
  6658  09FA  3000               	movlw	0
  6659  09FB  1803               	skipnc
  6660  09FC  3001               	movlw	1
  6661  09FD  07CA               	addwf	___ftadd@f2+1,f
  6662  09FE  3000               	movlw	0
  6663  09FF  1803               	skipnc
  6664  0A00  3001               	movlw	1
  6665  0A01  07CB               	addwf	___ftadd@f2+2,f
  6666  0A02                     l2042:	
  6667  0A02  01D0               	clrf	___ftadd@sign
  6668  0A03  0846               	movf	___ftadd@f1,w
  6669  0A04  07C9               	addwf	___ftadd@f2,f
  6670  0A05  0847               	movf	___ftadd@f1+1,w
  6671  0A06  3DCA               	addwfc	___ftadd@f2+1,f
  6672  0A07  0848               	movf	___ftadd@f1+2,w
  6673  0A08  3DCB               	addwfc	___ftadd@f2+2,f
  6674  0A09  1FCB               	btfss	___ftadd@f2+2,7
  6675  0A0A  2A1D               	goto	l2052
  6676  0A0B  30FF               	movlw	255
  6677  0A0C  06C9               	xorwf	___ftadd@f2,f
  6678  0A0D  30FF               	movlw	255
  6679  0A0E  06CA               	xorwf	___ftadd@f2+1,f
  6680  0A0F  30FF               	movlw	255
  6681  0A10  06CB               	xorwf	___ftadd@f2+2,f
  6682  0A11  3001               	movlw	1
  6683  0A12  07C9               	addwf	___ftadd@f2,f
  6684  0A13  3000               	movlw	0
  6685  0A14  1803               	skipnc
  6686  0A15  3001               	movlw	1
  6687  0A16  07CA               	addwf	___ftadd@f2+1,f
  6688  0A17  3000               	movlw	0
  6689  0A18  1803               	skipnc
  6690  0A19  3001               	movlw	1
  6691  0A1A  07CB               	addwf	___ftadd@f2+2,f
  6692  0A1B  01D0               	clrf	___ftadd@sign
  6693  0A1C  0AD0               	incf	___ftadd@sign,f
  6694  0A1D                     l2052:	
  6695  0A1D  0849               	movf	___ftadd@f2,w
  6696  0A1E  00F0               	movwf	___ftpack@arg
  6697  0A1F  084A               	movf	___ftadd@f2+1,w
  6698  0A20  00F1               	movwf	___ftpack@arg+1
  6699  0A21  084B               	movf	___ftadd@f2+2,w
  6700  0A22  00F2               	movwf	___ftpack@arg+2
  6701  0A23  0852               	movf	___ftadd@exp1,w
  6702  0A24  00CC               	movwf	??___ftadd
  6703  0A25  084C               	movf	??___ftadd,w
  6704  0A26  00F3               	movwf	___ftpack@exp
  6705  0A27  0850               	movf	___ftadd@sign,w
  6706  0A28  00CD               	movwf	??___ftadd+1
  6707  0A29  084D               	movf	??___ftadd+1,w
  6708  0A2A  00F4               	movwf	___ftpack@sign
  6709  0A2B  3180  201A         	fcall	___ftpack
  6710  0A2D  0870               	movf	?___ftpack,w
  6711  0A2E  0020               	movlb	0	; select bank0
  6712  0A2F  00C6               	movwf	?___ftadd
  6713  0A30  0871               	movf	?___ftpack+1,w
  6714  0A31  00C7               	movwf	?___ftadd+1
  6715  0A32  0872               	movf	?___ftpack+2,w
  6716  0A33  00C8               	movwf	?___ftadd+2
  6717  0A34  0008               	return
  6718  0A35                     __end_of___ftadd:	
  6719                           
  6720                           	psect	text17
  6721  0004                     __ptext17:	
  6722 ;; *************** function ___ftneg *****************
  6723 ;; Defined at:
  6724 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftneg.c"
  6725 ;; Parameters:    Size  Location     Type
  6726 ;;  f1              3    0[COMMON] float 
  6727 ;; Auto vars:     Size  Location     Type
  6728 ;;		None
  6729 ;; Return value:  Size  Location     Type
  6730 ;;                  3    0[COMMON] float 
  6731 ;; Registers used:
  6732 ;;		wreg
  6733 ;; Tracked objects:
  6734 ;;		On entry : 0/0
  6735 ;;		On exit  : 0/0
  6736 ;;		Unchanged: 0/0
  6737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6738 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6741 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6742 ;;Total ram usage:        3 bytes
  6743 ;; Hardware stack levels used:    1
  6744 ;; This function calls:
  6745 ;;		Nothing
  6746 ;; This function is called by:
  6747 ;;		_sprintf
  6748 ;; This function uses a non-reentrant model
  6749 ;;
  6750                           
  6751                           
  6752                           ;psect for function ___ftneg
  6753  0004                     ___ftneg:	
  6754                           
  6755                           ;incstack = 0
  6756                           ; Regs used in ___ftneg: [wreg]
  6757  0004  0872               	movf	___ftneg@f1+2,w
  6758  0005  0471               	iorwf	___ftneg@f1+1,w
  6759  0006  0470               	iorwf	___ftneg@f1,w
  6760  0007  1903               	skipnz
  6761  0008  0008               	return
  6762  0009  3080               	movlw	128
  6763  000A  06F2               	xorwf	___ftneg@f1+2,f
  6764  000B  0008               	return
  6765  000C                     __end_of___ftneg:	
  6766                           
  6767                           	psect	text18
  6768  135C                     __ptext18:	
  6769 ;; *************** function ___ftge *****************
  6770 ;; Defined at:
  6771 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftge.c"
  6772 ;; Parameters:    Size  Location     Type
  6773 ;;  ff1             3    0[COMMON] float 
  6774 ;;  ff2             3    3[COMMON] float 
  6775 ;; Auto vars:     Size  Location     Type
  6776 ;;		None
  6777 ;; Return value:  Size  Location     Type
  6778 ;;		None               void
  6779 ;; Registers used:
  6780 ;;		wreg, status,2, status,0
  6781 ;; Tracked objects:
  6782 ;;		On entry : 0/0
  6783 ;;		On exit  : 0/0
  6784 ;;		Unchanged: 0/0
  6785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6786 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6788 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6789 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6790 ;;Total ram usage:        9 bytes
  6791 ;; Hardware stack levels used:    1
  6792 ;; This function calls:
  6793 ;;		Nothing
  6794 ;; This function is called by:
  6795 ;;		_sprintf
  6796 ;; This function uses a non-reentrant model
  6797 ;;
  6798                           
  6799                           
  6800                           ;psect for function ___ftge
  6801  135C                     ___ftge:	
  6802                           
  6803                           ;incstack = 0
  6804                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6805  135C  1FF2               	btfss	___ftge@ff1+2,7
  6806  135D  2B72               	goto	l2336
  6807  135E  0970               	comf	___ftge@ff1,w
  6808  135F  00F6               	movwf	??___ftge
  6809  1360  0971               	comf	___ftge@ff1+1,w
  6810  1361  00F7               	movwf	??___ftge+1
  6811  1362  0972               	comf	___ftge@ff1+2,w
  6812  1363  00F8               	movwf	??___ftge+2
  6813  1364  0AF6               	incf	??___ftge,f
  6814  1365  1903               	skipnz
  6815  1366  0AF7               	incf	??___ftge+1,f
  6816  1367  1903               	skipnz
  6817  1368  0AF8               	incf	??___ftge+2,f
  6818  1369  3000               	movlw	0
  6819  136A  0776               	addwf	??___ftge,w
  6820  136B  00F0               	movwf	___ftge@ff1
  6821  136C  3000               	movlw	0
  6822  136D  3D77               	addwfc	??___ftge+1,w
  6823  136E  00F1               	movwf	___ftge@ff1+1
  6824  136F  3080               	movlw	128
  6825  1370  3D78               	addwfc	??___ftge+2,w
  6826  1371  00F2               	movwf	___ftge@ff1+2
  6827  1372                     l2336:	
  6828  1372  1FF5               	btfss	___ftge@ff2+2,7
  6829  1373  2B88               	goto	l2340
  6830  1374  0973               	comf	___ftge@ff2,w
  6831  1375  00F6               	movwf	??___ftge
  6832  1376  0974               	comf	___ftge@ff2+1,w
  6833  1377  00F7               	movwf	??___ftge+1
  6834  1378  0975               	comf	___ftge@ff2+2,w
  6835  1379  00F8               	movwf	??___ftge+2
  6836  137A  0AF6               	incf	??___ftge,f
  6837  137B  1903               	skipnz
  6838  137C  0AF7               	incf	??___ftge+1,f
  6839  137D  1903               	skipnz
  6840  137E  0AF8               	incf	??___ftge+2,f
  6841  137F  3000               	movlw	0
  6842  1380  0776               	addwf	??___ftge,w
  6843  1381  00F3               	movwf	___ftge@ff2
  6844  1382  3000               	movlw	0
  6845  1383  3D77               	addwfc	??___ftge+1,w
  6846  1384  00F4               	movwf	___ftge@ff2+1
  6847  1385  3080               	movlw	128
  6848  1386  3D78               	addwfc	??___ftge+2,w
  6849  1387  00F5               	movwf	___ftge@ff2+2
  6850  1388                     l2340:	
  6851  1388  3080               	movlw	128
  6852  1389  06F2               	xorwf	___ftge@ff1+2,f
  6853  138A  3080               	movlw	128
  6854  138B  06F5               	xorwf	___ftge@ff2+2,f
  6855  138C  0875               	movf	___ftge@ff2+2,w
  6856  138D  0272               	subwf	___ftge@ff1+2,w
  6857  138E  1D03               	skipz
  6858  138F  0008               	return
  6859  1390  0874               	movf	___ftge@ff2+1,w
  6860  1391  0271               	subwf	___ftge@ff1+1,w
  6861  1392  1D03               	skipz
  6862  1393  0008               	return
  6863  1394  0873               	movf	___ftge@ff2,w
  6864  1395  0270               	subwf	___ftge@ff1,w
  6865  1396  0008               	return
  6866  1397                     __end_of___ftge:	
  6867                           
  6868                           	psect	text19
  6869  15F9                     __ptext19:	
  6870 ;; *************** function ___ftdiv *****************
  6871 ;; Defined at:
  6872 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftdiv.c"
  6873 ;; Parameters:    Size  Location     Type
  6874 ;;  f2              3   24[BANK0 ] float 
  6875 ;;  f1              3   27[BANK0 ] float 
  6876 ;; Auto vars:     Size  Location     Type
  6877 ;;  f3              3   35[BANK0 ] float 
  6878 ;;  sign            1   39[BANK0 ] unsigned char 
  6879 ;;  exp             1   38[BANK0 ] unsigned char 
  6880 ;;  cntr            1   34[BANK0 ] unsigned char 
  6881 ;; Return value:  Size  Location     Type
  6882 ;;                  3   24[BANK0 ] float 
  6883 ;; Registers used:
  6884 ;;		wreg, status,2, status,0, pclath, cstack
  6885 ;; Tracked objects:
  6886 ;;		On entry : 0/0
  6887 ;;		On exit  : 0/0
  6888 ;;		Unchanged: 0/0
  6889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6890 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6891 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6892 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6893 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6894 ;;Total ram usage:       16 bytes
  6895 ;; Hardware stack levels used:    1
  6896 ;; Hardware stack levels required when called:    1
  6897 ;; This function calls:
  6898 ;;		___ftpack
  6899 ;; This function is called by:
  6900 ;;		_main
  6901 ;; This function uses a non-reentrant model
  6902 ;;
  6903                           
  6904                           
  6905                           ;psect for function ___ftdiv
  6906  15F9                     ___ftdiv:	
  6907                           
  6908                           ;incstack = 0
  6909                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6910  15F9  0020               	movlb	0	; select bank0
  6911  15FA  083B               	movf	___ftdiv@f1,w
  6912  15FB  00BE               	movwf	??___ftdiv
  6913  15FC  083C               	movf	___ftdiv@f1+1,w
  6914  15FD  00BF               	movwf	??___ftdiv+1
  6915  15FE  083D               	movf	___ftdiv@f1+2,w
  6916  15FF  00C0               	movwf	??___ftdiv+2
  6917  1600  1003               	clrc
  6918  1601  0D3F               	rlf	??___ftdiv+1,w
  6919  1602  0D40               	rlf	??___ftdiv+2,w
  6920  1603  00C1               	movwf	??___ftdiv+3
  6921  1604  0841               	movf	??___ftdiv+3,w
  6922  1605  00C6               	movwf	___ftdiv@exp
  6923  1606  0846               	movf	___ftdiv@exp,w
  6924  1607  1D03               	btfss	3,2
  6925  1608  2E10               	goto	l2878
  6926  1609  3000               	movlw	0
  6927  160A  00B8               	movwf	?___ftdiv
  6928  160B  3000               	movlw	0
  6929  160C  00B9               	movwf	?___ftdiv+1
  6930  160D  3000               	movlw	0
  6931  160E  00BA               	movwf	?___ftdiv+2
  6932  160F  0008               	return
  6933  1610                     l2878:	
  6934  1610  0838               	movf	___ftdiv@f2,w
  6935  1611  00BE               	movwf	??___ftdiv
  6936  1612  0839               	movf	___ftdiv@f2+1,w
  6937  1613  00BF               	movwf	??___ftdiv+1
  6938  1614  083A               	movf	___ftdiv@f2+2,w
  6939  1615  00C0               	movwf	??___ftdiv+2
  6940  1616  1003               	clrc
  6941  1617  0D3F               	rlf	??___ftdiv+1,w
  6942  1618  0D40               	rlf	??___ftdiv+2,w
  6943  1619  00C1               	movwf	??___ftdiv+3
  6944  161A  0841               	movf	??___ftdiv+3,w
  6945  161B  00C7               	movwf	___ftdiv@sign
  6946  161C  0847               	movf	___ftdiv@sign,w
  6947  161D  1D03               	btfss	3,2
  6948  161E  2E26               	goto	l2884
  6949  161F  3000               	movlw	0
  6950  1620  00B8               	movwf	?___ftdiv
  6951  1621  3000               	movlw	0
  6952  1622  00B9               	movwf	?___ftdiv+1
  6953  1623  3000               	movlw	0
  6954  1624  00BA               	movwf	?___ftdiv+2
  6955  1625  0008               	return
  6956  1626                     l2884:	
  6957  1626  3000               	movlw	0
  6958  1627  00C3               	movwf	___ftdiv@f3
  6959  1628  3000               	movlw	0
  6960  1629  00C4               	movwf	___ftdiv@f3+1
  6961  162A  3000               	movlw	0
  6962  162B  00C5               	movwf	___ftdiv@f3+2
  6963  162C  3089               	movlw	137
  6964  162D  0747               	addwf	___ftdiv@sign,w
  6965  162E  00BE               	movwf	??___ftdiv
  6966  162F  083E               	movf	??___ftdiv,w
  6967  1630  02C6               	subwf	___ftdiv@exp,f
  6968  1631  083B               	movf	___ftdiv@f1,w
  6969  1632  00BE               	movwf	??___ftdiv
  6970  1633  083C               	movf	___ftdiv@f1+1,w
  6971  1634  00BF               	movwf	??___ftdiv+1
  6972  1635  083D               	movf	___ftdiv@f1+2,w
  6973  1636  00C0               	movwf	??___ftdiv+2
  6974  1637  3010               	movlw	16
  6975  1638                     u4275:	
  6976  1638  36C0               	lsrf	??___ftdiv+2,f
  6977  1639  0CBF               	rrf	??___ftdiv+1,f
  6978  163A  0CBE               	rrf	??___ftdiv,f
  6979  163B  0B89               	decfsz	9,f
  6980  163C  2E38               	goto	u4275
  6981  163D  083E               	movf	??___ftdiv,w
  6982  163E  00C1               	movwf	??___ftdiv+3
  6983  163F  0841               	movf	??___ftdiv+3,w
  6984  1640  00C7               	movwf	___ftdiv@sign
  6985  1641  0838               	movf	___ftdiv@f2,w
  6986  1642  00BE               	movwf	??___ftdiv
  6987  1643  0839               	movf	___ftdiv@f2+1,w
  6988  1644  00BF               	movwf	??___ftdiv+1
  6989  1645  083A               	movf	___ftdiv@f2+2,w
  6990  1646  00C0               	movwf	??___ftdiv+2
  6991  1647  3010               	movlw	16
  6992  1648                     u4285:	
  6993  1648  36C0               	lsrf	??___ftdiv+2,f
  6994  1649  0CBF               	rrf	??___ftdiv+1,f
  6995  164A  0CBE               	rrf	??___ftdiv,f
  6996  164B  0B89               	decfsz	9,f
  6997  164C  2E48               	goto	u4285
  6998  164D  083E               	movf	??___ftdiv,w
  6999  164E  00C1               	movwf	??___ftdiv+3
  7000  164F  0841               	movf	??___ftdiv+3,w
  7001  1650  06C7               	xorwf	___ftdiv@sign,f
  7002  1651  3080               	movlw	128
  7003  1652  00BE               	movwf	??___ftdiv
  7004  1653  083E               	movf	??___ftdiv,w
  7005  1654  05C7               	andwf	___ftdiv@sign,f
  7006  1655  17BC               	bsf	___ftdiv@f1+1,7
  7007  1656  30FF               	movlw	255
  7008  1657  05BB               	andwf	___ftdiv@f1,f
  7009  1658  30FF               	movlw	255
  7010  1659  05BC               	andwf	___ftdiv@f1+1,f
  7011  165A  3000               	movlw	0
  7012  165B  05BD               	andwf	___ftdiv@f1+2,f
  7013  165C  17B9               	bsf	___ftdiv@f2+1,7
  7014  165D  30FF               	movlw	255
  7015  165E  05B8               	andwf	___ftdiv@f2,f
  7016  165F  30FF               	movlw	255
  7017  1660  05B9               	andwf	___ftdiv@f2+1,f
  7018  1661  3000               	movlw	0
  7019  1662  05BA               	andwf	___ftdiv@f2+2,f
  7020  1663  3018               	movlw	24
  7021  1664  00BE               	movwf	??___ftdiv
  7022  1665  083E               	movf	??___ftdiv,w
  7023  1666  00C2               	movwf	___ftdiv@cntr
  7024  1667                     l2898:	
  7025  1667  3001               	movlw	1
  7026  1668                     u4295:	
  7027  1668  35C3               	lslf	___ftdiv@f3,f
  7028  1669  0DC4               	rlf	___ftdiv@f3+1,f
  7029  166A  0DC5               	rlf	___ftdiv@f3+2,f
  7030  166B  0B89               	decfsz	9,f
  7031  166C  2E68               	goto	u4295
  7032  166D  083A               	movf	___ftdiv@f2+2,w
  7033  166E  023D               	subwf	___ftdiv@f1+2,w
  7034  166F  1D03               	skipz
  7035  1670  2E77               	goto	u4305
  7036  1671  0839               	movf	___ftdiv@f2+1,w
  7037  1672  023C               	subwf	___ftdiv@f1+1,w
  7038  1673  1D03               	skipz
  7039  1674  2E77               	goto	u4305
  7040  1675  0838               	movf	___ftdiv@f2,w
  7041  1676  023B               	subwf	___ftdiv@f1,w
  7042  1677                     u4305:	
  7043  1677  1C03               	skipc
  7044  1678  2E80               	goto	l2906
  7045  1679  0838               	movf	___ftdiv@f2,w
  7046  167A  02BB               	subwf	___ftdiv@f1,f
  7047  167B  0839               	movf	___ftdiv@f2+1,w
  7048  167C  3BBC               	subwfb	___ftdiv@f1+1,f
  7049  167D  083A               	movf	___ftdiv@f2+2,w
  7050  167E  3BBD               	subwfb	___ftdiv@f1+2,f
  7051  167F  1443               	bsf	___ftdiv@f3,0
  7052  1680                     l2906:	
  7053  1680  3001               	movlw	1
  7054  1681                     u4315:	
  7055  1681  35BB               	lslf	___ftdiv@f1,f
  7056  1682  0DBC               	rlf	___ftdiv@f1+1,f
  7057  1683  0DBD               	rlf	___ftdiv@f1+2,f
  7058  1684  0B89               	decfsz	9,f
  7059  1685  2E81               	goto	u4315
  7060  1686  3001               	movlw	1
  7061  1687  02C2               	subwf	___ftdiv@cntr,f
  7062  1688  1D03               	btfss	3,2
  7063  1689  2E67               	goto	l2898
  7064  168A  0843               	movf	___ftdiv@f3,w
  7065  168B  00F0               	movwf	___ftpack@arg
  7066  168C  0844               	movf	___ftdiv@f3+1,w
  7067  168D  00F1               	movwf	___ftpack@arg+1
  7068  168E  0845               	movf	___ftdiv@f3+2,w
  7069  168F  00F2               	movwf	___ftpack@arg+2
  7070  1690  0846               	movf	___ftdiv@exp,w
  7071  1691  00BE               	movwf	??___ftdiv
  7072  1692  083E               	movf	??___ftdiv,w
  7073  1693  00F3               	movwf	___ftpack@exp
  7074  1694  0847               	movf	___ftdiv@sign,w
  7075  1695  00BF               	movwf	??___ftdiv+1
  7076  1696  083F               	movf	??___ftdiv+1,w
  7077  1697  00F4               	movwf	___ftpack@sign
  7078  1698  3180  201A         	fcall	___ftpack
  7079  169A  0870               	movf	?___ftpack,w
  7080  169B  0020               	movlb	0	; select bank0
  7081  169C  00B8               	movwf	?___ftdiv
  7082  169D  0871               	movf	?___ftpack+1,w
  7083  169E  00B9               	movwf	?___ftdiv+1
  7084  169F  0872               	movf	?___ftpack+2,w
  7085  16A0  00BA               	movwf	?___ftdiv+2
  7086  16A1  0008               	return
  7087  16A2                     __end_of___ftdiv:	
  7088                           
  7089                           	psect	text20
  7090  12DF                     __ptext20:	
  7091 ;; *************** function ___awtoft *****************
  7092 ;; Defined at:
  7093 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\awtoft.c"
  7094 ;; Parameters:    Size  Location     Type
  7095 ;;  c               2    8[COMMON] int 
  7096 ;; Auto vars:     Size  Location     Type
  7097 ;;  sign            1   13[COMMON] unsigned char 
  7098 ;; Return value:  Size  Location     Type
  7099 ;;                  3    8[COMMON] float 
  7100 ;; Registers used:
  7101 ;;		wreg, status,2, status,0, pclath, cstack
  7102 ;; Tracked objects:
  7103 ;;		On entry : 0/0
  7104 ;;		On exit  : 0/0
  7105 ;;		Unchanged: 0/0
  7106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7107 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7108 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7109 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7110 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7111 ;;Total ram usage:        6 bytes
  7112 ;; Hardware stack levels used:    1
  7113 ;; Hardware stack levels required when called:    1
  7114 ;; This function calls:
  7115 ;;		___ftpack
  7116 ;; This function is called by:
  7117 ;;		_main
  7118 ;; This function uses a non-reentrant model
  7119 ;;
  7120                           
  7121                           
  7122                           ;psect for function ___awtoft
  7123  12DF                     ___awtoft:	
  7124                           
  7125                           ;incstack = 0
  7126                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  7127  12DF  01FD               	clrf	___awtoft@sign
  7128  12E0  1FF9               	btfss	___awtoft@c+1,7
  7129  12E1  2AE9               	goto	l2868
  7130  12E2  09F8               	comf	___awtoft@c,f
  7131  12E3  09F9               	comf	___awtoft@c+1,f
  7132  12E4  0AF8               	incf	___awtoft@c,f
  7133  12E5  1903               	skipnz
  7134  12E6  0AF9               	incf	___awtoft@c+1,f
  7135  12E7  01FD               	clrf	___awtoft@sign
  7136  12E8  0AFD               	incf	___awtoft@sign,f
  7137  12E9                     l2868:	
  7138  12E9  0878               	movf	___awtoft@c,w
  7139  12EA  00F0               	movwf	___ftpack@arg
  7140  12EB  0879               	movf	___awtoft@c+1,w
  7141  12EC  00F1               	movwf	___ftpack@arg+1
  7142  12ED  01F2               	clrf	___ftpack@arg+2
  7143  12EE  308E               	movlw	142
  7144  12EF  00FB               	movwf	??___awtoft
  7145  12F0  087B               	movf	??___awtoft,w
  7146  12F1  00F3               	movwf	___ftpack@exp
  7147  12F2  087D               	movf	___awtoft@sign,w
  7148  12F3  00FC               	movwf	??___awtoft+1
  7149  12F4  087C               	movf	??___awtoft+1,w
  7150  12F5  00F4               	movwf	___ftpack@sign
  7151  12F6  3180  201A         	fcall	___ftpack
  7152  12F8  0870               	movf	?___ftpack,w
  7153  12F9  00F8               	movwf	?___awtoft
  7154  12FA  0871               	movf	?___ftpack+1,w
  7155  12FB  00F9               	movwf	?___awtoft+1
  7156  12FC  0872               	movf	?___ftpack+2,w
  7157  12FD  00FA               	movwf	?___awtoft+2
  7158  12FE  0008               	return
  7159  12FF                     __end_of___awtoft:	
  7160                           
  7161                           	psect	text21
  7162  001A                     __ptext21:	
  7163 ;; *************** function ___ftpack *****************
  7164 ;; Defined at:
  7165 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\float.c"
  7166 ;; Parameters:    Size  Location     Type
  7167 ;;  arg             3    0[COMMON] unsigned um
  7168 ;;  exp             1    3[COMMON] unsigned char 
  7169 ;;  sign            1    4[COMMON] unsigned char 
  7170 ;; Auto vars:     Size  Location     Type
  7171 ;;		None
  7172 ;; Return value:  Size  Location     Type
  7173 ;;                  3    0[COMMON] float 
  7174 ;; Registers used:
  7175 ;;		wreg, status,2, status,0
  7176 ;; Tracked objects:
  7177 ;;		On entry : 0/0
  7178 ;;		On exit  : 0/0
  7179 ;;		Unchanged: 0/0
  7180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7181 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7183 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7184 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7185 ;;Total ram usage:        8 bytes
  7186 ;; Hardware stack levels used:    1
  7187 ;; This function calls:
  7188 ;;		Nothing
  7189 ;; This function is called by:
  7190 ;;		___awtoft
  7191 ;;		___ftadd
  7192 ;;		___ftdiv
  7193 ;;		___ftmul
  7194 ;;		___lltoft
  7195 ;; This function uses a non-reentrant model
  7196 ;;
  7197                           
  7198                           
  7199                           ;psect for function ___ftpack
  7200  001A                     ___ftpack:	
  7201                           
  7202                           ;incstack = 0
  7203                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7204  001A  0873               	movf	___ftpack@exp,w
  7205  001B  1903               	btfsc	3,2
  7206  001C  2822               	goto	l1862
  7207  001D  0872               	movf	___ftpack@arg+2,w
  7208  001E  0471               	iorwf	___ftpack@arg+1,w
  7209  001F  0470               	iorwf	___ftpack@arg,w
  7210  0020  1D03               	skipz
  7211  0021  2833               	goto	l1868
  7212  0022                     l1862:	
  7213  0022  3000               	movlw	0
  7214  0023  00F0               	movwf	?___ftpack
  7215  0024  3000               	movlw	0
  7216  0025  00F1               	movwf	?___ftpack+1
  7217  0026  3000               	movlw	0
  7218  0027  00F2               	movwf	?___ftpack+2
  7219  0028  0008               	return
  7220  0029                     l1866:	
  7221  0029  3001               	movlw	1
  7222  002A  00F5               	movwf	??___ftpack
  7223  002B  0875               	movf	??___ftpack,w
  7224  002C  07F3               	addwf	___ftpack@exp,f
  7225  002D  3001               	movlw	1
  7226  002E                     u2205:	
  7227  002E  36F2               	lsrf	___ftpack@arg+2,f
  7228  002F  0CF1               	rrf	___ftpack@arg+1,f
  7229  0030  0CF0               	rrf	___ftpack@arg,f
  7230  0031  0B89               	decfsz	9,f
  7231  0032  282E               	goto	u2205
  7232  0033                     l1868:	
  7233  0033  30FE               	movlw	254
  7234  0034  0572               	andwf	___ftpack@arg+2,w
  7235  0035  1903               	btfsc	3,2
  7236  0036  284C               	goto	l473
  7237  0037  2829               	goto	l1866
  7238  0038                     l1870:	
  7239  0038  3001               	movlw	1
  7240  0039  00F5               	movwf	??___ftpack
  7241  003A  0875               	movf	??___ftpack,w
  7242  003B  07F3               	addwf	___ftpack@exp,f
  7243  003C  3001               	movlw	1
  7244  003D  07F0               	addwf	___ftpack@arg,f
  7245  003E  3000               	movlw	0
  7246  003F  1803               	skipnc
  7247  0040  3001               	movlw	1
  7248  0041  07F1               	addwf	___ftpack@arg+1,f
  7249  0042  3000               	movlw	0
  7250  0043  1803               	skipnc
  7251  0044  3001               	movlw	1
  7252  0045  07F2               	addwf	___ftpack@arg+2,f
  7253  0046  3001               	movlw	1
  7254  0047                     u2225:	
  7255  0047  36F2               	lsrf	___ftpack@arg+2,f
  7256  0048  0CF1               	rrf	___ftpack@arg+1,f
  7257  0049  0CF0               	rrf	___ftpack@arg,f
  7258  004A  0B89               	decfsz	9,f
  7259  004B  2847               	goto	u2225
  7260  004C                     l473:	
  7261  004C  30FF               	movlw	255
  7262  004D  0572               	andwf	___ftpack@arg+2,w
  7263  004E  1903               	btfsc	3,2
  7264  004F  2859               	goto	l1878
  7265  0050  2838               	goto	l1870
  7266  0051                     l1876:	
  7267  0051  3001               	movlw	1
  7268  0052  02F3               	subwf	___ftpack@exp,f
  7269  0053  3001               	movlw	1
  7270  0054                     u2245:	
  7271  0054  35F0               	lslf	___ftpack@arg,f
  7272  0055  0DF1               	rlf	___ftpack@arg+1,f
  7273  0056  0DF2               	rlf	___ftpack@arg+2,f
  7274  0057  0B89               	decfsz	9,f
  7275  0058  2854               	goto	u2245
  7276  0059                     l1878:	
  7277  0059  1BF1               	btfsc	___ftpack@arg+1,7
  7278  005A  285F               	goto	l480
  7279  005B  3002               	movlw	2
  7280  005C  0273               	subwf	___ftpack@exp,w
  7281  005D  1803               	skipnc
  7282  005E  2851               	goto	l1876
  7283  005F                     l480:	
  7284  005F  1873               	btfsc	___ftpack@exp,0
  7285  0060  2867               	goto	l481
  7286  0061  30FF               	movlw	255
  7287  0062  05F0               	andwf	___ftpack@arg,f
  7288  0063  307F               	movlw	127
  7289  0064  05F1               	andwf	___ftpack@arg+1,f
  7290  0065  30FF               	movlw	255
  7291  0066  05F2               	andwf	___ftpack@arg+2,f
  7292  0067                     l481:	
  7293  0067  1003               	clrc
  7294  0068  0CF3               	rrf	___ftpack@exp,f
  7295  0069  0873               	movf	___ftpack@exp,w
  7296  006A  00F5               	movwf	??___ftpack
  7297  006B  01F6               	clrf	??___ftpack+1
  7298  006C  01F7               	clrf	??___ftpack+2
  7299  006D  3010               	movlw	16
  7300  006E                     u2285:	
  7301  006E  35F5               	lslf	??___ftpack,f
  7302  006F  0DF6               	rlf	??___ftpack+1,f
  7303  0070  0DF7               	rlf	??___ftpack+2,f
  7304  0071  0B89               	decfsz	9,f
  7305  0072  286E               	goto	u2285
  7306  0073  0875               	movf	??___ftpack,w
  7307  0074  04F0               	iorwf	___ftpack@arg,f
  7308  0075  0876               	movf	??___ftpack+1,w
  7309  0076  04F1               	iorwf	___ftpack@arg+1,f
  7310  0077  0877               	movf	??___ftpack+2,w
  7311  0078  04F2               	iorwf	___ftpack@arg+2,f
  7312  0079  0874               	movf	___ftpack@sign,w
  7313  007A  1903               	btfsc	3,2
  7314  007B  0008               	return
  7315  007C  17F2               	bsf	___ftpack@arg+2,7
  7316  007D  0008               	return
  7317  007E                     __end_of___ftpack:	
  7318                           
  7319                           	psect	text22
  7320  1327                     __ptext22:	
  7321 ;; *************** function _Lcd_Out2 *****************
  7322 ;; Defined at:
  7323 ;;		line 115 in file "flex_lcd.h"
  7324 ;; Parameters:    Size  Location     Type
  7325 ;;  y               1    wreg     unsigned char 
  7326 ;;  x               1    3[COMMON] unsigned char 
  7327 ;;  buffer          1    4[COMMON] PTR unsigned char 
  7328 ;;		 -> main@buffer1(16), 
  7329 ;; Auto vars:     Size  Location     Type
  7330 ;;  y               1    6[COMMON] unsigned char 
  7331 ;;  data            1    7[COMMON] unsigned char 
  7332 ;; Return value:  Size  Location     Type
  7333 ;;                  1    wreg      void 
  7334 ;; Registers used:
  7335 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7336 ;; Tracked objects:
  7337 ;;		On entry : 0/0
  7338 ;;		On exit  : 0/0
  7339 ;;		Unchanged: 0/0
  7340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7341 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7342 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7343 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7344 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7345 ;;Total ram usage:        5 bytes
  7346 ;; Hardware stack levels used:    1
  7347 ;; Hardware stack levels required when called:    1
  7348 ;; This function calls:
  7349 ;;		_Lcd_Chr_CP
  7350 ;;		_Lcd_Cmd
  7351 ;; This function is called by:
  7352 ;;		_main
  7353 ;; This function uses a non-reentrant model
  7354 ;;
  7355                           
  7356                           
  7357                           ;psect for function _Lcd_Out2
  7358  1327                     _Lcd_Out2:	
  7359                           
  7360                           ;incstack = 0
  7361                           ; Regs used in _Lcd_Out2: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7362                           ;Lcd_Out2@y stored from wreg
  7363  1327  00F6               	movwf	Lcd_Out2@y
  7364                           
  7365                           ;flex_lcd.h: 117: unsigned char data;
  7366                           ;flex_lcd.h: 118: switch (y)
  7367  1328  2B38               	goto	l2526
  7368  1329                     l2516:	
  7369                           ;flex_lcd.h: 119: {
  7370                           ;flex_lcd.h: 120: case 1: data = 128 + x; break;
  7371                           
  7372  1329  0873               	movf	Lcd_Out2@x,w
  7373  132A  3E80               	addlw	128
  7374  132B  2B34               	goto	L12
  7375  132C                     l2518:	
  7376                           ;flex_lcd.h: 121: case 2: data = 192 + x; break;
  7377                           
  7378  132C  0873               	movf	Lcd_Out2@x,w
  7379  132D  3EC0               	addlw	192
  7380  132E  2B34               	goto	L12
  7381  132F                     l2520:	
  7382                           ;flex_lcd.h: 122: case 3: data = 148 + x; break;
  7383                           
  7384  132F  0873               	movf	Lcd_Out2@x,w
  7385  1330  3E94               	addlw	148
  7386  1331  2B34               	goto	L12
  7387  1332                     l2522:	
  7388                           ;flex_lcd.h: 123: case 4: data = 212 + x; break;
  7389                           
  7390  1332  0873               	movf	Lcd_Out2@x,w
  7391  1333  3ED4               	addlw	212
  7392  1334                     L12:	
  7393  1334  00F5               	movwf	??_Lcd_Out2
  7394  1335  0875               	movf	??_Lcd_Out2,w
  7395  1336  00F7               	movwf	Lcd_Out2@data
  7396                           
  7397                           ;flex_lcd.h: 125: }
  7398                           
  7399                           ;flex_lcd.h: 124: default: break;
  7400  1337  2B46               	goto	l2528
  7401  1338                     l2526:	
  7402  1338  0876               	movf	Lcd_Out2@y,w
  7403                           
  7404                           ; Switch size 1, requested type "space"
  7405                           ; Number of cases is 4, Range of values is 1 to 4
  7406                           ; switch strategies available:
  7407                           ; Name         Instructions Cycles
  7408                           ; simple_byte           13     7 (average)
  7409                           ; direct_byte           17     9 (fixed)
  7410                           ; jumptable            263     9 (fixed)
  7411                           ;	Chosen strategy is simple_byte
  7412  1339  3A01               	xorlw	1	; case 1
  7413  133A  1903               	skipnz
  7414  133B  2B29               	goto	l2516
  7415  133C  3A03               	xorlw	3	; case 2
  7416  133D  1903               	skipnz
  7417  133E  2B2C               	goto	l2518
  7418  133F  3A01               	xorlw	1	; case 3
  7419  1340  1903               	skipnz
  7420  1341  2B2F               	goto	l2520
  7421  1342  3A07               	xorlw	7	; case 4
  7422  1343  1903               	skipnz
  7423  1344  2B32               	goto	l2522
  7424  1345  2B46               	goto	l2528
  7425  1346                     l2528:	
  7426                           
  7427                           ;flex_lcd.h: 126: Lcd_Cmd(data);
  7428  1346  0877               	movf	Lcd_Out2@data,w
  7429  1347  3194  24C3  3193   	fcall	_Lcd_Cmd
  7430  134A                     l2534:	
  7431                           ;flex_lcd.h: 127: while(*buffer)
  7432                           
  7433  134A  0874               	movf	Lcd_Out2@buffer,w
  7434  134B  0086               	movwf	6
  7435  134C  0187               	clrf	7
  7436  134D  0801               	movf	1,w
  7437  134E  1903               	btfsc	3,2
  7438  134F  0008               	return
  7439                           
  7440                           ;flex_lcd.h: 128: {
  7441                           ;flex_lcd.h: 129: Lcd_Chr_CP(*buffer);
  7442  1350  0874               	movf	Lcd_Out2@buffer,w
  7443  1351  0086               	movwf	6
  7444  1352  0187               	clrf	7
  7445  1353  0801               	movf	1,w
  7446  1354  3195  255C  3193   	fcall	_Lcd_Chr_CP
  7447                           
  7448                           ;flex_lcd.h: 130: buffer++;
  7449  1357  3001               	movlw	1
  7450  1358  00F5               	movwf	??_Lcd_Out2
  7451  1359  0875               	movf	??_Lcd_Out2,w
  7452  135A  07F4               	addwf	Lcd_Out2@buffer,f
  7453  135B  2B4A               	goto	l2534
  7454  135C                     __end_of_Lcd_Out2:	
  7455                           ;flex_lcd.h: 131: }
  7456                           ;flex_lcd.h: 132: return;
  7457                           
  7458                           
  7459                           	psect	text23
  7460  155C                     __ptext23:	
  7461 ;; *************** function _Lcd_Chr_CP *****************
  7462 ;; Defined at:
  7463 ;;		line 136 in file "flex_lcd.h"
  7464 ;; Parameters:    Size  Location     Type
  7465 ;;  data            1    wreg     unsigned char 
  7466 ;; Auto vars:     Size  Location     Type
  7467 ;;  data            1    2[COMMON] unsigned char 
  7468 ;; Return value:  Size  Location     Type
  7469 ;;                  1    wreg      void 
  7470 ;; Registers used:
  7471 ;;		wreg, status,2, status,0
  7472 ;; Tracked objects:
  7473 ;;		On entry : 0/0
  7474 ;;		On exit  : 0/0
  7475 ;;		Unchanged: 0/0
  7476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7478 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7479 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7480 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7481 ;;Total ram usage:        3 bytes
  7482 ;; Hardware stack levels used:    1
  7483 ;; This function calls:
  7484 ;;		Nothing
  7485 ;; This function is called by:
  7486 ;;		_Lcd_Out2
  7487 ;;		_Lcd_Out
  7488 ;; This function uses a non-reentrant model
  7489 ;;
  7490                           
  7491                           
  7492                           ;psect for function _Lcd_Chr_CP
  7493  155C                     _Lcd_Chr_CP:	
  7494                           
  7495                           ;incstack = 0
  7496                           ; Regs used in _Lcd_Chr_CP: [wreg+status,2+status,0]
  7497                           ;Lcd_Chr_CP@data stored from wreg
  7498  155C  00F2               	movwf	Lcd_Chr_CP@data
  7499                           
  7500                           ;flex_lcd.h: 137: PORTCbits.RC1 = 0; PORTCbits.RC0 = 1;
  7501  155D  0020               	movlb	0	; select bank0
  7502  155E  108E               	bcf	14,1	;volatile
  7503  155F  140E               	bsf	14,0	;volatile
  7504                           
  7505                           ;flex_lcd.h: 138: PORTCbits.RC5 = (data & 0b10000000)>>7; PORTCbits.RC4 = (data & 0b0100
      +                          0000)>>6;
  7506  1560  0872               	movf	Lcd_Chr_CP@data,w
  7507  1561  00F0               	movwf	??_Lcd_Chr_CP
  7508  1562  3007               	movlw	7
  7509  1563                     u2945:	
  7510  1563  36F0               	lsrf	??_Lcd_Chr_CP,f
  7511  1564  0B89               	decfsz	9,f
  7512  1565  2D63               	goto	u2945
  7513  1566  0870               	movf	??_Lcd_Chr_CP,w
  7514  1567  3901               	andlw	1
  7515  1568  00F1               	movwf	??_Lcd_Chr_CP+1
  7516  1569  0EF1               	swapf	??_Lcd_Chr_CP+1,f
  7517  156A  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  7518  156B  080E               	movf	14,w	;volatile
  7519  156C  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7520  156D  39DF               	andlw	-33
  7521  156E  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7522  156F  008E               	movwf	14	;volatile
  7523  1570  0872               	movf	Lcd_Chr_CP@data,w
  7524  1571  00F0               	movwf	??_Lcd_Chr_CP
  7525  1572  3006               	movlw	6
  7526  1573                     u2955:	
  7527  1573  36F0               	lsrf	??_Lcd_Chr_CP,f
  7528  1574  0B89               	decfsz	9,f
  7529  1575  2D73               	goto	u2955
  7530  1576  0870               	movf	??_Lcd_Chr_CP,w
  7531  1577  3901               	andlw	1
  7532  1578  00F1               	movwf	??_Lcd_Chr_CP+1
  7533  1579  0EF1               	swapf	??_Lcd_Chr_CP+1,f
  7534  157A  080E               	movf	14,w	;volatile
  7535  157B  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7536  157C  39EF               	andlw	-17
  7537  157D  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7538  157E  008E               	movwf	14	;volatile
  7539                           
  7540                           ;flex_lcd.h: 139: PORTCbits.RC3 = (data & 0b00100000)>>5; PORTCbits.RC2 = (data & 0b0001
      +                          0000)>>4;
  7541  157F  0872               	movf	Lcd_Chr_CP@data,w
  7542  1580  00F0               	movwf	??_Lcd_Chr_CP
  7543  1581  3005               	movlw	5
  7544  1582                     u2965:	
  7545  1582  36F0               	lsrf	??_Lcd_Chr_CP,f
  7546  1583  0B89               	decfsz	9,f
  7547  1584  2D82               	goto	u2965
  7548  1585  0870               	movf	??_Lcd_Chr_CP,w
  7549  1586  3901               	andlw	1
  7550  1587  00F1               	movwf	??_Lcd_Chr_CP+1
  7551  1588  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  7552  1589  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  7553  158A  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  7554  158B  080E               	movf	14,w	;volatile
  7555  158C  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7556  158D  39F7               	andlw	-9
  7557  158E  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7558  158F  008E               	movwf	14	;volatile
  7559  1590  0872               	movf	Lcd_Chr_CP@data,w
  7560  1591  00F0               	movwf	??_Lcd_Chr_CP
  7561  1592  3004               	movlw	4
  7562  1593                     u2975:	
  7563  1593  36F0               	lsrf	??_Lcd_Chr_CP,f
  7564  1594  0B89               	decfsz	9,f
  7565  1595  2D93               	goto	u2975
  7566  1596  0870               	movf	??_Lcd_Chr_CP,w
  7567  1597  3901               	andlw	1
  7568  1598  00F1               	movwf	??_Lcd_Chr_CP+1
  7569  1599  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  7570  159A  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  7571  159B  080E               	movf	14,w	;volatile
  7572  159C  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7573  159D  39FB               	andlw	-5
  7574  159E  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7575  159F  008E               	movwf	14	;volatile
  7576                           
  7577                           ;flex_lcd.h: 140: _delay(10);
  7578  15A0  3003               	movlw	3
  7579  15A1  00F0               	movwf	??_Lcd_Chr_CP
  7580  15A2                     u4377:	
  7581  15A2  0BF0               	decfsz	??_Lcd_Chr_CP,f
  7582  15A3  2DA2               	goto	u4377
  7583                           
  7584                           ;flex_lcd.h: 141: PORTCbits.RC1 = 1; _delay((unsigned long)((5)*(32000000/4000000.0))); 
      +                          PORTCbits.RC1 = 0;
  7585  15A4  0020               	movlb	0	; select bank0
  7586  15A5  148E               	bsf	14,1	;volatile
  7587  15A6  300D               	movlw	13
  7588  15A7  00F0               	movwf	??_Lcd_Chr_CP
  7589  15A8                     u4387:	
  7590  15A8  0BF0               	decfsz	??_Lcd_Chr_CP,f
  7591  15A9  2DA8               	goto	u4387
  7592  15AA  0020               	movlb	0	; select bank0
  7593  15AB  108E               	bcf	14,1	;volatile
  7594                           
  7595                           ;flex_lcd.h: 142: PORTCbits.RC5 = (data & 0b00001000)>>3; PORTCbits.RC4 = (data & 0b0000
      +                          0100)>>2;
  7596  15AC  0872               	movf	Lcd_Chr_CP@data,w
  7597  15AD  00F0               	movwf	??_Lcd_Chr_CP
  7598  15AE  3003               	movlw	3
  7599  15AF                     u2985:	
  7600  15AF  36F0               	lsrf	??_Lcd_Chr_CP,f
  7601  15B0  0B89               	decfsz	9,f
  7602  15B1  2DAF               	goto	u2985
  7603  15B2  0870               	movf	??_Lcd_Chr_CP,w
  7604  15B3  3901               	andlw	1
  7605  15B4  00F1               	movwf	??_Lcd_Chr_CP+1
  7606  15B5  0EF1               	swapf	??_Lcd_Chr_CP+1,f
  7607  15B6  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  7608  15B7  080E               	movf	14,w	;volatile
  7609  15B8  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7610  15B9  39DF               	andlw	-33
  7611  15BA  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7612  15BB  008E               	movwf	14	;volatile
  7613  15BC  0872               	movf	Lcd_Chr_CP@data,w
  7614  15BD  00F0               	movwf	??_Lcd_Chr_CP
  7615  15BE  3002               	movlw	2
  7616  15BF                     u2995:	
  7617  15BF  36F0               	lsrf	??_Lcd_Chr_CP,f
  7618  15C0  0B89               	decfsz	9,f
  7619  15C1  2DBF               	goto	u2995
  7620  15C2  0870               	movf	??_Lcd_Chr_CP,w
  7621  15C3  3901               	andlw	1
  7622  15C4  00F1               	movwf	??_Lcd_Chr_CP+1
  7623  15C5  0EF1               	swapf	??_Lcd_Chr_CP+1,f
  7624  15C6  080E               	movf	14,w	;volatile
  7625  15C7  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7626  15C8  39EF               	andlw	-17
  7627  15C9  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7628  15CA  008E               	movwf	14	;volatile
  7629                           
  7630                           ;flex_lcd.h: 143: PORTCbits.RC3 = (data & 0b00000010)>>1; PORTCbits.RC2 = (data & 0b0000
      +                          0001);
  7631  15CB  3672               	lsrf	Lcd_Chr_CP@data,w
  7632  15CC  3901               	andlw	1
  7633  15CD  00F0               	movwf	??_Lcd_Chr_CP
  7634  15CE  0DF0               	rlf	??_Lcd_Chr_CP,f
  7635  15CF  0DF0               	rlf	??_Lcd_Chr_CP,f
  7636  15D0  0DF0               	rlf	??_Lcd_Chr_CP,f
  7637  15D1  080E               	movf	14,w	;volatile
  7638  15D2  0670               	xorwf	??_Lcd_Chr_CP,w
  7639  15D3  39F7               	andlw	-9
  7640  15D4  0670               	xorwf	??_Lcd_Chr_CP,w
  7641  15D5  008E               	movwf	14	;volatile
  7642  15D6  0872               	movf	Lcd_Chr_CP@data,w
  7643  15D7  3901               	andlw	1
  7644  15D8  00F0               	movwf	??_Lcd_Chr_CP
  7645  15D9  0DF0               	rlf	??_Lcd_Chr_CP,f
  7646  15DA  0DF0               	rlf	??_Lcd_Chr_CP,f
  7647  15DB  080E               	movf	14,w	;volatile
  7648  15DC  0670               	xorwf	??_Lcd_Chr_CP,w
  7649  15DD  39FB               	andlw	-5
  7650  15DE  0670               	xorwf	??_Lcd_Chr_CP,w
  7651  15DF  008E               	movwf	14	;volatile
  7652                           
  7653                           ;flex_lcd.h: 144: _delay(10);
  7654  15E0  3003               	movlw	3
  7655  15E1  00F0               	movwf	??_Lcd_Chr_CP
  7656  15E2                     u4397:	
  7657  15E2  0BF0               	decfsz	??_Lcd_Chr_CP,f
  7658  15E3  2DE2               	goto	u4397
  7659                           
  7660                           ;flex_lcd.h: 145: PORTCbits.RC1 = 1; _delay((unsigned long)((5)*(32000000/4000000.0))); 
      +                          PORTCbits.RC1 = 0;
  7661  15E4  0020               	movlb	0	; select bank0
  7662  15E5  148E               	bsf	14,1	;volatile
  7663  15E6  300D               	movlw	13
  7664  15E7  00F0               	movwf	??_Lcd_Chr_CP
  7665  15E8                     u4407:	
  7666  15E8  0BF0               	decfsz	??_Lcd_Chr_CP,f
  7667  15E9  2DE8               	goto	u4407
  7668  15EA  0020               	movlb	0	; select bank0
  7669  15EB  108E               	bcf	14,1	;volatile
  7670                           
  7671                           ;flex_lcd.h: 146: _delay((unsigned long)((5)*(32000000/4000000.0))); _delay((unsigned lo
      +                          ng)((5500)*(32000000/4000000.0)));
  7672  15EC  300D               	movlw	13
  7673  15ED  00F0               	movwf	??_Lcd_Chr_CP
  7674  15EE                     u4417:	
  7675  15EE  0BF0               	decfsz	??_Lcd_Chr_CP,f
  7676  15EF  2DEE               	goto	u4417
  7677  15F0  303A               	movlw	58
  7678  15F1  00F1               	movwf	??_Lcd_Chr_CP+1
  7679  15F2  3023               	movlw	35
  7680  15F3  00F0               	movwf	??_Lcd_Chr_CP
  7681  15F4                     u4427:	
  7682  15F4  0BF0               	decfsz	??_Lcd_Chr_CP,f
  7683  15F5  2DF4               	goto	u4427
  7684  15F6  0BF1               	decfsz	??_Lcd_Chr_CP+1,f
  7685  15F7  2DF4               	goto	u4427
  7686  15F8  0008               	return
  7687  15F9                     __end_of_Lcd_Chr_CP:	
  7688                           
  7689                           	psect	text24
  7690  16A2                     __ptext24:	
  7691 ;; *************** function _Lcd_Init *****************
  7692 ;; Defined at:
  7693 ;;		line 52 in file "flex_lcd.h"
  7694 ;; Parameters:    Size  Location     Type
  7695 ;;		None
  7696 ;; Auto vars:     Size  Location     Type
  7697 ;;  data            1    5[COMMON] unsigned char 
  7698 ;; Return value:  Size  Location     Type
  7699 ;;                  1    wreg      void 
  7700 ;; Registers used:
  7701 ;;		wreg, status,2, status,0, pclath, cstack
  7702 ;; Tracked objects:
  7703 ;;		On entry : 0/0
  7704 ;;		On exit  : 0/0
  7705 ;;		Unchanged: 0/0
  7706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7708 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7709 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7710 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7711 ;;Total ram usage:        3 bytes
  7712 ;; Hardware stack levels used:    1
  7713 ;; Hardware stack levels required when called:    1
  7714 ;; This function calls:
  7715 ;;		_Lcd_Cmd
  7716 ;; This function is called by:
  7717 ;;		_main
  7718 ;; This function uses a non-reentrant model
  7719 ;;
  7720                           
  7721                           
  7722                           ;psect for function _Lcd_Init
  7723  16A2                     _Lcd_Init:	
  7724                           
  7725                           ;flex_lcd.h: 53: unsigned char data;
  7726                           ;flex_lcd.h: 54: TRISCbits.TRISC5 = 0;
  7727                           
  7728                           ;incstack = 0
  7729                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  7730  16A2  0021               	movlb	1	; select bank1
  7731  16A3  128E               	bcf	14,5	;volatile
  7732                           
  7733                           ;flex_lcd.h: 55: TRISCbits.TRISC4 = 0;
  7734  16A4  120E               	bcf	14,4	;volatile
  7735                           
  7736                           ;flex_lcd.h: 56: TRISCbits.TRISC3 = 0;
  7737  16A5  118E               	bcf	14,3	;volatile
  7738                           
  7739                           ;flex_lcd.h: 57: TRISCbits.TRISC2 = 0;
  7740  16A6  110E               	bcf	14,2	;volatile
  7741                           
  7742                           ;flex_lcd.h: 58: TRISCbits.TRISC1 = 0;
  7743  16A7  108E               	bcf	14,1	;volatile
  7744                           
  7745                           ;flex_lcd.h: 59: TRISCbits.TRISC0 = 0;
  7746  16A8  100E               	bcf	14,0	;volatile
  7747                           
  7748                           ;flex_lcd.h: 60: PORTCbits.RC5 = 0;
  7749  16A9  0020               	movlb	0	; select bank0
  7750  16AA  128E               	bcf	14,5	;volatile
  7751                           
  7752                           ;flex_lcd.h: 61: PORTCbits.RC4 = 0;
  7753  16AB  120E               	bcf	14,4	;volatile
  7754                           
  7755                           ;flex_lcd.h: 62: PORTCbits.RC3 = 0;
  7756  16AC  118E               	bcf	14,3	;volatile
  7757                           
  7758                           ;flex_lcd.h: 63: PORTCbits.RC2 = 0;
  7759  16AD  110E               	bcf	14,2	;volatile
  7760                           
  7761                           ;flex_lcd.h: 64: PORTCbits.RC1 = 0;
  7762  16AE  108E               	bcf	14,1	;volatile
  7763                           
  7764                           ;flex_lcd.h: 65: PORTCbits.RC0 = 0;
  7765  16AF  100E               	bcf	14,0	;volatile
  7766                           
  7767                           ;flex_lcd.h: 66: _delay((unsigned long)((5500)*(32000000/4000000.0)));
  7768  16B0  303A               	movlw	58
  7769  16B1  00F4               	movwf	??_Lcd_Init+1
  7770  16B2  3023               	movlw	35
  7771  16B3  00F3               	movwf	??_Lcd_Init
  7772  16B4                     u4437:	
  7773  16B4  0BF3               	decfsz	??_Lcd_Init,f
  7774  16B5  2EB4               	goto	u4437
  7775  16B6  0BF4               	decfsz	??_Lcd_Init+1,f
  7776  16B7  2EB4               	goto	u4437
  7777                           
  7778                           ;flex_lcd.h: 67: _delay((unsigned long)((5500)*(32000000/4000000.0)));
  7779  16B8  303A               	movlw	58
  7780  16B9  00F4               	movwf	??_Lcd_Init+1
  7781  16BA  3023               	movlw	35
  7782  16BB  00F3               	movwf	??_Lcd_Init
  7783  16BC                     u4447:	
  7784  16BC  0BF3               	decfsz	??_Lcd_Init,f
  7785  16BD  2EBC               	goto	u4447
  7786  16BE  0BF4               	decfsz	??_Lcd_Init+1,f
  7787  16BF  2EBC               	goto	u4447
  7788                           
  7789                           ;flex_lcd.h: 68: _delay((unsigned long)((5500)*(32000000/4000000.0)));
  7790  16C0  303A               	movlw	58
  7791  16C1  00F4               	movwf	??_Lcd_Init+1
  7792  16C2  3023               	movlw	35
  7793  16C3  00F3               	movwf	??_Lcd_Init
  7794  16C4                     u4457:	
  7795  16C4  0BF3               	decfsz	??_Lcd_Init,f
  7796  16C5  2EC4               	goto	u4457
  7797  16C6  0BF4               	decfsz	??_Lcd_Init+1,f
  7798  16C7  2EC4               	goto	u4457
  7799                           
  7800                           ;flex_lcd.h: 69: _delay((unsigned long)((5500)*(32000000/4000000.0)));
  7801  16C8  303A               	movlw	58
  7802  16C9  00F4               	movwf	??_Lcd_Init+1
  7803  16CA  3023               	movlw	35
  7804  16CB  00F3               	movwf	??_Lcd_Init
  7805  16CC                     u4467:	
  7806  16CC  0BF3               	decfsz	??_Lcd_Init,f
  7807  16CD  2ECC               	goto	u4467
  7808  16CE  0BF4               	decfsz	??_Lcd_Init+1,f
  7809  16CF  2ECC               	goto	u4467
  7810                           
  7811                           ;flex_lcd.h: 70: _delay((unsigned long)((5500)*(32000000/4000000.0)));
  7812  16D0  303A               	movlw	58
  7813  16D1  00F4               	movwf	??_Lcd_Init+1
  7814  16D2  3023               	movlw	35
  7815  16D3  00F3               	movwf	??_Lcd_Init
  7816  16D4                     u4477:	
  7817  16D4  0BF3               	decfsz	??_Lcd_Init,f
  7818  16D5  2ED4               	goto	u4477
  7819  16D6  0BF4               	decfsz	??_Lcd_Init+1,f
  7820  16D7  2ED4               	goto	u4477
  7821                           
  7822                           ;flex_lcd.h: 71: _delay((unsigned long)((5500)*(32000000/4000000.0)));
  7823  16D8  303A               	movlw	58
  7824  16D9  00F4               	movwf	??_Lcd_Init+1
  7825  16DA  3023               	movlw	35
  7826  16DB  00F3               	movwf	??_Lcd_Init
  7827  16DC                     u4487:	
  7828  16DC  0BF3               	decfsz	??_Lcd_Init,f
  7829  16DD  2EDC               	goto	u4487
  7830  16DE  0BF4               	decfsz	??_Lcd_Init+1,f
  7831  16DF  2EDC               	goto	u4487
  7832                           
  7833                           ;flex_lcd.h: 72: for(data = 1; data < 4; data ++)
  7834  16E0  01F5               	clrf	Lcd_Init@data
  7835  16E1  0AF5               	incf	Lcd_Init@data,f
  7836  16E2  3004               	movlw	4
  7837  16E3  0275               	subwf	Lcd_Init@data,w
  7838  16E4  1803               	btfsc	3,0
  7839  16E5  2F0E               	goto	l32
  7840  16E6                     l31:	
  7841                           
  7842                           ;flex_lcd.h: 73: {
  7843                           ;flex_lcd.h: 74: PORTCbits.RC5 = 0; PORTCbits.RC4 = 0; PORTCbits.RC3 = 1; PORTCbits.RC2 
      +                          = 1; PORTCbits.RC1 = 0;
  7844  16E6  0020               	movlb	0	; select bank0
  7845  16E7  128E               	bcf	14,5	;volatile
  7846  16E8  120E               	bcf	14,4	;volatile
  7847  16E9  158E               	bsf	14,3	;volatile
  7848  16EA  150E               	bsf	14,2	;volatile
  7849  16EB  108E               	bcf	14,1	;volatile
  7850                           
  7851                           ;flex_lcd.h: 75: PORTCbits.RC0 = 0; PORTCbits.RC5 = 0; PORTCbits.RC4 = 0; PORTCbits.RC3 
      +                          = 1; PORTCbits.RC2 = 1;
  7852  16EC  100E               	bcf	14,0	;volatile
  7853  16ED  128E               	bcf	14,5	;volatile
  7854  16EE  120E               	bcf	14,4	;volatile
  7855  16EF  158E               	bsf	14,3	;volatile
  7856  16F0  150E               	bsf	14,2	;volatile
  7857                           
  7858                           ;flex_lcd.h: 76: PORTCbits.RC1 = 1; PORTCbits.RC0 = 0;
  7859  16F1  148E               	bsf	14,1	;volatile
  7860  16F2  100E               	bcf	14,0	;volatile
  7861                           
  7862                           ;flex_lcd.h: 77: _delay((unsigned long)((5)*(32000000/4000000.0)));
  7863  16F3  300D               	movlw	13
  7864  16F4  00F3               	movwf	??_Lcd_Init
  7865  16F5                     u4497:	
  7866  16F5  0BF3               	decfsz	??_Lcd_Init,f
  7867  16F6  2EF5               	goto	u4497
  7868                           
  7869                           ;flex_lcd.h: 78: PORTCbits.RC5 = 0; PORTCbits.RC4 = 0; PORTCbits.RC3 = 1; PORTCbits.RC2 
      +                          = 1; PORTCbits.RC1 = 0;
  7870  16F7  0020               	movlb	0	; select bank0
  7871  16F8  128E               	bcf	14,5	;volatile
  7872  16F9  120E               	bcf	14,4	;volatile
  7873  16FA  158E               	bsf	14,3	;volatile
  7874  16FB  150E               	bsf	14,2	;volatile
  7875  16FC  108E               	bcf	14,1	;volatile
  7876                           
  7877                           ;flex_lcd.h: 79: PORTCbits.RC0 = 0;
  7878  16FD  100E               	bcf	14,0	;volatile
  7879                           
  7880                           ;flex_lcd.h: 80: _delay((unsigned long)((5500)*(32000000/4000000.0)));
  7881  16FE  303A               	movlw	58
  7882  16FF  00F4               	movwf	??_Lcd_Init+1
  7883  1700  3023               	movlw	35
  7884  1701  00F3               	movwf	??_Lcd_Init
  7885  1702                     u4507:	
  7886  1702  0BF3               	decfsz	??_Lcd_Init,f
  7887  1703  2F02               	goto	u4507
  7888  1704  0BF4               	decfsz	??_Lcd_Init+1,f
  7889  1705  2F02               	goto	u4507
  7890  1706  3001               	movlw	1
  7891  1707  00F3               	movwf	??_Lcd_Init
  7892  1708  0873               	movf	??_Lcd_Init,w
  7893  1709  07F5               	addwf	Lcd_Init@data,f
  7894  170A  3004               	movlw	4
  7895  170B  0275               	subwf	Lcd_Init@data,w
  7896  170C  1C03               	skipc
  7897  170D  2EE6               	goto	l31
  7898  170E                     l32:	
  7899                           
  7900                           ;flex_lcd.h: 81: }
  7901                           ;flex_lcd.h: 82: PORTCbits.RC5 = 0; PORTCbits.RC4 = 0; PORTCbits.RC3 = 1; PORTCbits.RC2 
      +                          = 0; PORTCbits.RC1 = 0; PORTCbits.RC0 = 0;
  7902  170E  0020               	movlb	0	; select bank0
  7903  170F  128E               	bcf	14,5	;volatile
  7904  1710  120E               	bcf	14,4	;volatile
  7905  1711  158E               	bsf	14,3	;volatile
  7906  1712  110E               	bcf	14,2	;volatile
  7907  1713  108E               	bcf	14,1	;volatile
  7908  1714  100E               	bcf	14,0	;volatile
  7909                           
  7910                           ;flex_lcd.h: 83: PORTCbits.RC5 = 0; PORTCbits.RC4 = 0; PORTCbits.RC3 = 1; PORTCbits.RC2 
      +                          = 0; PORTCbits.RC1 = 1; PORTCbits.RC0 = 0;
  7911  1715  128E               	bcf	14,5	;volatile
  7912  1716  120E               	bcf	14,4	;volatile
  7913  1717  158E               	bsf	14,3	;volatile
  7914  1718  110E               	bcf	14,2	;volatile
  7915  1719  148E               	bsf	14,1	;volatile
  7916  171A  100E               	bcf	14,0	;volatile
  7917                           
  7918                           ;flex_lcd.h: 84: _delay((unsigned long)((5)*(32000000/4000000.0)));
  7919  171B  300D               	movlw	13
  7920  171C  00F3               	movwf	??_Lcd_Init
  7921  171D                     u4517:	
  7922  171D  0BF3               	decfsz	??_Lcd_Init,f
  7923  171E  2F1D               	goto	u4517
  7924                           
  7925                           ;flex_lcd.h: 85: PORTCbits.RC5 = 0; PORTCbits.RC4 = 0; PORTCbits.RC3 = 1; PORTCbits.RC2 
      +                          = 0; PORTCbits.RC1 = 0; PORTCbits.RC0 = 0;
  7926  171F  0020               	movlb	0	; select bank0
  7927  1720  128E               	bcf	14,5	;volatile
  7928  1721  120E               	bcf	14,4	;volatile
  7929  1722  158E               	bsf	14,3	;volatile
  7930  1723  110E               	bcf	14,2	;volatile
  7931  1724  108E               	bcf	14,1	;volatile
  7932  1725  100E               	bcf	14,0	;volatile
  7933                           
  7934                           ;flex_lcd.h: 86: _delay((unsigned long)((5500)*(32000000/4000000.0)));
  7935  1726  303A               	movlw	58
  7936  1727  00F4               	movwf	??_Lcd_Init+1
  7937  1728  3023               	movlw	35
  7938  1729  00F3               	movwf	??_Lcd_Init
  7939  172A                     u4527:	
  7940  172A  0BF3               	decfsz	??_Lcd_Init,f
  7941  172B  2F2A               	goto	u4527
  7942  172C  0BF4               	decfsz	??_Lcd_Init+1,f
  7943  172D  2F2A               	goto	u4527
  7944                           
  7945                           ;flex_lcd.h: 87: data = 40; Lcd_Cmd(data);
  7946  172E  3028               	movlw	40
  7947  172F  00F3               	movwf	??_Lcd_Init
  7948  1730  0873               	movf	??_Lcd_Init,w
  7949  1731  00F5               	movwf	Lcd_Init@data
  7950  1732  0875               	movf	Lcd_Init@data,w
  7951  1733  3194  24C3  3196   	fcall	_Lcd_Cmd
  7952                           
  7953                           ;flex_lcd.h: 88: data = 16; Lcd_Cmd(data);
  7954  1736  3010               	movlw	16
  7955  1737  00F3               	movwf	??_Lcd_Init
  7956  1738  0873               	movf	??_Lcd_Init,w
  7957  1739  00F5               	movwf	Lcd_Init@data
  7958  173A  0875               	movf	Lcd_Init@data,w
  7959  173B  3194  24C3  3196   	fcall	_Lcd_Cmd
  7960                           
  7961                           ;flex_lcd.h: 89: data = 1; Lcd_Cmd(data);
  7962  173E  01F5               	clrf	Lcd_Init@data
  7963  173F  0AF5               	incf	Lcd_Init@data,f
  7964  1740  0875               	movf	Lcd_Init@data,w
  7965  1741  3194  24C3  3196   	fcall	_Lcd_Cmd
  7966                           
  7967                           ;flex_lcd.h: 90: data = 15; Lcd_Cmd(data);
  7968  1744  300F               	movlw	15
  7969  1745  00F3               	movwf	??_Lcd_Init
  7970  1746  0873               	movf	??_Lcd_Init,w
  7971  1747  00F5               	movwf	Lcd_Init@data
  7972  1748  0875               	movf	Lcd_Init@data,w
  7973  1749  3194  24C3         	fcall	_Lcd_Cmd
  7974  174B  0008               	return
  7975  174C                     __end_of_Lcd_Init:	
  7976                           
  7977                           	psect	text25
  7978  14C3                     __ptext25:	
  7979 ;; *************** function _Lcd_Cmd *****************
  7980 ;; Defined at:
  7981 ;;		line 150 in file "flex_lcd.h"
  7982 ;; Parameters:    Size  Location     Type
  7983 ;;  data            1    wreg     unsigned char 
  7984 ;; Auto vars:     Size  Location     Type
  7985 ;;  data            1    2[COMMON] unsigned char 
  7986 ;; Return value:  Size  Location     Type
  7987 ;;                  1    wreg      void 
  7988 ;; Registers used:
  7989 ;;		wreg, status,2, status,0
  7990 ;; Tracked objects:
  7991 ;;		On entry : 0/0
  7992 ;;		On exit  : 0/0
  7993 ;;		Unchanged: 0/0
  7994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7996 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7997 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7998 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7999 ;;Total ram usage:        3 bytes
  8000 ;; Hardware stack levels used:    1
  8001 ;; This function calls:
  8002 ;;		Nothing
  8003 ;; This function is called by:
  8004 ;;		_Lcd_Init
  8005 ;;		_Lcd_Out2
  8006 ;;		_main
  8007 ;;		_Lcd_Out
  8008 ;; This function uses a non-reentrant model
  8009 ;;
  8010                           
  8011                           
  8012                           ;psect for function _Lcd_Cmd
  8013  14C3                     _Lcd_Cmd:	
  8014                           
  8015                           ;incstack = 0
  8016                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0]
  8017                           ;Lcd_Cmd@data stored from wreg
  8018  14C3  00F2               	movwf	Lcd_Cmd@data
  8019                           
  8020                           ;flex_lcd.h: 151: PORTCbits.RC1 = 0; PORTCbits.RC0 = 0;
  8021  14C4  0020               	movlb	0	; select bank0
  8022  14C5  108E               	bcf	14,1	;volatile
  8023  14C6  100E               	bcf	14,0	;volatile
  8024                           
  8025                           ;flex_lcd.h: 152: PORTCbits.RC5 = (data & 0b10000000)>>7; PORTCbits.RC4 = (data & 0b0100
      +                          0000)>>6;
  8026  14C7  0872               	movf	Lcd_Cmd@data,w
  8027  14C8  00F0               	movwf	??_Lcd_Cmd
  8028  14C9  3007               	movlw	7
  8029  14CA                     u2885:	
  8030  14CA  36F0               	lsrf	??_Lcd_Cmd,f
  8031  14CB  0B89               	decfsz	9,f
  8032  14CC  2CCA               	goto	u2885
  8033  14CD  0870               	movf	??_Lcd_Cmd,w
  8034  14CE  3901               	andlw	1
  8035  14CF  00F1               	movwf	??_Lcd_Cmd+1
  8036  14D0  0EF1               	swapf	??_Lcd_Cmd+1,f
  8037  14D1  0DF1               	rlf	??_Lcd_Cmd+1,f
  8038  14D2  080E               	movf	14,w	;volatile
  8039  14D3  0671               	xorwf	??_Lcd_Cmd+1,w
  8040  14D4  39DF               	andlw	-33
  8041  14D5  0671               	xorwf	??_Lcd_Cmd+1,w
  8042  14D6  008E               	movwf	14	;volatile
  8043  14D7  0872               	movf	Lcd_Cmd@data,w
  8044  14D8  00F0               	movwf	??_Lcd_Cmd
  8045  14D9  3006               	movlw	6
  8046  14DA                     u2895:	
  8047  14DA  36F0               	lsrf	??_Lcd_Cmd,f
  8048  14DB  0B89               	decfsz	9,f
  8049  14DC  2CDA               	goto	u2895
  8050  14DD  0870               	movf	??_Lcd_Cmd,w
  8051  14DE  3901               	andlw	1
  8052  14DF  00F1               	movwf	??_Lcd_Cmd+1
  8053  14E0  0EF1               	swapf	??_Lcd_Cmd+1,f
  8054  14E1  080E               	movf	14,w	;volatile
  8055  14E2  0671               	xorwf	??_Lcd_Cmd+1,w
  8056  14E3  39EF               	andlw	-17
  8057  14E4  0671               	xorwf	??_Lcd_Cmd+1,w
  8058  14E5  008E               	movwf	14	;volatile
  8059                           
  8060                           ;flex_lcd.h: 153: PORTCbits.RC3 = (data & 0b00100000)>>5; PORTCbits.RC2 = (data & 0b0001
      +                          0000)>>4;
  8061  14E6  0872               	movf	Lcd_Cmd@data,w
  8062  14E7  00F0               	movwf	??_Lcd_Cmd
  8063  14E8  3005               	movlw	5
  8064  14E9                     u2905:	
  8065  14E9  36F0               	lsrf	??_Lcd_Cmd,f
  8066  14EA  0B89               	decfsz	9,f
  8067  14EB  2CE9               	goto	u2905
  8068  14EC  0870               	movf	??_Lcd_Cmd,w
  8069  14ED  3901               	andlw	1
  8070  14EE  00F1               	movwf	??_Lcd_Cmd+1
  8071  14EF  0DF1               	rlf	??_Lcd_Cmd+1,f
  8072  14F0  0DF1               	rlf	??_Lcd_Cmd+1,f
  8073  14F1  0DF1               	rlf	??_Lcd_Cmd+1,f
  8074  14F2  080E               	movf	14,w	;volatile
  8075  14F3  0671               	xorwf	??_Lcd_Cmd+1,w
  8076  14F4  39F7               	andlw	-9
  8077  14F5  0671               	xorwf	??_Lcd_Cmd+1,w
  8078  14F6  008E               	movwf	14	;volatile
  8079  14F7  0872               	movf	Lcd_Cmd@data,w
  8080  14F8  00F0               	movwf	??_Lcd_Cmd
  8081  14F9  3004               	movlw	4
  8082  14FA                     u2915:	
  8083  14FA  36F0               	lsrf	??_Lcd_Cmd,f
  8084  14FB  0B89               	decfsz	9,f
  8085  14FC  2CFA               	goto	u2915
  8086  14FD  0870               	movf	??_Lcd_Cmd,w
  8087  14FE  3901               	andlw	1
  8088  14FF  00F1               	movwf	??_Lcd_Cmd+1
  8089  1500  0DF1               	rlf	??_Lcd_Cmd+1,f
  8090  1501  0DF1               	rlf	??_Lcd_Cmd+1,f
  8091  1502  080E               	movf	14,w	;volatile
  8092  1503  0671               	xorwf	??_Lcd_Cmd+1,w
  8093  1504  39FB               	andlw	-5
  8094  1505  0671               	xorwf	??_Lcd_Cmd+1,w
  8095  1506  008E               	movwf	14	;volatile
  8096                           
  8097                           ;flex_lcd.h: 154: _delay(10);
  8098  1507  3003               	movlw	3
  8099  1508  00F0               	movwf	??_Lcd_Cmd
  8100  1509                     u4537:	
  8101  1509  0BF0               	decfsz	??_Lcd_Cmd,f
  8102  150A  2D09               	goto	u4537
  8103                           
  8104                           ;flex_lcd.h: 155: PORTCbits.RC1 = 1; _delay((unsigned long)((5)*(32000000/4000000.0))); 
      +                          PORTCbits.RC1 = 0;
  8105  150B  0020               	movlb	0	; select bank0
  8106  150C  148E               	bsf	14,1	;volatile
  8107  150D  300D               	movlw	13
  8108  150E  00F0               	movwf	??_Lcd_Cmd
  8109  150F                     u4547:	
  8110  150F  0BF0               	decfsz	??_Lcd_Cmd,f
  8111  1510  2D0F               	goto	u4547
  8112  1511  0020               	movlb	0	; select bank0
  8113  1512  108E               	bcf	14,1	;volatile
  8114                           
  8115                           ;flex_lcd.h: 156: PORTCbits.RC5 = (data & 0b00001000)>>3; PORTCbits.RC4 = (data & 0b0000
      +                          0100)>>2;
  8116  1513  0872               	movf	Lcd_Cmd@data,w
  8117  1514  00F0               	movwf	??_Lcd_Cmd
  8118  1515  3003               	movlw	3
  8119  1516                     u2925:	
  8120  1516  36F0               	lsrf	??_Lcd_Cmd,f
  8121  1517  0B89               	decfsz	9,f
  8122  1518  2D16               	goto	u2925
  8123  1519  0870               	movf	??_Lcd_Cmd,w
  8124  151A  3901               	andlw	1
  8125  151B  00F1               	movwf	??_Lcd_Cmd+1
  8126  151C  0EF1               	swapf	??_Lcd_Cmd+1,f
  8127  151D  0DF1               	rlf	??_Lcd_Cmd+1,f
  8128  151E  080E               	movf	14,w	;volatile
  8129  151F  0671               	xorwf	??_Lcd_Cmd+1,w
  8130  1520  39DF               	andlw	-33
  8131  1521  0671               	xorwf	??_Lcd_Cmd+1,w
  8132  1522  008E               	movwf	14	;volatile
  8133  1523  0872               	movf	Lcd_Cmd@data,w
  8134  1524  00F0               	movwf	??_Lcd_Cmd
  8135  1525  3002               	movlw	2
  8136  1526                     u2935:	
  8137  1526  36F0               	lsrf	??_Lcd_Cmd,f
  8138  1527  0B89               	decfsz	9,f
  8139  1528  2D26               	goto	u2935
  8140  1529  0870               	movf	??_Lcd_Cmd,w
  8141  152A  3901               	andlw	1
  8142  152B  00F1               	movwf	??_Lcd_Cmd+1
  8143  152C  0EF1               	swapf	??_Lcd_Cmd+1,f
  8144  152D  080E               	movf	14,w	;volatile
  8145  152E  0671               	xorwf	??_Lcd_Cmd+1,w
  8146  152F  39EF               	andlw	-17
  8147  1530  0671               	xorwf	??_Lcd_Cmd+1,w
  8148  1531  008E               	movwf	14	;volatile
  8149                           
  8150                           ;flex_lcd.h: 157: PORTCbits.RC3 = (data & 0b00000010)>>1; PORTCbits.RC2 = (data & 0b0000
      +                          0001);
  8151  1532  3672               	lsrf	Lcd_Cmd@data,w
  8152  1533  3901               	andlw	1
  8153  1534  00F0               	movwf	??_Lcd_Cmd
  8154  1535  0DF0               	rlf	??_Lcd_Cmd,f
  8155  1536  0DF0               	rlf	??_Lcd_Cmd,f
  8156  1537  0DF0               	rlf	??_Lcd_Cmd,f
  8157  1538  080E               	movf	14,w	;volatile
  8158  1539  0670               	xorwf	??_Lcd_Cmd,w
  8159  153A  39F7               	andlw	-9
  8160  153B  0670               	xorwf	??_Lcd_Cmd,w
  8161  153C  008E               	movwf	14	;volatile
  8162  153D  0872               	movf	Lcd_Cmd@data,w
  8163  153E  3901               	andlw	1
  8164  153F  00F0               	movwf	??_Lcd_Cmd
  8165  1540  0DF0               	rlf	??_Lcd_Cmd,f
  8166  1541  0DF0               	rlf	??_Lcd_Cmd,f
  8167  1542  080E               	movf	14,w	;volatile
  8168  1543  0670               	xorwf	??_Lcd_Cmd,w
  8169  1544  39FB               	andlw	-5
  8170  1545  0670               	xorwf	??_Lcd_Cmd,w
  8171  1546  008E               	movwf	14	;volatile
  8172                           
  8173                           ;flex_lcd.h: 158: _delay(10);
  8174  1547  3003               	movlw	3
  8175  1548  00F0               	movwf	??_Lcd_Cmd
  8176  1549                     u4557:	
  8177  1549  0BF0               	decfsz	??_Lcd_Cmd,f
  8178  154A  2D49               	goto	u4557
  8179                           
  8180                           ;flex_lcd.h: 159: PORTCbits.RC1 = 1; _delay((unsigned long)((5)*(32000000/4000000.0))); 
      +                          PORTCbits.RC1 = 0;
  8181  154B  0020               	movlb	0	; select bank0
  8182  154C  148E               	bsf	14,1	;volatile
  8183  154D  300D               	movlw	13
  8184  154E  00F0               	movwf	??_Lcd_Cmd
  8185  154F                     u4567:	
  8186  154F  0BF0               	decfsz	??_Lcd_Cmd,f
  8187  1550  2D4F               	goto	u4567
  8188  1551  0020               	movlb	0	; select bank0
  8189  1552  108E               	bcf	14,1	;volatile
  8190                           
  8191                           ;flex_lcd.h: 160: _delay((unsigned long)((5500)*(32000000/4000000.0)));
  8192  1553  303A               	movlw	58
  8193  1554  00F1               	movwf	??_Lcd_Cmd+1
  8194  1555  3023               	movlw	35
  8195  1556  00F0               	movwf	??_Lcd_Cmd
  8196  1557                     u4577:	
  8197  1557  0BF0               	decfsz	??_Lcd_Cmd,f
  8198  1558  2D57               	goto	u4577
  8199  1559  0BF1               	decfsz	??_Lcd_Cmd+1,f
  8200  155A  2D57               	goto	u4577
  8201  155B  0008               	return
  8202  155C                     __end_of_Lcd_Cmd:	
  8203  007E                     btemp	set	126	;btemp
  8204  007E                     wtemp	set	126
  8205  007E                     wtemp0	set	126
  8206  0080                     wtemp1	set	128
  8207  0082                     wtemp2	set	130
  8208  0084                     wtemp3	set	132
  8209  0086                     wtemp4	set	134
  8210  0088                     wtemp5	set	136
  8211  007F                     wtemp6	set	127
  8212  007E                     ttemp	set	126
  8213  007E                     ttemp0	set	126
  8214  0081                     ttemp1	set	129
  8215  0084                     ttemp2	set	132
  8216  0087                     ttemp3	set	135
  8217  007F                     ttemp4	set	127
  8218  007E                     ltemp	set	126
  8219  007E                     ltemp0	set	126
  8220  0082                     ltemp1	set	130
  8221  0086                     ltemp2	set	134
  8222  0080                     ltemp3	set	128


Data Sizes:
    Strings     21
    Constant    118
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     71      71
    BANK1            80     49      49
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_2(CODE[12]), STR_1(CODE[9]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 16
		 -> main@buffer1(BANK1[16]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Out2@buffer	PTR unsigned char  size(1) Largest target is 16
		 -> main@buffer1(BANK1[16]), 


Critical Paths under _main in COMMON

    _main->___awtoft
    _sprintf->___lldiv
    _sprintf->___lltoft
    _sprintf->___wmul
    _sprintf->__div_to_l_
    _scale->___wmul
    _fround->___wmul
    ___wmul->___awdiv
    ___ftmul->___awtoft
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___lltoft
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _Lcd_Out2->_Lcd_Chr_CP
    _Lcd_Out2->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftdiv->___ftmul

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                27    27      0   56488
                                             68 BANK0      3     3      0
                                             25 BANK1     24    24      0
                            _Lcd_Cmd
                           _Lcd_Init
                           _Lcd_Out2
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             41    36      5   45685
                                             57 BANK0     11     6      5
                                              0 BANK1     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               12     9      3   10780
                                             24 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              17    14      3   10582
                                             24 BANK0     14    11      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2780
                                             12 COMMON     2     2      0
                                              4 BANK0      4     0      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    4483
                                              8 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1580
                                              7 COMMON     5     1      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         16    10      6     431
                                              0 COMMON    10     4      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          20    14      6     574
                                              0 COMMON    14     8      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             6     2      4    2242
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     671
                                              0 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     546
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     444
                                             33 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3400
                                             51 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3205
                                             38 BANK0     13     7      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     648
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             16    10      6    2517
                                             24 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             6     3      3    2264
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2109
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out2                                             5     3      2     789
                                              3 COMMON     5     3      2
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Chr_CP                                           3     3      0     176
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             3     3      0     314
                                              3 COMMON     3     3      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     176
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out2
     _Lcd_Chr_CP
     _Lcd_Cmd
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     47      47       5       88.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     31      31       7       61.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Tue Sep 13 17:58:27 2016

            __CFG_CP$OFF 0000                       l31 16E6                       l32 170E  
                     l69 0A69                       _GO 04E9             ___awdiv@sign 0021  
    ___wmul@multiplicand 0026             ___ftadd@exp1 0052             ___ftadd@exp2 0051  
            __CFG_LVP$ON 0000             ___ftadd@sign 0050                      l114 00B3  
                    l137 0282                      l129 015B                      l504 09DE  
                    l530 08BA                      l540 0933                      l461 0C4B  
                    l189 06E8                      l295 12AE                      l480 005F  
                    l481 0067                      l473 004C                      l581 086F  
           __CFG_CPD$OFF 0000             ___awmod@sign 0076             __CFG_BORV$LO 0000  
                    wreg 0009             __CFG_IESO$ON 0000              _sprintf$723 00A0  
            main@buffer1 00B9             ___ftdiv@cntr 0042             ___ftdiv@sign 0047  
                   l2002 097D                     l2020 09AA                     l2022 09B4  
                   l2014 0997                     l2032 09D0                     l2024 09B9  
                   l2042 0A02                     l2034 09DA                     l2026 09BD  
                   l2210 0FE3                     l2052 0A1D                     l2300 0BC0  
                   l2204 0F84                     l2038 09F0                     l2062 1763  
                   l2222 0018                     l2400 0866                     l2320 0C35  
                   l2232 08A2                     l2080 17B4                     l2402 0872  
                   l2170 0D8F                     l2162 0D17                     l2340 1388  
                   l2308 0C08                     l2092 17D0                     l2084 17BC  
                   l2068 1779                     l2406 0880                     l2430 1468  
                   l2326 0C42                     l2318 0C27                     l2254 08F5  
                   l2246 08DB                     l2520 132F                     l2336 1372  
                   l2416 142F                     l2440 13A0                     l2328 0C4E  
                   l2272 092A                     l2264 090F                     l2096 17D8  
                   l2192 0EC4                     l2522 1332                     l2426 145D  
                   l2418 143D                     l2442 13AE                     l2450 13D1  
                   l2290 0B75                     l2274 0936                     l2266 091D  
                   l2186 0E65                     l2602 01C2                     l2516 1329  
                   l2364 12C9                     l2460 1313                     l2284 0B58  
                   l2196 0EE1                     l2700 044F                     l2534 134A  
                   l2518 132C                     l2526 1338                     l2374 081B  
                   l2446 13C6                     l2550 00BA                     l2528 1346  
                   l2392 084B                     l1912 147C                     l2640 02EE  
                   l2632 02B7                     l2552 00C4                     l2544 00AE  
                   l2394 0859                     l2458 1303                     l1930 149B  
                   l2810 071B                     l2802 06FF                     l2730 050D  
                   l2626 026B                     l2618 021E                     l1940 14B6  
                   l2724 04F0                     l2716 0479                     l2644 0302  
                   l2556 00D1                     l2564 010B                     l1870 0038  
                   l1862 0022                     l1918 1487                     l2814 0740  
                   l2718 04DD                     l2670 03C1                     l2654 0336  
                   l1944 14BE                     l1936 14AD                     l1928 148F  
                   l1960 13EB                     l2840 0794                     l2824 0760  
                   l2832 0779                     l2816 0743                     l2808 0718  
                   l2760 0632                     l2664 038A                     l2592 018D  
                   l2584 015D                     l2576 011E                     l1866 0029  
                   l2906 1680                     l1970 13FD                     l2834 077D  
                   l2754 061F                     l2738 0533                     l2674 03EA  
                   l2658 0384                     l2762 0637                     l2586 0179  
                   l2578 0156                     l1876 0051                     l1868 0033  
                   l1956 13E4                     l1892 12A7                     l2852 07AF  
                   l2772 0663                     l2692 041A                     l1878 0059  
                   l1982 141A                     l1974 1409                     l2790 06AE  
                   l2694 043C                     l2678 03FC                     l2854 0086  
                   l1992 0967                     l1968 13F1                     l2784 0677  
                   l2856 07F8                     l1978 1412                     l2794 06CC  
                   l2778 0671                     l2868 12E9                     l2884 1626  
                   l1996 096E                     l2878 1610                     l2966 0A67  
                   l2898 1667                     STR_1 1882                     STR_2 1876  
                   u2205 002E                     u2225 0047                     u3115 08DC  
                   u2315 12AF                     u2245 0054                     u3205 092B  
                   u3125 08EC                     u2405 14A6                     u2325 12B4  
                   u3135 08F6                     u2415 14AE                     u2505 140A  
                   u2285 006E                     u3405 0822                     u3325 0C43  
                   u3245 0BC1                     u3255 0BEB                     u3175 0910  
                   u2375 1492                     u4135 0710                     u4305 1677  
                   u2625 0998                     u3505 1432                     u4145 072F  
                   u4065 06A2                     u4315 1681                     u2715 09D1  
                   u3435 084C                     u2395 149C                     u2475 13F4  
                   u3525 143E                     u3605 13C7                     u4085 06C2  
                   u4407 15E8                     u2655 09AB                     u3535 1452  
                   u3295 0C28                     u2495 1403                     u2815 17BD  
                   u4095 06E0                     u2905 14E9                     u4417 15EE  
                   u3465 0867                     u3545 145E                     u3625 1308  
                   u2825 17C3                     u2915 14FA                     u4507 1702  
                   u4427 15F4                     u4275 1638                     u2925 1516  
                   u4517 171D                     u4437 16B4                     u4285 1648  
                   u2685 09BE                     u3805 028E                     u4357 0A61  
                   u2935 1526                     u4527 172A                     u4447 16BC  
                   u4295 1668                     u3575 13A3                     u2855 17D9  
                   u3815 02C3                     u4367 0B32                     u4537 1509  
                   u4457 16C4                     u4377 15A2                     u2945 1563  
                   u2865 17DF                     u2785 1785                     u4547 150F  
                   u4467 16CC                     u4387 15A8                     u2955 1573  
                   u3595 13BC                     u2795 1795                     u4557 1549  
                   u2885 14CA                     u4477 16D4                     u4397 15E2  
                   u2965 1582                     u3845 02EC                     u3765 01D7  
                   u4567 154F                     u2895 14DA                     u4487 16DC  
                   u2975 1593                     u3935 0426                     u4577 1557  
                   u4497 16F5                     u2985 15AF                     u3945 045B  
                   u2995 15BF                     u3875 03B5                     u3975 04FB  
                   u3985 0509             __CFG_WRT$OFF 0000            __CFG_FCMEN$ON 0000  
                   _main 0A35             ___ftpack@arg 0070             ___ftpack@exp 0073  
                   fsr0h 0005                     fsr1h 0007                     fsr0l 0004  
                   indf0 0000                     indf1 0001                     fsr1l 0006  
                   btemp 007E            __CFG_BOREN$ON 0000                     ltemp 007E  
                   start 0002                     ttemp 007E                     wtemp 007E  
        __end_of_Lcd_Cmd 155C            __CFG_MCLRE$ON 0000             ___ftmul@cntr 0036  
           ___ftmul@sign 0037               _Lcd_Chr_CP 155C             ___fttol@exp1 004E  
           ___fttol@lval 004A           Lcd_Out2@buffer 0074            __CFG_PLLEN$ON 0000  
                  ?_main 0070          __end_of___awdiv 14C3          __end_of___ftadd 0A35  
          __CFG_WDTE$OFF 0000          __end_of___awmod 141F          __end_of___ftdiv 16A2  
        __end_of___ftneg 000C          __end_of___lldiv 1471          __end_of___ftmul 1800  
        ___awdiv@divisor 0077          __end_of___llmod 13DA          __end_of___ftsub 12DF  
        __end_of___fttol 0889          ___awdiv@counter 0020                    _TRISA 008C  
          __CFG_PWRTE$ON 0000             ___lltoft@exp 007D            ___awtoft@sign 007D  
        __end_of_dpowers 1828                    _scale 0DBC          __end_of_isdigit 001A  
          ___ftpack@sign 0074                    ltemp0 007E                    ltemp1 0082  
                  ltemp2 0086                    ltemp3 0080                    ttemp0 007E  
                  ttemp1 0081                    ttemp2 0084                    ttemp3 0087  
                  ttemp4 007F                    status 0003                    wtemp0 007E  
                  wtemp1 0080                    wtemp2 0082                    wtemp3 0084  
                  wtemp4 0086                    wtemp5 0088                    wtemp6 007F  
        __end_of_sprintf 07FD         __end_of_Lcd_Init 174C         __end_of_Lcd_Out2 135C  
        __initialization 07FD             __end_of_main 0B3A                   ??_main 0064  
          ___fttol@sign1 0049     __size_of__tdiv_to_l_ 00B6         ___llmod@dividend 0024  
                 ?_scale 0038                   _ADRESH 009C                   _ADRESL 009B  
       ___awdiv@dividend 0079         __end_of___awtoft 12FF                   _ANSELA 018C  
       __end_of___ftpack 007E         __end_of___lltoft 1327                ??_Lcd_Cmd 0070  
       __end_of__powers_ 1876                   ___ftge 135C              ?_Lcd_Chr_CP 0070  
                 ___wmul 12A5                ??___awdiv 007B                ??___ftadd 004C  
         __CFG_STVREN$ON 0000                ??___awmod 0074                ??___ftdiv 003E  
              ??___ftneg 0073                ??___lldiv 0078                ??___ftmul 002E  
              ??___llmod 0028                ??___ftsub 007E                ??___fttol 0045  
                 _fround 0C57         ___awdiv@quotient 0022          ___awmod@divisor 0070  
        ___awmod@counter 0075    ___ftmul@f3_as_product 0033                ??_isdigit 0070  
              ??_sprintf 005E  __end_of__initialization 07FD               ___ftadd@f1 0046  
             ___ftadd@f2 0049               ___ftge@ff1 0070               ___ftge@ff2 0073  
             ___ftdiv@f1 003B               ___ftdiv@f2 0038               ___ftdiv@f3 0043  
             ___ftneg@f1 0070               ___awtoft@c 0078               ___ftmul@f1 0028  
             ___ftmul@f2 002B               ___ftsub@f1 0056               ___ftsub@f2 0053  
             ___fttol@f1 0041           __pcstackCOMMON 0070               ___lltoft@c 0078  
          __end_of_scale 1000               __div_to_l_ 0B3A                ?_Lcd_Init 0070  
              ?_Lcd_Out2 0073          __div_to_l_@exp1 0025          __div_to_l_@cntr 0024  
                ??_scale 003B          __div_to_l_@quot 0020             sprintf@width 00B0  
    __size_of_Lcd_Chr_CP 009D          __CFG_VCAPEN$OFF 0000            __div_to_l_@f1 0070  
          __div_to_l_@f2 0073               __pmaintext 0A35                  ?___ftge 0070  
                ?___wmul 0024                  ?_fround 0038                ?___awtoft 0078  
              ?___ftpack 0070                ?___lltoft 0078               ??_Lcd_Init 0073  
             ??_Lcd_Out2 0075                  _Lcd_Cmd 14C3        __end_of__npowers_ 184F  
        __size_of___ftge 003B                  ___awdiv 1471                  ___ftadd 093F  
                ___awmod 13DA                  ___ftdiv 15F9                  ___ftneg 0004  
                ___lldiv 141F          __size_of___wmul 001C                  ___ftmul 174C  
                ___llmod 1397                  ___ftsub 12C1                  ___fttol 0802  
             _fround$720 0042               _fround$721 003F               ??___awtoft 007B  
             ??___ftpack 0075          __size_of_fround 0165               ??___lltoft 007C  
                __ptext1 007E                  __ptext2 0DBC                  __ptext3 000C  
                __ptext4 0C57                  __ptext5 12A5                  __ptext6 174C  
                __ptext7 13DA                  __ptext8 1471                  __ptext9 0889  
            ?__div_to_l_ 0070                  _dpowers 1800                  _isdigit 000C  
       ___awmod@dividend 0072                  main@adc 00CF                  _sprintf 007E  
   end_of_initialization 07FD          ___lldiv@divisor 0070          ___lldiv@counter 007D  
           ??_Lcd_Chr_CP 0070                Lcd_Out2@x 0073                Lcd_Out2@y 0076  
           __pstringtext 1800           __tdiv_to_l_@f1 0070           __tdiv_to_l_@f2 0073  
          ??__tdiv_to_l_ 0076                _PORTCbits 000E         __CFG_FOSC$INTOSC 0000  
              _TRISCbits 008E       __end_of_Lcd_Chr_CP 15F9              ___ftdiv@exp 0046  
    __size_of__div_to_l_ 011D              ___ftmul@exp 0032           __end_of___ftge 1397  
         __end_of___wmul 12C1           __end_of_fround 0DBC      start_initialization 07FD  
    __end_of__tdiv_to_l_ 093F        __size_of_Lcd_Init 00AA        __size_of_Lcd_Out2 0035  
        ___llmod@divisor 0020          ___llmod@counter 0029                 ??___ftge 0076  
               ??___wmul 007C                 ??_fround 003B            sprintf@tmpval 00A4  
             fround@prec 0045        __size_of___awtoft 0020        __size_of___ftpack 0064  
      __size_of___lltoft 0028                ___latbits 0003            __pcstackBANK0 0020  
          __pcstackBANK1 00A0                 ?_Lcd_Cmd 0070              sprintf@flag 00AE  
            sprintf@fval 00B2              sprintf@prec 00B5                 ?___awdiv 0077  
               ?___ftadd 0046                 ?___awmod 0070                 ?___ftdiv 0038  
               ?___ftneg 0070                 ?___lldiv 0070                 ?___ftmul 0028  
               ?___llmod 0020                 ?___ftsub 0053                __npowers_ 1828  
               ?___fttol 0041              __tdiv_to_l_ 0889             ??__div_to_l_ 0076  
               ?_isdigit 0070                _scale$722 003D                 ?_sprintf 0059  
         __size_of_scale 0244           ___wmul@product 007C       __end_of__div_to_l_ 0C57  
           Lcd_Init@data 0075               _ADCON0bits 009D               _ADCON1bits 009E  
      ___wmul@multiplier 0024             Lcd_Out2@data 0077                 _Lcd_Init 16A2  
               _Lcd_Out2 1327         __size_of_Lcd_Cmd 0099         __size_of___awdiv 0052  
       __size_of___ftadd 00F6         __size_of___awmod 0045         __size_of___ftdiv 00A9  
       __size_of___ftneg 0008         __size_of___lldiv 0052         __size_of___ftmul 00B4  
       __size_of___llmod 0043         __size_of___ftsub 001E         __size_of___fttol 0087  
               ___awtoft 12DF                 ___ftpack 001A                 ___lltoft 12FF  
            _isdigit$509 0070               sprintf@exp 00AC               sprintf@val 00A8  
       __size_of_isdigit 000E           Lcd_Chr_CP@data 0072                 __ptext10 0B3A  
               __ptext11 12FF                 __ptext20 12DF                 __ptext12 1397  
               __ptext21 001A                 __ptext13 141F                 __ptext22 1327  
               __ptext14 0802                 __ptext23 155C                 __ptext15 12C1  
               __ptext24 16A2                 __ptext16 093F                 __ptext25 14C3  
               __ptext17 0004                 __ptext18 135C                 __ptext19 15F9  
               __powers_ 184F         __size_of_sprintf 077F              Lcd_Cmd@data 0072  
          __size_of_main 0105                 main@temp 00CC                 main@volt 00C9  
               isdigit@c 0071                 scale@scl 0040                sprintf@ap 00A3  
       __tdiv_to_l_@exp1 0025         __tdiv_to_l_@cntr 0024                sprintf@sp 00B7  
       __tdiv_to_l_@quot 0020         ___lldiv@dividend 0074        __CFG_CLKOUTEN$OFF 0000  
             _OSCCONbits 0099             ?__tdiv_to_l_ 0070                 sprintf@c 00B8  
               sprintf@f 0059         ___lldiv@quotient 0079  
