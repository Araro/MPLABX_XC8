Version 3.2 HI-TECH Software Intermediate Code
"10 C:\Program Files (x86)\Microchip\xc8\v1.33\include\stdarg.h
[v ___va_start `(*v ~T0 @X0 0 ef ]
[p i ___va_start ]
"7 C:\Program Files (x86)\Microchip\xc8\v1.33\include\ctype.h
[v _isdigit `(b ~T0 @X0 0 ef1`uc ]
"13 C:\Program Files (x86)\Microchip\xc8\v1.33\include\stdarg.h
[v ___va_arg `(*v ~T0 @X0 0 ev`*v ]
[p i ___va_arg ]
[; ;stdio.h: 8: typedef int ptrdiff_t;
[; ;stdio.h: 9: typedef unsigned size_t;
[; ;stdio.h: 10: typedef unsigned short wchar_t;
[; ;stdarg.h: 7: typedef void * va_list[1];
[; ;stdarg.h: 10: extern void * __va_start(void);
[; ;stdarg.h: 13: extern void * __va_arg(void *, ...);
[; ;stdio.h: 23: extern int errno;
[; ;stdio.h: 54: struct __prbuf
[; ;stdio.h: 55: {
[; ;stdio.h: 56: char * ptr;
[; ;stdio.h: 57: void (* func)(char);
[; ;stdio.h: 58: };
[; ;conio.h: 17: extern int errno;
[; ;conio.h: 20: extern void init_uart(void);
[; ;conio.h: 22: extern char getch(void);
[; ;conio.h: 23: extern char getche(void);
[; ;conio.h: 24: extern void putch(char);
[; ;conio.h: 25: extern void ungetch(char);
[; ;conio.h: 27: extern __bit kbhit(void);
[; ;conio.h: 31: extern char * cgets(char *);
[; ;conio.h: 32: extern void cputs(const char *);
[; ;stdio.h: 99: extern int cprintf(char *, ...);
[; ;stdio.h: 104: extern int _doprnt(struct __prbuf *, const register char *, register va_list);
[; ;stdio.h: 194: extern char * gets(char *);
[; ;stdio.h: 195: extern int puts(const char *);
[; ;stdio.h: 196: extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
[; ;stdio.h: 197: extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
[; ;stdio.h: 198: extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
[; ;stdio.h: 199: extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
[; ;stdio.h: 200: extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
[; ;stdio.h: 201: extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));
[; ;stdio.h: 205: extern int sprintf(char *, const char *, ...);
[; ;stdio.h: 206: extern int printf(const char *, ...);
[; ;ctype.h: 4: extern __bit isalpha(char);
[; ;ctype.h: 5: extern __bit isupper(char);
[; ;ctype.h: 6: extern __bit islower(char);
[; ;ctype.h: 7: extern __bit isdigit(char);
[; ;ctype.h: 8: extern __bit isxdigit(char);
[; ;ctype.h: 9: extern __bit isspace(char);
[; ;ctype.h: 10: extern __bit ispunct(char);
[; ;ctype.h: 11: extern __bit isalnum(char);
[; ;ctype.h: 12: extern __bit isprint(char);
[; ;ctype.h: 13: extern __bit isgraph(char);
[; ;ctype.h: 14: extern __bit iscntrl(char);
[; ;ctype.h: 17: extern char toupper(char);
[; ;ctype.h: 18: extern char tolower(char);
[; ;stdlib.h: 27: typedef struct {
[; ;stdlib.h: 28: int rem;
[; ;stdlib.h: 29: int quot;
[; ;stdlib.h: 30: } div_t;
[; ;stdlib.h: 31: typedef struct {
[; ;stdlib.h: 32: unsigned rem;
[; ;stdlib.h: 33: unsigned quot;
[; ;stdlib.h: 34: } udiv_t;
[; ;stdlib.h: 35: typedef struct {
[; ;stdlib.h: 36: long quot;
[; ;stdlib.h: 37: long rem;
[; ;stdlib.h: 38: } ldiv_t;
[; ;stdlib.h: 39: typedef struct {
[; ;stdlib.h: 40: unsigned long quot;
[; ;stdlib.h: 41: unsigned long rem;
[; ;stdlib.h: 42: } uldiv_t;
[; ;stdlib.h: 65: extern double atof(const char *);
[; ;stdlib.h: 66: extern double strtod(const char *, const char **);
[; ;stdlib.h: 67: extern int atoi(const char *);
[; ;stdlib.h: 68: extern unsigned xtoi(const char *);
[; ;stdlib.h: 69: extern long atol(const char *);
[; ;stdlib.h: 70: extern long strtol(const char *, char **, int);
[; ;stdlib.h: 72: extern int rand(void);
[; ;stdlib.h: 73: extern void srand(unsigned int);
[; ;stdlib.h: 74: extern void * calloc(size_t, size_t);
[; ;stdlib.h: 75: extern div_t div(int numer, int denom);
[; ;stdlib.h: 76: extern udiv_t udiv(unsigned numer, unsigned denom);
[; ;stdlib.h: 77: extern ldiv_t ldiv(long numer, long denom);
[; ;stdlib.h: 78: extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
[; ;stdlib.h: 79: extern unsigned long _lrotl(unsigned long value, unsigned int shift);
[; ;stdlib.h: 80: extern unsigned long _lrotr(unsigned long value, unsigned int shift);
[; ;stdlib.h: 81: extern unsigned int _rotl(unsigned int value, unsigned int shift);
[; ;stdlib.h: 82: extern unsigned int _rotr(unsigned int value, unsigned int shift);
[; ;stdlib.h: 87: extern void * malloc(size_t);
[; ;stdlib.h: 88: extern void free(void *);
[; ;stdlib.h: 89: extern void * realloc(void *, size_t);
[; ;stdlib.h: 91: extern void abort(void);
[; ;stdlib.h: 92: extern void exit(int);
[; ;stdlib.h: 93: extern int atexit(void (*)(void));
[; ;stdlib.h: 94: extern char * getenv(const char *);
[; ;stdlib.h: 95: extern char ** environ;
[; ;stdlib.h: 96: extern int system(char *);
[; ;stdlib.h: 97: extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
[; ;stdlib.h: 98: extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
[; ;stdlib.h: 99: extern int abs(int);
[; ;stdlib.h: 100: extern long labs(long);
[; ;stdlib.h: 103: extern char * itoa(char * buf, int val, int base);
[; ;stdlib.h: 104: extern char * utoa(char * buf, unsigned val, int base);
[; ;stdlib.h: 109: extern char * ltoa(char * buf, long val, int base);
[; ;stdlib.h: 110: extern char * ultoa(char * buf, unsigned long val, int base);
[; ;stdlib.h: 112: extern char * ftoa(float f, int * status);
[; ;string.h: 22: extern void * memcpy(void *, const void *, size_t);
[; ;string.h: 23: extern void * memmove(void *, const void *, size_t);
[; ;string.h: 24: extern void * memset(void *, int, size_t);
[; ;string.h: 28: extern void * __builtin_memcpy(void *, const void *, size_t);
[; ;string.h: 42: extern char * strcat(char *, const char *);
[; ;string.h: 43: extern char * strcpy(char *, const char *);
[; ;string.h: 44: extern char * strncat(char *, const char *, size_t);
[; ;string.h: 45: extern char * strncpy(char *, const char *, size_t);
[; ;string.h: 46: extern char * strdup(const char *);
[; ;string.h: 47: extern char * strtok(char *, const char *);
[; ;string.h: 50: extern int memcmp(const void *, const void *, size_t);
[; ;string.h: 51: extern int strcmp(const char *, const char *);
[; ;string.h: 52: extern int stricmp(const char *, const char *);
[; ;string.h: 53: extern int strncmp(const char *, const char *, size_t);
[; ;string.h: 54: extern int strnicmp(const char *, const char *, size_t);
[; ;string.h: 55: extern void * memchr(const void *, int, size_t);
[; ;string.h: 56: extern size_t strcspn(const char *, const char *);
[; ;string.h: 57: extern char * strpbrk(const char *, const char *);
[; ;string.h: 58: extern size_t strspn(const char *, const char *);
[; ;string.h: 59: extern char * strstr(const char *, const char *);
[; ;string.h: 60: extern char * stristr(const char *, const char *);
[; ;string.h: 61: extern char * strerror(int);
[; ;string.h: 62: extern size_t strlen(const char *);
[; ;string.h: 63: extern char * strchr(const char *, int);
[; ;string.h: 64: extern char * strichr(const char *, int);
[; ;string.h: 65: extern char * strrchr(const char *, int);
[; ;string.h: 66: extern char * strrichr(const char *, int);
[; ;conio.h: 17: extern int errno;
[; ;conio.h: 20: extern void init_uart(void);
[; ;conio.h: 22: extern char getch(void);
[; ;conio.h: 23: extern char getche(void);
[; ;conio.h: 24: extern void putch(char);
[; ;conio.h: 25: extern void ungetch(char);
[; ;conio.h: 27: extern __bit kbhit(void);
[; ;conio.h: 31: extern char * cgets(char *);
[; ;conio.h: 32: extern void cputs(const char *);
[; ;sys.h: 17: extern int errno;
[; ;sys.h: 30: extern int execl(char *, char *, ...);
[; ;sys.h: 31: extern int execv(char *, char **);
[; ;sys.h: 32: extern int execve(char *, char **, char **);
[; ;sys.h: 33: extern int execle(char *, char *, ...);
[; ;sys.h: 34: extern int execvp(char *, char **);
[; ;sys.h: 35: extern int execlp(char *, char *, ...);
[; ;sys.h: 36: extern int getpid(void);
[; ;sys.h: 37: extern char * mktemp(char *);
[; ;sys.h: 51: extern int spawnl(char *, char *, ...);
[; ;sys.h: 52: extern int spawnv(char *, char **);
[; ;sys.h: 53: extern int spawnle(char *, char *, ...);
[; ;sys.h: 54: extern int spawnve(char *, char **, char **);
[; ;sys.h: 55: extern int spawnlp(char *, char *, ...);
[; ;sys.h: 56: extern int spawnvp(char *, char **);
[; ;sys.h: 58: extern int chdir(char *);
[; ;sys.h: 59: extern int chdrv(char *);
[; ;sys.h: 60: extern int mkdir(char *);
[; ;sys.h: 61: extern int rmdir(char *);
[; ;sys.h: 62: extern char * getcwd(char *);
[; ;sys.h: 63: extern void persist_validate(void);
[; ;sys.h: 64: extern int persist_check(int);
[; ;sys.h: 65: extern char * getdrv(void);
[; ;sys.h: 66: extern char ** _getargs(char *, char *);
[; ;sys.h: 67: extern int _argc_;
[; ;sys.h: 78: extern void * sbrk(size_t);
[; ;sys.h: 79: extern void brk(void *);
[; ;sys.h: 85: extern int _pnum(unsigned long, signed char, signed char, unsigned char, unsigned char, struct __prbuf *, unsigned char);
[; ;sys.h: 86: extern int _fnum(double, short, short, short, struct __prbuf *, short);
[; ;math.h: 3: extern double fabs(double);
[; ;math.h: 4: extern double floor(double);
[; ;math.h: 5: extern double ceil(double);
[; ;math.h: 6: extern double modf(double, double *);
[; ;math.h: 7: extern double sqrt(double);
[; ;math.h: 8: extern double atof(const char *);
[; ;math.h: 9: extern double sin(double);
[; ;math.h: 10: extern double cos(double);
[; ;math.h: 11: extern double tan(double);
[; ;math.h: 12: extern double asin(double);
[; ;math.h: 13: extern double acos(double);
[; ;math.h: 14: extern double atan(double);
[; ;math.h: 15: extern double atan2(double, double);
[; ;math.h: 16: extern double log(double);
[; ;math.h: 17: extern double log10(double);
[; ;math.h: 18: extern double pow(double, double);
[; ;math.h: 19: extern double exp(double);
[; ;math.h: 20: extern double sinh(double);
[; ;math.h: 21: extern double cosh(double);
[; ;math.h: 22: extern double tanh(double);
[; ;math.h: 23: extern double eval_poly(double, const double *, int);
[; ;math.h: 24: extern double frexp(double, int *);
[; ;math.h: 25: extern double ldexp(double, int);
[; ;math.h: 26: extern double fmod(double, double);
[; ;math.h: 27: extern double trunc(double);
[; ;math.h: 28: extern double round(double);
"13 C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c
[p n 350 ]
"354
[v _dpowers `Cui ~T0 @X0 -> 0 `x s ]
[i _dpowers
:U ..
-> -> 1 `i `ui
-> -> 10 `i `ui
-> -> 100 `i `ui
-> -> 1000 `i `ui
-> -> 10000 `i `ui
..
]
[; ;doprnt.c: 354: const static unsigned int dpowers[] = {1, 10, 100, 1000, 10000,
[; ;doprnt.c: 359: };
"492
[v _sprintf `(i ~T0 @X0 1 e1v`*uc`*Cuc ]
"493
{
[; ;doprnt.c: 455: int
[; ;doprnt.c: 492: sprintf(char * sp, const char * f, ...)
[; ;doprnt.c: 493: {
[e :U _sprintf ]
"492
[v _sp `*uc ~T0 @X0 1 r1 ]
[v _f `*Cuc ~T0 @X0 1 r0 ]
"493
[f ]
"494
[v _ap `*v ~T0 @X0 -> -> 1 `i `ux a ]
"499
[v _c `c ~T0 @X0 1 a ]
"501
[v _width `i ~T0 @X0 1 a ]
"506
[v _prec `c ~T0 @X0 1 a ]
"508
[v _flag `uc ~T0 @X0 1 a ]
"529
[s S7 `*Cuc 1 `ui 1 ]
[n S7 . _cp _len ]
"527
[u S6 `ui 1 `S7 1 ]
[n S6 . _val _str ]
"533
[v __val `S6 ~T0 @X0 1 a ]
[; ;doprnt.c: 494: va_list ap;
[; ;doprnt.c: 499: signed char c;
[; ;doprnt.c: 501: int width;
[; ;doprnt.c: 506: signed char prec;
[; ;doprnt.c: 508: unsigned char flag;
[; ;doprnt.c: 527: union {
[; ;doprnt.c: 528: unsigned int _val;
[; ;doprnt.c: 529: struct {
[; ;doprnt.c: 530: const char * _cp;
[; ;doprnt.c: 531: unsigned _len;
[; ;doprnt.c: 532: } _str;
[; ;doprnt.c: 533: } _val;
[; ;doprnt.c: 542: *ap = __va_start();
"542
[e = *U &U _ap ( ___va_start ..  ]
[; ;doprnt.c: 545: while(c = *f++) {
"545
[e $U 9  ]
[e :U 10 ]
{
[; ;doprnt.c: 547: if(c != '%')
"547
[e $ ! != -> -> _c `i `ui -> 37 `ui 12  ]
[; ;doprnt.c: 549: {
"549
{
[; ;doprnt.c: 550: ((*sp++ = (c)));
"550
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> _c `uc ]
[; ;doprnt.c: 551: continue;
"551
[e $U 9  ]
"552
}
[e :U 12 ]
[; ;doprnt.c: 552: }
[; ;doprnt.c: 555: width = 0;
"555
[e = _width -> 0 `i ]
[; ;doprnt.c: 557: flag = 0;
"557
[e = _flag -> -> 0 `i `uc ]
[; ;doprnt.c: 559: for(;;) {
"559
{
[e :U 13 ]
{
[; ;doprnt.c: 560: switch(*f) {
"560
[e $U 17  ]
{
[; ;doprnt.c: 588: case '0':
"588
[e :U 18 ]
[; ;doprnt.c: 589: flag |= 0x04;
"589
[e =| _flag -> -> 4 `i `uc ]
[; ;doprnt.c: 590: f++;
"590
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
[; ;doprnt.c: 591: continue;
"591
[e $U 15  ]
"593
}
[; ;doprnt.c: 593: }
[e $U 16  ]
"560
[e :U 17 ]
[e [\ *U _f , $ -> -> 48 `ui `uc 18
 16 ]
"593
[e :U 16 ]
[; ;doprnt.c: 594: break;
"594
[e $U 14  ]
"595
}
[e :U 15 ]
[; ;doprnt.c: 595: }
[e $U 13  ]
[e :U 14 ]
}
[; ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
"606
[e $ ! ( _isdigit (1 -> -> *U _f `ui `uc 19  ]
{
[; ;doprnt.c: 607: width = 0;
"607
[e = _width -> 0 `i ]
[; ;doprnt.c: 608: do {
"608
[e :U 22 ]
{
[; ;doprnt.c: 609: width *= 10;
"609
[e =* _width -> 10 `i ]
[; ;doprnt.c: 610: width += *f++ - '0';
"610
[e =+ _width -> - -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `ui -> 48 `ui `i ]
"611
}
[; ;doprnt.c: 611: } while(isdigit((unsigned)*f));
[e $ ( _isdigit (1 -> -> *U _f `ui `uc 22  ]
[e :U 21 ]
"617
}
[e :U 19 ]
[; ;doprnt.c: 617: }
[; ;doprnt.c: 644: switch(c = *f++) {
"644
[e $U 24  ]
{
[; ;doprnt.c: 646: case 0:
"646
[e :U 25 ]
[; ;doprnt.c: 647: goto alldone;
"647
[e $U 26  ]
[; ;doprnt.c: 706: case 'd':
"706
[e :U 27 ]
"707
[e :U 28 ]
[; ;doprnt.c: 707: case 'i':
[; ;doprnt.c: 708: break;
"708
[e $U 23  ]
[; ;doprnt.c: 811: default:
"811
[e :U 29 ]
[; ;doprnt.c: 822: continue;
"822
[e $U 9  ]
"831
}
[; ;doprnt.c: 831: }
[e $U 23  ]
"644
[e :U 24 ]
[e [\ = _c -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `c , $ -> -> 0 `i `c 25
 , $ -> -> 100 `ui `c 27
 , $ -> -> 105 `ui `c 28
 29 ]
"831
[e :U 23 ]
[; ;doprnt.c: 1262: {
"1262
{
[; ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
"1268
[e = . __val 0 -> *U -> ( ___va_arg , (. -> *U -> &U _ap `**i `*v -> 0 `i `*i `ui ]
[; ;doprnt.c: 1270: if((int)_val._val < 0) {
"1270
[e $ ! < -> . __val 0 `i -> 0 `i 30  ]
{
[; ;doprnt.c: 1271: flag |= 0x03;
"1271
[e =| _flag -> -> 3 `i `uc ]
[; ;doprnt.c: 1272: _val._val = -_val._val;
"1272
[e = . __val 0 -U . __val 0 ]
"1273
}
[e :U 30 ]
"1275
}
[; ;doprnt.c: 1273: }
[; ;doprnt.c: 1275: }
[; ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
"1314
{
[e = _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 31  ]
[e $U 32  ]
"1315
[e :U 31 ]
[; ;doprnt.c: 1315: if(_val._val < dpowers[c])
[e $ ! < . __val 0 *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux 34  ]
[; ;doprnt.c: 1316: break;
"1316
[e $U 32  ]
[e :U 34 ]
"1314
[e ++ _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 31  ]
[e :U 32 ]
"1354
}
[; ;doprnt.c: 1354: if(width && flag & 0x03)
[e $ ! && != _width -> 0 `i != & -> _flag `i -> 3 `i -> 0 `i 35  ]
[; ;doprnt.c: 1355: width--;
"1355
[e -- _width -> 1 `i ]
[e :U 35 ]
[; ;doprnt.c: 1390: if(width > c)
"1390
[e $ ! > _width -> _c `i 36  ]
[; ;doprnt.c: 1391: width -= c;
"1391
[e =- _width -> _c `i ]
[e $U 37  ]
"1392
[e :U 36 ]
[; ;doprnt.c: 1392: else
[; ;doprnt.c: 1393: width = 0;
"1393
[e = _width -> 0 `i ]
[e :U 37 ]
[; ;doprnt.c: 1396: if(flag & 0x04) {
"1396
[e $ ! != & -> _flag `i -> 4 `i -> 0 `i 38  ]
{
[; ;doprnt.c: 1401: if(flag & 0x03)
"1401
[e $ ! != & -> _flag `i -> 3 `i -> 0 `i 39  ]
[; ;doprnt.c: 1402: ((*sp++ = ('-')));
"1402
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 45 `ui `uc ]
[e :U 39 ]
[; ;doprnt.c: 1424: if(width)
"1424
[e $ ! != _width -> 0 `i 40  ]
[; ;doprnt.c: 1425: do
"1425
[e :U 43 ]
[; ;doprnt.c: 1426: ((*sp++ = ('0')));
"1426
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 48 `ui `uc ]
[; ;doprnt.c: 1427: while(--width);
"1427
[e $ != =- _width -> 1 `i -> 0 `i 43  ]
[e :U 42 ]
[e :U 40 ]
"1429
}
[; ;doprnt.c: 1429: } else
[e $U 44  ]
[e :U 38 ]
[; ;doprnt.c: 1431: {
"1431
{
[; ;doprnt.c: 1433: if(width
[; ;doprnt.c: 1437: )
"1437
[e $ ! != _width -> 0 `i 45  ]
[; ;doprnt.c: 1438: do
"1438
[e :U 48 ]
[; ;doprnt.c: 1439: ((*sp++ = (' ')));
"1439
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 32 `ui `uc ]
[; ;doprnt.c: 1440: while(--width);
"1440
[e $ != =- _width -> 1 `i -> 0 `i 48  ]
[e :U 47 ]
[e :U 45 ]
[; ;doprnt.c: 1447: if(flag & 0x03)
"1447
[e $ ! != & -> _flag `i -> 3 `i -> 0 `i 49  ]
[; ;doprnt.c: 1448: ((*sp++ = ('-')));
"1448
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 45 `ui `uc ]
[e :U 49 ]
"1478
}
[e :U 44 ]
[; ;doprnt.c: 1478: }
[; ;doprnt.c: 1481: prec = c;
"1481
[e = _prec _c ]
[; ;doprnt.c: 1483: while(prec--) {
"1483
[e $U 50  ]
[e :U 51 ]
{
[; ;doprnt.c: 1487: {
"1487
{
[; ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
"1498
[e = _c -> + % / . __val 0 *U + &U _dpowers * -> -> _prec `uc `ux -> -> # *U &U _dpowers `ui `ux -> -> 10 `i `ui -> 48 `ui `c ]
"1532
}
[; ;doprnt.c: 1532: }
[; ;doprnt.c: 1533: ((*sp++ = (c)));
"1533
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> _c `uc ]
"1534
}
[e :U 50 ]
"1483
[e $ != -> -- _prec -> -> 1 `i `c `i -> -> -> 0 `i `c `i 51  ]
[e :U 52 ]
"1542
}
[e :U 9 ]
"545
[e $ != -> = _c -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `c `i -> -> -> 0 `i `c `i 10  ]
[e :U 11 ]
[; ;doprnt.c: 1534: }
[; ;doprnt.c: 1542: }
[; ;doprnt.c: 1544: alldone:
"1544
[e :U 26 ]
[; ;doprnt.c: 1547: *sp = 0;
"1547
[e = *U _sp -> -> 0 `i `uc ]
[; ;doprnt.c: 1549: return 0;
"1549
[e ) -> 0 `i ]
[e $UE 8  ]
[; ;doprnt.c: 1550: }
"1550
[e :UE 8 ]
}
