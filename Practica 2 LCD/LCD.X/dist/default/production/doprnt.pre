
# 1 "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"

# 8 "C:\Program Files (x86)\Microchip\xc8\v1.33\include\stdio.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;

# 7 "C:\Program Files (x86)\Microchip\xc8\v1.33\include\stdarg.h"
typedef void * va_list[1];

#pragma intrinsic(__va_start)
extern void * __va_start(void);

#pragma intrinsic(__va_arg)
extern void * __va_arg(void *, ...);

# 23 "C:\Program Files (x86)\Microchip\xc8\v1.33\include\stdio.h"
extern int errno;

# 54
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 17 "C:\Program Files (x86)\Microchip\xc8\v1.33\include\conio.h"
extern int errno;


extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern __bit kbhit(void);

# 31
extern char * cgets(char *);
extern void cputs(const char *);

# 99 "C:\Program Files (x86)\Microchip\xc8\v1.33\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);


# 191
#pragma printf_check(vprintf) const
#pragma printf_check(vsprintf) const

extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 4 "C:\Program Files (x86)\Microchip\xc8\v1.33\include\ctype.h"
extern __bit isalpha(char);
extern __bit isupper(char);
extern __bit islower(char);
extern __bit isdigit(char);
extern __bit isxdigit(char);
extern __bit isspace(char);
extern __bit ispunct(char);
extern __bit isalnum(char);
extern __bit isprint(char);
extern __bit isgraph(char);
extern __bit iscntrl(char);


extern char toupper(char);
extern char tolower(char);

# 27 "C:\Program Files (x86)\Microchip\xc8\v1.33\include\stdlib.h"
typedef struct {
int rem;
int quot;
} div_t;
typedef struct {
unsigned rem;
unsigned quot;
} udiv_t;
typedef struct {
long quot;
long rem;
} ldiv_t;
typedef struct {
unsigned long quot;
unsigned long rem;
} uldiv_t;

# 65
extern double atof(const char *);
extern double strtod(const char *, const char **);
extern int atoi(const char *);
extern unsigned xtoi(const char *);
extern long atol(const char *);
extern long strtol(const char *, char **, int);

extern int rand(void);
extern void srand(unsigned int);
extern void * calloc(size_t, size_t);
extern div_t div(int numer, int denom);
extern udiv_t udiv(unsigned numer, unsigned denom);
extern ldiv_t ldiv(long numer, long denom);
extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
extern unsigned long _lrotl(unsigned long value, unsigned int shift);
extern unsigned long _lrotr(unsigned long value, unsigned int shift);
extern unsigned int _rotl(unsigned int value, unsigned int shift);
extern unsigned int _rotr(unsigned int value, unsigned int shift);




extern void * malloc(size_t);
extern void free(void *);
extern void * realloc(void *, size_t);

extern void abort(void);
extern void exit(int);
extern int atexit(void (*)(void));
extern char * getenv(const char *);
extern char ** environ;
extern int system(char *);
extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
extern int abs(int);
extern long labs(long);


extern char * itoa(char * buf, int val, int base);
extern char * utoa(char * buf, unsigned val, int base);




extern char * ltoa(char * buf, long val, int base);
extern char * ultoa(char * buf, unsigned long val, int base);

extern char * ftoa(float f, int * status);

# 22 "C:\Program Files (x86)\Microchip\xc8\v1.33\include\string.h"
extern void * memcpy(void *, const void *, size_t);
extern void * memmove(void *, const void *, size_t);
extern void * memset(void *, int, size_t);



extern void * __builtin_memcpy(void *, const void *, size_t);
#pragma intrinsic(__builtin_memcpy)

# 42
extern char * strcat(char *, const char *);
extern char * strcpy(char *, const char *);
extern char * strncat(char *, const char *, size_t);
extern char * strncpy(char *, const char *, size_t);
extern char * strdup(const char *);
extern char * strtok(char *, const char *);


extern int memcmp(const void *, const void *, size_t);
extern int strcmp(const char *, const char *);
extern int stricmp(const char *, const char *);
extern int strncmp(const char *, const char *, size_t);
extern int strnicmp(const char *, const char *, size_t);
extern void * memchr(const void *, int, size_t);
extern size_t strcspn(const char *, const char *);
extern char * strpbrk(const char *, const char *);
extern size_t strspn(const char *, const char *);
extern char * strstr(const char *, const char *);
extern char * stristr(const char *, const char *);
extern char * strerror(int);
extern size_t strlen(const char *);
extern char * strchr(const char *, int);
extern char * strichr(const char *, int);
extern char * strrchr(const char *, int);
extern char * strrichr(const char *, int);

# 17 "C:\Program Files (x86)\Microchip\xc8\v1.33\include\conio.h"
extern int errno;


extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern __bit kbhit(void);

# 31
extern char * cgets(char *);
extern void cputs(const char *);

# 17 "C:\Program Files (x86)\Microchip\xc8\v1.33\include\sys.h"
extern int errno;

# 30
extern int execl(char *, char *, ...);
extern int execv(char *, char **);
extern int execve(char *, char **, char **);
extern int execle(char *, char *, ...);
extern int execvp(char *, char **);
extern int execlp(char *, char *, ...);
extern int getpid(void);
extern char * mktemp(char *);

# 51
extern int spawnl(char *, char *, ...);
extern int spawnv(char *, char **);
extern int spawnle(char *, char *, ...);
extern int spawnve(char *, char **, char **);
extern int spawnlp(char *, char *, ...);
extern int spawnvp(char *, char **);

extern int chdir(char *);
extern int chdrv(char *);
extern int mkdir(char *);
extern int rmdir(char *);
extern char * getcwd(char *);
extern void persist_validate(void);
extern int persist_check(int);
extern char * getdrv(void);
extern char ** _getargs(char *, char *);
extern int _argc_;

# 78
extern void * sbrk(size_t);
extern void brk(void *);

# 85
extern int _pnum(unsigned long, signed char, signed char, unsigned char, unsigned char, struct __prbuf *, unsigned char);
extern int _fnum(double, short, short, short, struct __prbuf *, short);

# 3 "C:\Program Files (x86)\Microchip\xc8\v1.33\include\math.h"
extern double fabs(double);
extern double floor(double);
extern double ceil(double);
extern double modf(double, double *);
extern double sqrt(double);
extern double atof(const char *);
extern double sin(double);
extern double cos(double);
extern double tan(double);
extern double asin(double);
extern double acos(double);
extern double atan(double);
extern double atan2(double, double);
extern double log(double);
extern double log10(double);
extern double pow(double, double);
extern double exp(double);
extern double sinh(double);
extern double cosh(double);
extern double tanh(double);
extern double eval_poly(double, const double *, int);
extern double frexp(double, int *);
extern double ldexp(double, int);
extern double fmod(double, double);
extern double trunc(double);
extern double round(double);


# 13 "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
#pragma warning disable 350

# 354
const static unsigned int dpowers[] = {1, 10, 100, 1000, 10000,

# 359
};

# 455
int

# 492
sprintf(char * sp, const char * f, ...)
{
va_list ap;




signed char c;

int width;




signed char prec;

unsigned char flag;

# 527
union {
unsigned int _val;
struct {
const char * _cp;
unsigned _len;
} _str;
} _val;

# 542
*ap = __va_start();


while(c = *f++) {

if(c != '%')

{
((*sp++ = (c)));
continue;
}


width = 0;

flag = 0;

for(;;) {
switch(*f) {

# 588
case '0':
flag |= 0x04;
f++;
continue;

}
break;
}

# 606
if(isdigit((unsigned)*f)) {
width = 0;
do {
width *= 10;
width += *f++ - '0';
} while(isdigit((unsigned)*f));

# 617
}

# 644
switch(c = *f++) {

case 0:
goto alldone;

# 706
case 'd':
case 'i':
break;

# 811
default:

# 822
continue;

# 831
}

# 1262
{

# 1268
_val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));

if((int)_val._val < 0) {
flag |= 0x03;
_val._val = -_val._val;
}

}

# 1314
for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
if(_val._val < dpowers[c])
break;

# 1354
if(width && flag & 0x03)
width--;

# 1390
if(width > c)
width -= c;
else
width = 0;


if(flag & 0x04) {




if(flag & 0x03)
((*sp++ = ('-')));

# 1424
if(width)
do
((*sp++ = ('0')));
while(--width);

} else

{

if(width

# 1437
)
do
((*sp++ = (' ')));
while(--width);

# 1447
if(flag & 0x03)
((*sp++ = ('-')));

# 1478
}


prec = c;

while(prec--) {

# 1487
{

# 1498
c = (_val._val / dpowers[prec]) % 10 + '0';

# 1532
}
((*sp++ = (c)));
}

# 1542
}

alldone:


*sp = 0;

return 0;
}

